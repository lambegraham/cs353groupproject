/* Copyright (c) 2014, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#include "test_config.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <memory>

#include <openssl/base64.h>

namespace {

template <typename T>
struct Flag {
  const char *flag;
  T TestConfig::*member;
***REMOVED***;

// FindField looks for the flag in |flags| that matches |flag|. If one is found,
// it returns a pointer to the corresponding field in |config|. Otherwise, it
// returns NULL.
template<typename T, size_t N>
T *FindField(TestConfig *config, const Flag<T> (&flags)[N], const char *flag) {
  for (size_t i = 0; i < N; i++) {
    if (strcmp(flag, flags[i].flag) == 0) {
      return &(config->*(flags[i].member));
  ***REMOVED***
***REMOVED***
  return NULL;
***REMOVED***

const Flag<bool> kBoolFlags[] = {
  { "-server", &TestConfig::is_server ***REMOVED***,
  { "-dtls", &TestConfig::is_dtls ***REMOVED***,
  { "-fallback-scsv", &TestConfig::fallback_scsv ***REMOVED***,
  { "-require-any-client-certificate",
    &TestConfig::require_any_client_certificate ***REMOVED***,
  { "-false-start", &TestConfig::false_start ***REMOVED***,
  { "-async", &TestConfig::async ***REMOVED***,
  { "-write-different-record-sizes",
    &TestConfig::write_different_record_sizes ***REMOVED***,
  { "-cbc-record-splitting", &TestConfig::cbc_record_splitting ***REMOVED***,
  { "-partial-write", &TestConfig::partial_write ***REMOVED***,
  { "-no-tls13", &TestConfig::no_tls13 ***REMOVED***,
  { "-no-tls12", &TestConfig::no_tls12 ***REMOVED***,
  { "-no-tls11", &TestConfig::no_tls11 ***REMOVED***,
  { "-no-tls1", &TestConfig::no_tls1 ***REMOVED***,
  { "-no-ssl3", &TestConfig::no_ssl3 ***REMOVED***,
  { "-enable-channel-id", &TestConfig::enable_channel_id ***REMOVED***,
  { "-shim-writes-first", &TestConfig::shim_writes_first ***REMOVED***,
  { "-expect-session-miss", &TestConfig::expect_session_miss ***REMOVED***,
  { "-decline-alpn", &TestConfig::decline_alpn ***REMOVED***,
  { "-expect-extended-master-secret",
    &TestConfig::expect_extended_master_secret ***REMOVED***,
  { "-enable-ocsp-stapling", &TestConfig::enable_ocsp_stapling ***REMOVED***,
  { "-enable-signed-cert-timestamps",
    &TestConfig::enable_signed_cert_timestamps ***REMOVED***,
  { "-implicit-handshake", &TestConfig::implicit_handshake ***REMOVED***,
  { "-use-early-callback", &TestConfig::use_early_callback ***REMOVED***,
  { "-fail-early-callback", &TestConfig::fail_early_callback ***REMOVED***,
  { "-install-ddos-callback", &TestConfig::install_ddos_callback ***REMOVED***,
  { "-fail-ddos-callback", &TestConfig::fail_ddos_callback ***REMOVED***,
  { "-fail-second-ddos-callback", &TestConfig::fail_second_ddos_callback ***REMOVED***,
  { "-fail-cert-callback", &TestConfig::fail_cert_callback ***REMOVED***,
  { "-handshake-never-done", &TestConfig::handshake_never_done ***REMOVED***,
  { "-use-export-context", &TestConfig::use_export_context ***REMOVED***,
  { "-tls-unique", &TestConfig::tls_unique ***REMOVED***,
  { "-expect-ticket-renewal", &TestConfig::expect_ticket_renewal ***REMOVED***,
  { "-expect-no-session", &TestConfig::expect_no_session ***REMOVED***,
  { "-expect-ticket-supports-early-data",
    &TestConfig::expect_ticket_supports_early_data ***REMOVED***,
  { "-use-ticket-callback", &TestConfig::use_ticket_callback ***REMOVED***,
  { "-renew-ticket", &TestConfig::renew_ticket ***REMOVED***,
  { "-enable-early-data", &TestConfig::enable_early_data ***REMOVED***,
  { "-enable-client-custom-extension",
    &TestConfig::enable_client_custom_extension ***REMOVED***,
  { "-enable-server-custom-extension",
    &TestConfig::enable_server_custom_extension ***REMOVED***,
  { "-custom-extension-skip", &TestConfig::custom_extension_skip ***REMOVED***,
  { "-custom-extension-fail-add", &TestConfig::custom_extension_fail_add ***REMOVED***,
  { "-check-close-notify", &TestConfig::check_close_notify ***REMOVED***,
  { "-shim-shuts-down", &TestConfig::shim_shuts_down ***REMOVED***,
  { "-verify-fail", &TestConfig::verify_fail ***REMOVED***,
  { "-verify-peer", &TestConfig::verify_peer ***REMOVED***,
  { "-verify-peer-if-no-obc", &TestConfig::verify_peer_if_no_obc ***REMOVED***,
  { "-expect-verify-result", &TestConfig::expect_verify_result ***REMOVED***,
  { "-renegotiate-once", &TestConfig::renegotiate_once ***REMOVED***,
  { "-renegotiate-freely", &TestConfig::renegotiate_freely ***REMOVED***,
  { "-renegotiate-ignore", &TestConfig::renegotiate_ignore ***REMOVED***,
  { "-p384-only", &TestConfig::p384_only ***REMOVED***,
  { "-enable-all-curves", &TestConfig::enable_all_curves ***REMOVED***,
  { "-use-old-client-cert-callback",
    &TestConfig::use_old_client_cert_callback ***REMOVED***,
  { "-send-alert", &TestConfig::send_alert ***REMOVED***,
  { "-peek-then-read", &TestConfig::peek_then_read ***REMOVED***,
  { "-enable-grease", &TestConfig::enable_grease ***REMOVED***,
  { "-use-exporter-between-reads", &TestConfig::use_exporter_between_reads ***REMOVED***,
  { "-retain-only-sha256-client-cert",
    &TestConfig::retain_only_sha256_client_cert ***REMOVED***,
  { "-expect-sha256-client-cert",
    &TestConfig::expect_sha256_client_cert ***REMOVED***,
  { "-read-with-unfinished-write", &TestConfig::read_with_unfinished_write ***REMOVED***,
  { "-expect-secure-renegotiation",
    &TestConfig::expect_secure_renegotiation ***REMOVED***,
  { "-expect-no-secure-renegotiation",
    &TestConfig::expect_no_secure_renegotiation ***REMOVED***,
  { "-expect-session-id", &TestConfig::expect_session_id ***REMOVED***,
  { "-expect-no-session-id", &TestConfig::expect_no_session_id ***REMOVED***,
  { "-expect-accept-early-data", &TestConfig::expect_accept_early_data ***REMOVED***,
  { "-expect-reject-early-data", &TestConfig::expect_reject_early_data ***REMOVED***,
  { "-expect-no-offer-early-data", &TestConfig::expect_no_offer_early_data ***REMOVED***,
  { "-no-op-extra-handshake", &TestConfig::no_op_extra_handshake ***REMOVED***,
  { "-handshake-twice", &TestConfig::handshake_twice ***REMOVED***,
  { "-allow-unknown-alpn-protos", &TestConfig::allow_unknown_alpn_protos ***REMOVED***,
  { "-enable-ed25519", &TestConfig::enable_ed25519 ***REMOVED***,
  { "-use-custom-verify-callback", &TestConfig::use_custom_verify_callback ***REMOVED***,
  { "-allow-false-start-without-alpn",
    &TestConfig::allow_false_start_without_alpn ***REMOVED***,
  { "-expect-draft-downgrade", &TestConfig::expect_draft_downgrade ***REMOVED***,
  { "-handoff", &TestConfig::handoff ***REMOVED***,
  { "-expect-dummy-pq-padding", &TestConfig::expect_dummy_pq_padding ***REMOVED***,
***REMOVED***;

const Flag<std::string> kStringFlags[] = {
  { "-write-settings", &TestConfig::write_settings ***REMOVED***,
  { "-key-file", &TestConfig::key_file ***REMOVED***,
  { "-cert-file", &TestConfig::cert_file ***REMOVED***,
  { "-expect-server-name", &TestConfig::expected_server_name ***REMOVED***,
  { "-advertise-npn", &TestConfig::advertise_npn ***REMOVED***,
  { "-expect-next-proto", &TestConfig::expected_next_proto ***REMOVED***,
  { "-select-next-proto", &TestConfig::select_next_proto ***REMOVED***,
  { "-send-channel-id", &TestConfig::send_channel_id ***REMOVED***,
  { "-host-name", &TestConfig::host_name ***REMOVED***,
  { "-advertise-alpn", &TestConfig::advertise_alpn ***REMOVED***,
  { "-expect-alpn", &TestConfig::expected_alpn ***REMOVED***,
  { "-expect-late-alpn", &TestConfig::expected_late_alpn ***REMOVED***,
  { "-expect-advertised-alpn", &TestConfig::expected_advertised_alpn ***REMOVED***,
  { "-select-alpn", &TestConfig::select_alpn ***REMOVED***,
  { "-psk", &TestConfig::psk ***REMOVED***,
  { "-psk-identity", &TestConfig::psk_identity ***REMOVED***,
  { "-srtp-profiles", &TestConfig::srtp_profiles ***REMOVED***,
  { "-cipher", &TestConfig::cipher ***REMOVED***,
  { "-export-label", &TestConfig::export_label ***REMOVED***,
  { "-export-context", &TestConfig::export_context ***REMOVED***,
  { "-expect-peer-cert-file", &TestConfig::expect_peer_cert_file ***REMOVED***,
  { "-use-client-ca-list", &TestConfig::use_client_ca_list ***REMOVED***,
  { "-expect-client-ca-list", &TestConfig::expected_client_ca_list ***REMOVED***,
  { "-expect-msg-callback", &TestConfig::expect_msg_callback ***REMOVED***,
***REMOVED***;

const Flag<std::string> kBase64Flags[] = {
  { "-expect-certificate-types", &TestConfig::expected_certificate_types ***REMOVED***,
  { "-expect-channel-id", &TestConfig::expected_channel_id ***REMOVED***,
  { "-token-binding-params", &TestConfig::send_token_binding_params ***REMOVED***,
  { "-expect-ocsp-response", &TestConfig::expected_ocsp_response ***REMOVED***,
  { "-expect-signed-cert-timestamps",
    &TestConfig::expected_signed_cert_timestamps ***REMOVED***,
  { "-ocsp-response", &TestConfig::ocsp_response ***REMOVED***,
  { "-signed-cert-timestamps", &TestConfig::signed_cert_timestamps ***REMOVED***,
  { "-ticket-key", &TestConfig::ticket_key ***REMOVED***,
  { "-quic-transport-params", &TestConfig::quic_transport_params ***REMOVED***,
  { "-expected-quic-transport-params",
    &TestConfig::expected_quic_transport_params ***REMOVED***,
***REMOVED***;

const Flag<int> kIntFlags[] = {
  { "-port", &TestConfig::port ***REMOVED***,
  { "-resume-count", &TestConfig::resume_count ***REMOVED***,
  { "-expected-token-binding-param",
    &TestConfig::expected_token_binding_param ***REMOVED***,
  { "-min-version", &TestConfig::min_version ***REMOVED***,
  { "-max-version", &TestConfig::max_version ***REMOVED***,
  { "-expect-version", &TestConfig::expect_version ***REMOVED***,
  { "-mtu", &TestConfig::mtu ***REMOVED***,
  { "-export-early-keying-material",
    &TestConfig::export_early_keying_material ***REMOVED***,
  { "-export-keying-material", &TestConfig::export_keying_material ***REMOVED***,
  { "-expect-total-renegotiations", &TestConfig::expect_total_renegotiations ***REMOVED***,
  { "-expect-peer-signature-algorithm",
    &TestConfig::expect_peer_signature_algorithm ***REMOVED***,
  { "-expect-curve-id", &TestConfig::expect_curve_id ***REMOVED***,
  { "-initial-timeout-duration-ms", &TestConfig::initial_timeout_duration_ms ***REMOVED***,
  { "-max-cert-list", &TestConfig::max_cert_list ***REMOVED***,
  { "-expect-cipher-aes", &TestConfig::expect_cipher_aes ***REMOVED***,
  { "-expect-cipher-no-aes", &TestConfig::expect_cipher_no_aes ***REMOVED***,
  { "-resumption-delay", &TestConfig::resumption_delay ***REMOVED***,
  { "-max-send-fragment", &TestConfig::max_send_fragment ***REMOVED***,
  { "-read-size", &TestConfig::read_size ***REMOVED***,
  { "-expect-ticket-age-skew", &TestConfig::expect_ticket_age_skew ***REMOVED***,
  { "-tls13-variant", &TestConfig::tls13_variant ***REMOVED***,
  { "-dummy-pq-padding-len", &TestConfig::dummy_pq_padding_len ***REMOVED***,
***REMOVED***;

const Flag<std::vector<int>> kIntVectorFlags[] = {
  { "-signing-prefs", &TestConfig::signing_prefs ***REMOVED***,
  { "-verify-prefs", &TestConfig::verify_prefs ***REMOVED***,
***REMOVED***;

bool ParseFlag(char *flag, int argc, char **argv, int *i,
               bool skip, TestConfig *out_config) {
  bool *bool_field = FindField(out_config, kBoolFlags, flag);
  if (bool_field != NULL) {
    if (!skip) {
      *bool_field = true;
  ***REMOVED***
    return true;
***REMOVED***

  std::string *string_field = FindField(out_config, kStringFlags, flag);
  if (string_field != NULL) {
    *i = *i + 1;
    if (*i >= argc) {
      fprintf(stderr, "Missing parameter\n");
      return false;
  ***REMOVED***
    if (!skip) {
      string_field->assign(argv[*i]);
  ***REMOVED***
    return true;
***REMOVED***

  std::string *base64_field = FindField(out_config, kBase64Flags, flag);
  if (base64_field != NULL) {
    *i = *i + 1;
    if (*i >= argc) {
      fprintf(stderr, "Missing parameter\n");
      return false;
  ***REMOVED***
    size_t len;
    if (!EVP_DecodedLength(&len, strlen(argv[*i]))) {
      fprintf(stderr, "Invalid base64: %s\n", argv[*i]);
      return false;
  ***REMOVED***
    std::unique_ptr<uint8_t[]> decoded(new uint8_t[len]);
    if (!EVP_DecodeBase64(decoded.get(), &len, len,
                          reinterpret_cast<const uint8_t *>(argv[*i]),
                          strlen(argv[*i]))) {
      fprintf(stderr, "Invalid base64: %s\n", argv[*i]);
      return false;
  ***REMOVED***
    if (!skip) {
      base64_field->assign(reinterpret_cast<const char *>(decoded.get()),
                           len);
  ***REMOVED***
    return true;
***REMOVED***

  int *int_field = FindField(out_config, kIntFlags, flag);
  if (int_field) {
    *i = *i + 1;
    if (*i >= argc) {
      fprintf(stderr, "Missing parameter\n");
      return false;
  ***REMOVED***
    if (!skip) {
      *int_field = atoi(argv[*i]);
  ***REMOVED***
    return true;
***REMOVED***

  std::vector<int> *int_vector_field =
      FindField(out_config, kIntVectorFlags, flag);
  if (int_vector_field) {
    *i = *i + 1;
    if (*i >= argc) {
      fprintf(stderr, "Missing parameter\n");
      return false;
  ***REMOVED***

    // Each instance of the flag adds to the list.
    if (!skip) {
      int_vector_field->push_back(atoi(argv[*i]));
  ***REMOVED***
    return true;
***REMOVED***

  fprintf(stderr, "Unknown argument: %s\n", flag);
  return false;
***REMOVED***

const char kInit[] = "-on-initial";
const char kResume[] = "-on-resume";
const char kRetry[] = "-on-retry";

***REMOVED***  // namespace

bool ParseConfig(int argc, char **argv,
                 TestConfig *out_initial,
                 TestConfig *out_resume,
                 TestConfig *out_retry) {
  for (int i = 0; i < argc; i++) {
    bool skip = false;
    char *flag = argv[i];
    if (strncmp(flag, kInit, strlen(kInit)) == 0) {
      if (!ParseFlag(flag + strlen(kInit), argc, argv, &i, skip, out_initial)) {
        return false;
    ***REMOVED***
  ***REMOVED*** else if (strncmp(flag, kResume, strlen(kResume)) == 0) {
      if (!ParseFlag(flag + strlen(kResume), argc, argv, &i, skip,
                     out_resume)) {
        return false;
    ***REMOVED***
  ***REMOVED*** else if (strncmp(flag, kRetry, strlen(kRetry)) == 0) {
      if (!ParseFlag(flag + strlen(kRetry), argc, argv, &i, skip, out_retry)) {
        return false;
    ***REMOVED***
  ***REMOVED*** else {
      int i_init = i;
      int i_resume = i;
      if (!ParseFlag(flag, argc, argv, &i_init, skip, out_initial) ||
          !ParseFlag(flag, argc, argv, &i_resume, skip, out_resume) ||
          !ParseFlag(flag, argc, argv, &i, skip, out_retry)) {
        return false;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  return true;
***REMOVED***
