module.exports = (() => {
  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
  ***REMOVED***
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
***REMOVED***

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, peg$SyntaxError);
  ***REMOVED***
***REMOVED***

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    const options = arguments.length > 1 ? arguments[1] : {***REMOVED***;
    const parser = this;
    const peg$FAILED = {***REMOVED***;
    const peg$startRuleFunctions = {template: peg$parsetemplate***REMOVED***;
    let peg$startRuleFunction = peg$parsetemplate;
    const peg$c0 = '/';
    const peg$c1 = {type: 'literal', value: '/', description: '"/"'***REMOVED***;
    const peg$c2 = segments => {
      return segments;
  ***REMOVED***
    const peg$c3 = (s, segments) => {
      return s.concat(segments);
  ***REMOVED***
    const peg$c4 = s => {
      return s;
  ***REMOVED***
    const peg$c5 = '{';
    const peg$c6 = {type: 'literal', value: '{', description: '"{"'***REMOVED***;
    const peg$c7 = '=';
    const peg$c8 = {type: 'literal', value: '=', description: '"="'***REMOVED***;
    const peg$c9 = '***REMOVED***';
    const peg$c10 = {type: 'literal', value: '***REMOVED***', description: '"***REMOVED***"'***REMOVED***;
    const peg$c11 = (l, segments) => {
      return [
        {kind: extras.BINDING, literal: l***REMOVED***,
        segments,
        {kind: extras.END_BINDING, literal: ''***REMOVED***,
      ].reduce((a, b) => a.concat(b), []);
  ***REMOVED***
    const peg$c12 = l => {
      return [
        {kind: extras.BINDING, literal: l***REMOVED***,
        {kind: extras.TERMINAL, literal: '*'***REMOVED***,
        {kind: extras.END_BINDING, literal: ''***REMOVED***,
      ];
  ***REMOVED***
    const peg$c13 = (t, segments) => {
      return t.concat(segments);
  ***REMOVED***
    const peg$c14 = t => {
      if (t[0].literal === '*' || t[0].literal === '**') {
        return [
          {
            kind: extras.BINDING,
        ***REMOVED***,
          t[0],
          {kind: extras.END_BINDING, literal: ''***REMOVED***,
        ];
    ***REMOVED*** else {
        return t;
    ***REMOVED***
  ***REMOVED***
    const peg$c15 = '**';
    const peg$c16 = {type: 'literal', value: '**', description: '"**"'***REMOVED***;
    const peg$c17 = '*';
    const peg$c18 = {type: 'literal', value: '*', description: '"*"'***REMOVED***;
    const peg$c19 = l => {
      return [{kind: extras.TERMINAL, literal: l***REMOVED***];
  ***REMOVED***
    const peg$c20 = /^[^*=***REMOVED***{\/]/;
    const peg$c21 = {type: 'class', value: '[^*=***REMOVED***{/]', description: '[^*=***REMOVED***{/]'***REMOVED***;
    const peg$c22 = cs => {
      return cs.join('');
  ***REMOVED***
    let peg$currPos = 0;
    let peg$savedPos = 0;
    const peg$posDetailsCache = [{line: 1, column: 1, seenCR: false***REMOVED***];
    let peg$maxFailPos = 0;
    let peg$maxFailExpected = [];
    const peg$silentFails = 0;
    let peg$result;

    if ('startRule' in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error(
          'Can\'t start parsing from rule "' + options.startRule + '".'
        );
    ***REMOVED***

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  ***REMOVED***

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
  ***REMOVED***

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
  ***REMOVED***

    function expected(description) {
      throw peg$buildException(
        null,
        [{type: 'other', description***REMOVED***],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
  ***REMOVED***

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
  ***REMOVED***

    function peg$computePosDetails(pos) {
      let details = peg$posDetailsCache[pos],
        p,
        ch;

      if (details) {
        return details;
    ***REMOVED*** else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
      ***REMOVED***

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column,
          seenCR: details.seenCR,
      ***REMOVED***

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === '\n') {
            if (!details.seenCR) {
              details.line++;
          ***REMOVED***
            details.column = 1;
            details.seenCR = false;
        ***REMOVED*** else if (ch === '\r' || ch === '\u2028' || ch === '\u2029') {
            details.line++;
            details.column = 1;
            details.seenCR = true;
        ***REMOVED*** else {
            details.column++;
            details.seenCR = false;
        ***REMOVED***

          p++;
      ***REMOVED***

        peg$posDetailsCache[pos] = details;
        return details;
    ***REMOVED***
  ***REMOVED***

    function peg$computeLocation(startPos, endPos) {
      const startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column,
      ***REMOVED***,
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column,
      ***REMOVED***,
    ***REMOVED***
  ***REMOVED***

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
    ***REMOVED***

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
    ***REMOVED***

      peg$maxFailExpected.push(expected);
  ***REMOVED***

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        let i = 1;

        expected.sort((a, b) => {
          if (a.description < b.description) {
            return -1;
        ***REMOVED*** else if (a.description > b.description) {
            return 1;
        ***REMOVED*** else {
            return 0;
        ***REMOVED***
      ***REMOVED***);

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
        ***REMOVED*** else {
            i++;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) {
            return ch
              .charCodeAt(0)
              .toString(16)
              .toUpperCase();
        ***REMOVED***

          return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\f/g, '\\f')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, ch => {
              return '\\x0' + hex(ch);
          ***REMOVED***)
            .replace(/[\x10-\x1F\x80-\xFF]/g, ch => {
              return '\\x' + hex(ch);
          ***REMOVED***)
            .replace(/[\u0100-\u0FFF]/g, ch => {
              return '\\u0' + hex(ch);
          ***REMOVED***)
            .replace(/[\u1000-\uFFFF]/g, ch => {
              return '\\u' + hex(ch);
          ***REMOVED***);
      ***REMOVED***

        const expectedDescs = new Array(expected.length);
        let expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
      ***REMOVED***

        expectedDesc =
          expected.length > 1
            ? expectedDescs.slice(0, -1).join(', ') +
              ' or ' +
              expectedDescs[expected.length - 1]
            : expectedDescs[0];

        foundDesc = found ? '"' + stringEscape(found) + '"' : 'end of input';

        return 'Expected ' + expectedDesc + ' but ' + foundDesc + ' found.';
    ***REMOVED***

      if (expected !== null) {
        cleanupExpected(expected);
    ***REMOVED***

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
  ***REMOVED***

    function peg$parsetemplate() {
      let s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c0;
        peg$currPos++;
    ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c1);
      ***REMOVED***
    ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebound_segments();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s2);
          s0 = s1;
      ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
      ***REMOVED***
    ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
    ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsebound_segments();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s1);
      ***REMOVED***
        s0 = s1;
    ***REMOVED***

      return s0;
  ***REMOVED***

    function peg$parsebound_segments() {
      let s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsebound_segment();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c0;
          peg$currPos++;
      ***REMOVED*** else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c1);
        ***REMOVED***
      ***REMOVED***
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebound_segments();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3(s1, s3);
            s0 = s1;
        ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
      ***REMOVED***
    ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
    ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$parsebound_segment();
    ***REMOVED***

      return s0;
  ***REMOVED***

    function peg$parsebound_segment() {
      let s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsebound_terminal();
      if (s1 === peg$FAILED) {
        s1 = peg$parsevariable();
    ***REMOVED***
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1);
    ***REMOVED***
      s0 = s1;

      return s0;
  ***REMOVED***

    function peg$parsevariable() {
      let s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c5;
        peg$currPos++;
    ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c6);
      ***REMOVED***
    ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parseliteral();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c7;
            peg$currPos++;
        ***REMOVED*** else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c8);
          ***REMOVED***
        ***REMOVED***
          if (s3 !== peg$FAILED) {
            s4 = peg$parseunbound_segments();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c9;
                peg$currPos++;
            ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c10);
              ***REMOVED***
            ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c11(s2, s4);
                s0 = s1;
            ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
      ***REMOVED***
    ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
    ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c5;
          peg$currPos++;
      ***REMOVED*** else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c6);
        ***REMOVED***
      ***REMOVED***
        if (s1 !== peg$FAILED) {
          s2 = peg$parseliteral();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c9;
              peg$currPos++;
          ***REMOVED*** else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c10);
            ***REMOVED***
          ***REMOVED***
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12(s2);
              s0 = s1;
          ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
      ***REMOVED***
    ***REMOVED***

      return s0;
  ***REMOVED***

    function peg$parseunbound_segments() {
      let s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseunbound_terminal();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c0;
          peg$currPos++;
      ***REMOVED*** else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c1);
        ***REMOVED***
      ***REMOVED***
        if (s2 !== peg$FAILED) {
          s3 = peg$parseunbound_segments();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
        ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
      ***REMOVED***
    ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
    ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$parseunbound_terminal();
    ***REMOVED***

      return s0;
  ***REMOVED***

    function peg$parsebound_terminal() {
      let s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseunbound_terminal();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1);
    ***REMOVED***
      s0 = s1;

      return s0;
  ***REMOVED***

    function peg$parseunbound_terminal() {
      let s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 2;
    ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
      ***REMOVED***
    ***REMOVED***
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c17;
          peg$currPos++;
      ***REMOVED*** else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c18);
        ***REMOVED***
      ***REMOVED***
        if (s1 === peg$FAILED) {
          s1 = peg$parseliteral();
      ***REMOVED***
    ***REMOVED***
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c19(s1);
    ***REMOVED***
      s0 = s1;

      return s0;
  ***REMOVED***

    function peg$parseliteral() {
      let s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c20.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
    ***REMOVED*** else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c21);
      ***REMOVED***
    ***REMOVED***
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        ***REMOVED*** else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c21);
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
    ***REMOVED*** else {
        s1 = peg$FAILED;
    ***REMOVED***
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22(s1);
    ***REMOVED***
      s0 = s1;

      return s0;
  ***REMOVED***

    const extras = require('./parserExtras');

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
  ***REMOVED*** else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({type: 'end', description: 'end of input'***REMOVED***);
    ***REMOVED***

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
  ***REMOVED***
***REMOVED***

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
***REMOVED***
***REMOVED***)();
