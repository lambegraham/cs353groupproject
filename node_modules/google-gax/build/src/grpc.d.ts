/// <reference types="node" />
import * as grpcProtoLoader from '@grpc/proto-loader';
import { GoogleAuth, GoogleAuthOptions ***REMOVED*** from 'google-auth-library';
import * as grpc from '@grpc/grpc-js';
import { OutgoingHttpHeaders ***REMOVED*** from 'http';
import * as protobuf from 'protobufjs';
import * as gax from './gax';
export interface GrpcClientOptions extends GoogleAuthOptions {
    auth?: GoogleAuth;
    promise?: PromiseConstructor;
    grpc?: GrpcModule;
***REMOVED***
export interface MetadataValue {
    equals: Function;
***REMOVED***
export interface Metadata {
    new (): Metadata;
    set: (key: {***REMOVED***, value?: {***REMOVED*** | null) => void;
    clone: () => Metadata;
    value: MetadataValue;
    get: (key: {***REMOVED***) => {***REMOVED***;
***REMOVED***
export declare type GrpcModule = typeof grpc;
export interface ClientStubOptions {
    protocol?: string;
    servicePath: string;
    port: number;
    sslCreds?: any;
***REMOVED***
export declare class ClientStub extends grpc.Client {
    [name: string]: Function;
***REMOVED***
export declare class GrpcClient {
    auth: GoogleAuth;
    promise: PromiseConstructor;
    grpc: GrpcModule;
    grpcVersion: string;
    fallback: boolean;
    /**
     * A class which keeps the context of gRPC and auth for the gRPC.
     *
     * @param {Object=***REMOVED*** options - The optional parameters. It will be directly
     *   passed to google-auth-library library, so parameters like keyFile or
     *   credentials will be valid.
     * @param {Object=***REMOVED*** options.auth - An instance of google-auth-library.
     *   When specified, this auth instance will be used instead of creating
     *   a new one.
     * @param {Object=***REMOVED*** options.grpc - When specified, this will be used
     *   for the 'grpc' module in this context. By default, it will load the grpc
     *   module in the standard way.
     * @param {Function=***REMOVED*** options.promise - A constructor for a promise that
     * implements the ES6 specification of promise. If not provided, native
     * promises will be used.
     * @constructor
     */
    constructor(options?: GrpcClientOptions);
    /**
     * Creates a gRPC credentials. It asks the auth data if necessary.
     * @private
     * @param {Object***REMOVED*** opts - options values for configuring credentials.
     * @param {Object=***REMOVED*** opts.sslCreds - when specified, this is used instead
     *   of default channel credentials.
     * @return {Promise***REMOVED*** The promise which will be resolved to the gRPC credential.
     */
    _getCredentials(opts: ClientStubOptions): Promise<any>;
    /**
     * Loads the gRPC service from the proto file(s) at the given path and with the
     * given options.
     * @param filename The path to the proto file(s).
     * @param options Options for loading the proto file.
     */
    loadFromProto(filename: string | string[], options: grpcProtoLoader.Options): grpc.GrpcObject;
    /**
     * Load grpc proto service from a filename hooking in googleapis common protos
     * when necessary.
     * @param {String***REMOVED*** protoPath - The directory to search for the protofile.
     * @param {String|String[]***REMOVED*** filename - The filename(s) of the proto(s) to be loaded.
     *   If omitted, protoPath will be treated as a file path to load.
     * @return {Object<string, *>***REMOVED*** The gRPC loaded result (the toplevel namespace
     *   object).
     */
    loadProto(protoPath: string, filename?: string | string[]): grpc.GrpcObject;
    static _resolveFile(protoPath: string, filename: string): string;
    metadataBuilder(headers: OutgoingHttpHeaders): (abTests?: {***REMOVED*** | undefined, moreHeaders?: OutgoingHttpHeaders | undefined) => grpc.Metadata;
    /**
     * A wrapper of {@link constructSettings***REMOVED*** function under the gRPC context.
     *
     * Most of parameters are common among constructSettings, please take a look.
     * @param {string***REMOVED*** serviceName - The fullly-qualified name of the service.
     * @param {Object***REMOVED*** clientConfig - A dictionary of the client config.
     * @param {Object***REMOVED*** configOverrides - A dictionary of overriding configs.
     * @param {Object***REMOVED*** headers - A dictionary of additional HTTP header name to
     *   its value.
     * @return {Object***REMOVED*** A mapping of method names to CallSettings.
     */
    constructSettings(serviceName: string, clientConfig: gax.ClientConfig, configOverrides: gax.ClientConfig, headers: OutgoingHttpHeaders): any;
    /**
     * Creates a gRPC stub with current gRPC and auth.
     * @param {function***REMOVED*** CreateStub - The constructor function of the stub.
     * @param {Object***REMOVED*** options - The optional arguments to customize
     *   gRPC connection. This options will be passed to the constructor of
     *   gRPC client too.
     * @param {string***REMOVED*** options.servicePath - The name of the server of the service.
     * @param {number***REMOVED*** options.port - The port of the service.
     * @param {grpcTypes.ClientCredentials=***REMOVED*** options.sslCreds - The credentials to be used
     *   to set up gRPC connection.
     * @return {Promise***REMOVED*** A promise which resolves to a gRPC stub instance.
     */
    createStub(CreateStub: typeof ClientStub, options: ClientStubOptions): Promise<ClientStub>;
    /**
     * Creates a 'bytelength' function for a given proto message class.
     *
     * See {@link BundleDescriptor***REMOVED*** about the meaning of the return value.
     *
     * @param {function***REMOVED*** message - a constructor function that is generated by
     *   protobuf.js. Assumes 'encoder' field in the message.
     * @return {function(Object):number***REMOVED*** - a function to compute the byte length
     *   for an object.
     */
    static createByteLengthFunction(message: {
        encode: (obj: {***REMOVED***) => {
            finish: () => Array<{***REMOVED***>;
      ***REMOVED***
  ***REMOVED***): (obj: {***REMOVED***) => number;
***REMOVED***
export declare class GoogleProtoFilesRoot extends protobuf.Root {
    constructor(...args: Array<{***REMOVED***>);
    resolvePath(originPath: string, includePath: string): string;
    static _findIncludePath(originPath: string, includePath: string): string;
***REMOVED***
