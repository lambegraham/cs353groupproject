import { APICallback, GRPCCallResult, SimpleCallbackFunction ***REMOVED*** from '../apitypes';
export interface SubResponseInfo {
    field: string;
    start?: number;
    end?: number;
***REMOVED***
export interface TaskElement {
***REMOVED***
export interface TaskData {
    elements: TaskElement[];
    bytes: number;
    callback: TaskCallback;
    cancelled?: boolean;
***REMOVED***
export interface TaskCallback extends APICallback {
    id?: string;
***REMOVED***
/**
 * Creates a deep copy of the object with the consideration of subresponse
 * fields for bundling.
 *
 * @param {Object***REMOVED*** obj - The source object.
 * @param {Object?***REMOVED*** subresponseInfo - The information to copy the subset of
 *   the field for the response. Do nothing if it's null.
 * @param {String***REMOVED*** subresponseInfo.field - The field name.
 * @param {number***REMOVED*** subresponseInfo.start - The offset where the copying
 *   element should starts with.
 * @param {number***REMOVED*** subresponseInfo.end - The ending index where the copying
 *   region of the elements ends.
 * @return {Object***REMOVED*** The copied object.
 * @private
 */
export declare function deepCopyForResponse(obj: any, subresponseInfo: SubResponseInfo | null): any;
export declare class Task {
    _apiCall: SimpleCallbackFunction;
    _request: {
        [index: string]: TaskElement[];
  ***REMOVED***
    _bundledField: string;
    _subresponseField?: string | null;
    _data: TaskData[];
    callCanceller?: GRPCCallResult;
    /**
     * A task coordinates the execution of a single bundle.
     *
     * @param {function***REMOVED*** apiCall - The function to conduct calling API.
     * @param {Object***REMOVED*** bundlingRequest - The base request object to be used
     *   for the actual API call.
     * @param {string***REMOVED*** bundledField - The name of the field in bundlingRequest
     *   to be bundled.
     * @param {string=***REMOVED*** subresponseField - The name of the field in the response
     *   to be passed to the callback.
     * @constructor
     * @private
     */
    constructor(apiCall: SimpleCallbackFunction, bundlingRequest: {***REMOVED***, bundledField: string, subresponseField?: string | null);
    /**
     * Returns the number of elements in a task.
     * @return {number***REMOVED*** The number of elements.
     */
    getElementCount(): number;
    /**
     * Returns the total byte size of the elements in a task.
     * @return {number***REMOVED*** The byte size.
     */
    getRequestByteSize(): number;
    /**
     * Invokes the actual API call with current elements.
     * @return {string[]***REMOVED*** - the list of ids for invocations to be run.
     */
    run(): string[];
    /**
     * Appends the list of elements into the task.
     * @param {Object[]***REMOVED*** elements - the new list of elements.
     * @param {number***REMOVED*** bytes - the byte size required to encode elements in the API.
     * @param {APICallback***REMOVED*** callback - the callback of the method call.
     */
    extend(elements: TaskElement[], bytes: number, callback: TaskCallback): void;
    /**
     * Cancels a part of elements.
     * @param {string***REMOVED*** id - The identifier of the part of elements.
     * @return {boolean***REMOVED*** Whether the entire task will be canceled or not.
     */
    cancel(id: string): boolean;
***REMOVED***
