/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FirebaseApp ***REMOVED*** from '@firebase/app-types';
import { Repo ***REMOVED*** from './Repo';
import './Repo_transaction';
import { Database ***REMOVED*** from '../api/Database';
import { RepoInfo ***REMOVED*** from './RepoInfo';
/**
 * Creates and caches Repo instances.
 */
export declare class RepoManager {
    /**
     * @private {!Object.<string, Object<string, !fb.core.Repo>>***REMOVED***
     */
    private repos_;
    /**
     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
     * @private {boolean***REMOVED***
     */
    private useRestClient_;
    static getInstance(): RepoManager;
    interrupt(): void;
    resume(): void;
    /**
     * This function should only ever be called to CREATE a new database instance.
     *
     * @param {!FirebaseApp***REMOVED*** app
     * @return {!Database***REMOVED***
     */
    databaseFromApp(app: FirebaseApp, url?: string): Database;
    /**
     * Remove the repo and make sure it is disconnected.
     *
     * @param {!Repo***REMOVED*** repo
     */
    deleteRepo(repo: Repo): void;
    /**
     * Ensures a repo doesn't already exist and then creates one using the
     * provided app.
     *
     * @param {!RepoInfo***REMOVED*** repoInfo The metadata about the Repo
     * @param {!FirebaseApp***REMOVED*** app
     * @return {!Repo***REMOVED*** The Repo object for the specified server / repoName.
     */
    createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo;
    /**
     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
     * @param {boolean***REMOVED*** forceRestClient
     */
    forceRestClient(forceRestClient: boolean): void;
***REMOVED***
