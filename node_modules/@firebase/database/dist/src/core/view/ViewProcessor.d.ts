/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Operation ***REMOVED*** from '../operation/Operation';
import { ChildChangeAccumulator ***REMOVED*** from './ChildChangeAccumulator';
import { Change ***REMOVED*** from './Change';
import { Path ***REMOVED*** from '../util/Path';
import { ViewCache ***REMOVED*** from './ViewCache';
import { NodeFilter ***REMOVED*** from './filter/NodeFilter';
import { WriteTreeRef ***REMOVED*** from '../WriteTree';
import { Node ***REMOVED*** from '../snap/Node';
/**
 * @constructor
 * @struct
 */
export declare class ProcessorResult {
    readonly viewCache: ViewCache;
    readonly changes: Change[];
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {!Array.<!Change>***REMOVED*** changes
     */
    constructor(viewCache: ViewCache, changes: Change[]);
***REMOVED***
/**
 * @constructor
 */
export declare class ViewProcessor {
    private readonly filter_;
    /**
     * @param {!NodeFilter***REMOVED*** filter_
     */
    constructor(filter_: NodeFilter);
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     */
    assertIndexed(viewCache: ViewCache): void;
    /**
     * @param {!ViewCache***REMOVED*** oldViewCache
     * @param {!Operation***REMOVED*** operation
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {?Node***REMOVED*** completeCache
     * @return {!ProcessorResult***REMOVED***
     */
    applyOperation(oldViewCache: ViewCache, operation: Operation, writesCache: WriteTreeRef, completeCache: Node | null): ProcessorResult;
    /**
     * @param {!ViewCache***REMOVED*** oldViewCache
     * @param {!ViewCache***REMOVED*** newViewCache
     * @param {!Array.<!Change>***REMOVED*** accumulator
     * @private
     */
    private static maybeAddValueEvent_;
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {!Path***REMOVED*** changePath
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {!CompleteChildSource***REMOVED*** source
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    private generateEventCacheAfterServerEvent_;
    /**
     * @param {!ViewCache***REMOVED*** oldViewCache
     * @param {!Path***REMOVED*** changePath
     * @param {!Node***REMOVED*** changedSnap
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {?Node***REMOVED*** completeCache
     * @param {boolean***REMOVED*** filterServerNode
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    applyServerOverwrite_(oldViewCache: ViewCache, changePath: Path, changedSnap: Node, writesCache: WriteTreeRef, completeCache: Node | null, filterServerNode: boolean, accumulator: ChildChangeAccumulator): ViewCache;
    /**
     * @param {!ViewCache***REMOVED*** oldViewCache
     * @param {!Path***REMOVED*** changePath
     * @param {!Node***REMOVED*** changedSnap
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {?Node***REMOVED*** completeCache
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    applyUserOverwrite_(oldViewCache: ViewCache, changePath: Path, changedSnap: Node, writesCache: WriteTreeRef, completeCache: Node | null, accumulator: ChildChangeAccumulator): ViewCache;
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {string***REMOVED*** childKey
     * @return {boolean***REMOVED***
     * @private
     */
    private static cacheHasChild_;
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {!Path***REMOVED*** path
     * @param {ImmutableTree.<!Node>***REMOVED*** changedChildren
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {?Node***REMOVED*** serverCache
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    private applyUserMerge_;
    /**
     * @param {!Node***REMOVED*** node
     * @param {ImmutableTree.<!Node>***REMOVED*** merge
     * @return {!Node***REMOVED***
     * @private
     */
    private applyMerge_;
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {!Path***REMOVED*** path
     * @param {!ImmutableTree.<!Node>***REMOVED*** changedChildren
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {?Node***REMOVED*** serverCache
     * @param {boolean***REMOVED*** filterServerNode
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    private applyServerMerge_;
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {!Path***REMOVED*** ackPath
     * @param {!ImmutableTree<!boolean>***REMOVED*** affectedTree
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {?Node***REMOVED*** completeCache
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    private ackUserWrite_;
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {!Path***REMOVED*** path
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    private listenComplete_;
    /**
     * @param {!ViewCache***REMOVED*** viewCache
     * @param {!Path***REMOVED*** path
     * @param {!WriteTreeRef***REMOVED*** writesCache
     * @param {?Node***REMOVED*** completeServerCache
     * @param {!ChildChangeAccumulator***REMOVED*** accumulator
     * @return {!ViewCache***REMOVED***
     * @private
     */
    private revertUserWrite_;
***REMOVED***
