/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CacheNode ***REMOVED*** from './CacheNode';
import { Node ***REMOVED*** from '../snap/Node';
/**
 * Stores the data we have cached for a view.
 *
 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
 *
 * @constructor
 */
export declare class ViewCache {
    private readonly eventCache_;
    private readonly serverCache_;
    /**
     *
     * @param {!CacheNode***REMOVED*** eventCache_
     * @param {!CacheNode***REMOVED*** serverCache_
     */
    constructor(eventCache_: CacheNode, serverCache_: CacheNode);
    /**
     * @const
     * @type {ViewCache***REMOVED***
     */
    static Empty: ViewCache;
    /**
     * @param {!Node***REMOVED*** eventSnap
     * @param {boolean***REMOVED*** complete
     * @param {boolean***REMOVED*** filtered
     * @return {!ViewCache***REMOVED***
     */
    updateEventSnap(eventSnap: Node, complete: boolean, filtered: boolean): ViewCache;
    /**
     * @param {!Node***REMOVED*** serverSnap
     * @param {boolean***REMOVED*** complete
     * @param {boolean***REMOVED*** filtered
     * @return {!ViewCache***REMOVED***
     */
    updateServerSnap(serverSnap: Node, complete: boolean, filtered: boolean): ViewCache;
    /**
     * @return {!CacheNode***REMOVED***
     */
    getEventCache(): CacheNode;
    /**
     * @return {?Node***REMOVED***
     */
    getCompleteEventSnap(): Node | null;
    /**
     * @return {!CacheNode***REMOVED***
     */
    getServerCache(): CacheNode;
    /**
     * @return {?Node***REMOVED***
     */
    getCompleteServerSnap(): Node | null;
***REMOVED***
