/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SparseSnapshotTree ***REMOVED*** from '../SparseSnapshotTree';
import { Node ***REMOVED*** from '../snap/Node';
/**
 * Generate placeholders for deferred values.
 * @param {?Object***REMOVED*** values
 * @return {!Object***REMOVED***
 */
export declare const generateWithValues: (values: {
    [k: string]: any;
***REMOVED***) => {
    [k: string]: any;
***REMOVED***;
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 * @param {(Object|string|number|boolean)***REMOVED*** value
 * @param {!Object***REMOVED*** serverValues
 * @return {!(string|number|boolean)***REMOVED***
 */
export declare const resolveDeferredValue: (value: string | number | boolean | {
    [k: string]: any;
***REMOVED***, serverValues: {
    [k: string]: any;
***REMOVED***) => string | number | boolean;
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param {!SparseSnapshotTree***REMOVED*** tree
 * @param {!Object***REMOVED*** serverValues
 * @return {!SparseSnapshotTree***REMOVED***
 */
export declare const resolveDeferredValueTree: (tree: SparseSnapshotTree, serverValues: Object) => SparseSnapshotTree;
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 * @param {!Node***REMOVED*** node
 * @param {!Object***REMOVED*** serverValues
 * @return {!Node***REMOVED***
 */
export declare const resolveDeferredValueSnapshot: (node: Node, serverValues: Object) => Node;
