import { ErrorFactory, deepCopy, deepExtend, contains ***REMOVED*** from '@firebase/util';
import { Logger ***REMOVED*** from '@firebase/logger';

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERRORS = {
    ["no-app" /* NO_APP */]: "No Firebase App '{$appName***REMOVED***' has been created - " +
        'call Firebase App.initializeApp()',
    ["bad-app-name" /* BAD_APP_NAME */]: "Illegal App name: '{$appName***REMOVED***",
    ["duplicate-app" /* DUPLICATE_APP */]: "Firebase App named '{$appName***REMOVED***' already exists",
    ["app-deleted" /* APP_DELETED */]: "Firebase App named '{$appName***REMOVED***' already deleted",
    ["invalid-app-argument" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName***REMOVED***() takes either no argument or a ' +
        'Firebase App instance.'
***REMOVED***;
const ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_ENTRY_NAME = '[DEFAULT]';

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */
class FirebaseAppLiteImpl {
    constructor(options, config, firebase_) {
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.services_ = {***REMOVED***;
        // lite version has an empty INTERNAL namespace
        this.INTERNAL = {***REMOVED***;
        this.name_ = config.name;
        this.automaticDataCollectionEnabled_ =
            config.automaticDataCollectionEnabled || false;
        this.options_ = deepCopy(options);
  ***REMOVED***
    get automaticDataCollectionEnabled() {
        this.checkDestroyed_();
        return this.automaticDataCollectionEnabled_;
  ***REMOVED***
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed_();
        this.automaticDataCollectionEnabled_ = val;
  ***REMOVED***
    get name() {
        this.checkDestroyed_();
        return this.name_;
  ***REMOVED***
    get options() {
        this.checkDestroyed_();
        return this.options_;
  ***REMOVED***
    delete() {
        return new Promise(resolve => {
            this.checkDestroyed_();
            resolve();
      ***REMOVED***)
            .then(() => {
            this.firebase_.INTERNAL.removeApp(this.name_);
            const services = [];
            for (const serviceKey of Object.keys(this.services_)) {
                for (const instanceKey of Object.keys(this.services_[serviceKey])) {
                    services.push(this.services_[serviceKey][instanceKey]);
              ***REMOVED***
          ***REMOVED***
            return Promise.all(services
                .filter(service => 'INTERNAL' in service)
                .map(service => service.INTERNAL.delete()));
      ***REMOVED***)
            .then(() => {
            this.isDeleted_ = true;
            this.services_ = {***REMOVED***;
      ***REMOVED***);
  ***REMOVED***
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage is the only one that is leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */
    _getService(name, instanceIdentifier = DEFAULT_ENTRY_NAME) {
        this.checkDestroyed_();
        if (!this.services_[name]) {
            this.services_[name] = {***REMOVED***;
      ***REMOVED***
        if (!this.services_[name][instanceIdentifier]) {
            /**
             * If a custom instance has been defined (i.e. not '[DEFAULT]')
             * then we will pass that instance on, otherwise we pass `null`
             */
            const instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME
                ? instanceIdentifier
                : undefined;
            const service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
            this.services_[name][instanceIdentifier] = service;
      ***REMOVED***
        return this.services_[name][instanceIdentifier];
  ***REMOVED***
    /**
     * Callback function used to extend an App instance at the time
     * of service instance creation.
     */
    extendApp(props) {
        // Copy the object onto the FirebaseAppImpl prototype
        deepExtend(this, props);
  ***REMOVED***
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    checkDestroyed_() {
        if (this.isDeleted_) {
            throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ ***REMOVED***);
      ***REMOVED***
  ***REMOVED***
***REMOVED***

const version = "7.2.1";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logger = new Logger('@firebase/app');

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */
function createFirebaseNamespaceCore(firebaseAppImpl) {
    const apps = {***REMOVED***;
    const factories = {***REMOVED***;
    const appHooks = {***REMOVED***;
    // A namespace is a plain JavaScript Object.
    const namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        // @ts-ignore
        __esModule: true,
        initializeApp,
        // @ts-ignore
        app,
        // @ts-ignore
        apps: null,
        SDK_VERSION: version,
        INTERNAL: {
            registerService,
            removeApp,
            factories,
            useAsService
      ***REMOVED***
  ***REMOVED***
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace['default'] = namespace;
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
  ***REMOVED***);
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */
    function removeApp(name) {
        const app = apps[name];
        callAppHooks(app, 'delete');
        delete apps[name];
  ***REMOVED***
    /**
     * Get the App object for a given name (or DEFAULT).
     */
    function app(name) {
        name = name || DEFAULT_ENTRY_NAME;
        if (!contains(apps, name)) {
            throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name ***REMOVED***);
      ***REMOVED***
        return apps[name];
  ***REMOVED***
    // @ts-ignore
    app['App'] = firebaseAppImpl;
    function initializeApp(options, rawConfig = {***REMOVED***) {
        if (typeof rawConfig !== 'object' || rawConfig === null) {
            const name = rawConfig;
            rawConfig = { name ***REMOVED***;
      ***REMOVED***
        const config = rawConfig;
        if (config.name === undefined) {
            config.name = DEFAULT_ENTRY_NAME;
      ***REMOVED***
        const { name ***REMOVED*** = config;
        if (typeof name !== 'string' || !name) {
            throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                appName: String(name)
          ***REMOVED***);
      ***REMOVED***
        if (contains(apps, name)) {
            throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name ***REMOVED***);
      ***REMOVED***
        const app = new firebaseAppImpl(options, config, namespace);
        apps[name] = app;
        callAppHooks(app, 'create');
        return app;
  ***REMOVED***
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */
    function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps).map(name => apps[name]);
  ***REMOVED***
    /*
     * Register a Firebase Service.
     *
     * firebase.INTERNAL.registerService()
     *
     * TODO: Implement serviceProperties.
     */
    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances = false) {
        // If re-registering a service that already exists, return existing service
        if (factories[name]) {
            logger.debug(`There were multiple attempts to register service ${name***REMOVED***.`);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return namespace[name];
      ***REMOVED***
        // Capture the service factory for later service instantiation
        factories[name] = createService;
        // Capture the appHook, if passed
        if (appHook) {
            appHooks[name] = appHook;
            // Run the **new** app hook on all existing apps
            getApps().forEach(app => {
                appHook('create', app);
          ***REMOVED***);
      ***REMOVED***
        // The Service namespace is an accessor function ...
        function serviceNamespace(appArg = app()) {
            // @ts-ignore
            if (typeof appArg[name] !== 'function') {
                // Invalid argument.
                // This happens in the following case: firebase.storage('gs:/')
                throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                    appName: name
              ***REMOVED***);
          ***REMOVED***
            // Forward service instance lookup to the FirebaseApp.
            // @ts-ignore
            return appArg[name]();
      ***REMOVED***
        // ... and a container for service-level properties.
        if (serviceProperties !== undefined) {
            deepExtend(serviceNamespace, serviceProperties);
      ***REMOVED***
        // Monkey-patch the serviceNamespace onto the firebase namespace
        // @ts-ignore
        namespace[name] = serviceNamespace;
        // Patch the FirebaseAppImpl prototype
        // @ts-ignore
        firebaseAppImpl.prototype[name] =
            // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
            // option added to the no-explicit-any rule when ESlint releases it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            function (...args) {
                const serviceFxn = this._getService.bind(this, name);
                return serviceFxn.apply(this, allowMultipleInstances ? args : []);
          ***REMOVED***
        return serviceNamespace;
  ***REMOVED***
    function callAppHooks(app, eventName) {
        for (const serviceName of Object.keys(factories)) {
            // Ignore virtual services
            const factoryName = useAsService(app, serviceName);
            if (factoryName === null) {
                return;
          ***REMOVED***
            if (appHooks[factoryName]) {
                appHooks[factoryName](eventName, app);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name) {
        if (name === 'serverAuth') {
            return null;
      ***REMOVED***
        const useService = name;
        return useService;
  ***REMOVED***
    return namespace;
***REMOVED***

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function createFirebaseNamespaceLite() {
    const namespace = createFirebaseNamespaceCore(FirebaseAppLiteImpl);
    namespace.SDK_VERSION = `${namespace.SDK_VERSION***REMOVED***_LITE`;
    const registerService = namespace.INTERNAL
        .registerService;
    namespace.INTERNAL.registerService = registerServiceForLite;
    /**
     * This is a special implementation, so it only works with performance.
     * only allow performance SDK to register.
     */
    function registerServiceForLite(name, createService, serviceProperties, appHook, allowMultipleInstances) {
        // only allow performance to register with firebase lite
        if (name !== 'performance' && name !== 'installations') {
            throw Error(`${name***REMOVED*** cannot register with the standalone perf instance`);
      ***REMOVED***
        return registerService(name, createService, serviceProperties, appHook, allowMultipleInstances);
  ***REMOVED***
    return namespace;
***REMOVED***

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const firebase = createFirebaseNamespaceLite();

export default firebase;
export { firebase ***REMOVED***;
//# sourceMappingURL=index.lite.esm2017.js.map
