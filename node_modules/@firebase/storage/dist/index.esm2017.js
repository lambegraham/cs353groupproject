import firebase from '@firebase/app';

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Constants used in the Firebase Storage library.
 */
/**
 * Domain name for firebase storage.
 */
const DEFAULT_HOST = 'firebasestorage.googleapis.com';
/**
 * The key in Firebase config json for the storage bucket.
 */
const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
/**
 * 2 minutes
 *
 * The timeout for all operations except upload.
 */
const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
/**
 * 10 minutes
 *
 * The timeout for upload.
 */
const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;
/**
 * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported
 * enough for us to use it directly.
 */
const MIN_SAFE_INTEGER = -9007199254740991;

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FirebaseStorageError {
    constructor(code, message) {
        this.code_ = prependCode(code);
        this.message_ = 'Firebase Storage: ' + message;
        this.serverResponse_ = null;
        this.name_ = 'FirebaseError';
  ***REMOVED***
    codeProp() {
        return this.code;
  ***REMOVED***
    codeEquals(code) {
        return prependCode(code) === this.codeProp();
  ***REMOVED***
    serverResponseProp() {
        return this.serverResponse_;
  ***REMOVED***
    setServerResponseProp(serverResponse) {
        this.serverResponse_ = serverResponse;
  ***REMOVED***
    get name() {
        return this.name_;
  ***REMOVED***
    get code() {
        return this.code_;
  ***REMOVED***
    get message() {
        return this.message_;
  ***REMOVED***
    get serverResponse() {
        return this.serverResponse_;
  ***REMOVED***
***REMOVED***
const Code = {
    // Shared between all platforms
    UNKNOWN: 'unknown',
    OBJECT_NOT_FOUND: 'object-not-found',
    BUCKET_NOT_FOUND: 'bucket-not-found',
    PROJECT_NOT_FOUND: 'project-not-found',
    QUOTA_EXCEEDED: 'quota-exceeded',
    UNAUTHENTICATED: 'unauthenticated',
    UNAUTHORIZED: 'unauthorized',
    RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
    INVALID_CHECKSUM: 'invalid-checksum',
    CANCELED: 'canceled',
    // JS specific
    INVALID_EVENT_NAME: 'invalid-event-name',
    INVALID_URL: 'invalid-url',
    INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
    NO_DEFAULT_BUCKET: 'no-default-bucket',
    CANNOT_SLICE_BLOB: 'cannot-slice-blob',
    SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
    NO_DOWNLOAD_URL: 'no-download-url',
    INVALID_ARGUMENT: 'invalid-argument',
    INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
    APP_DELETED: 'app-deleted',
    INVALID_ROOT_OPERATION: 'invalid-root-operation',
    INVALID_FORMAT: 'invalid-format',
    INTERNAL_ERROR: 'internal-error'
***REMOVED***;
function prependCode(code) {
    return 'storage/' + code;
***REMOVED***
function unknown() {
    const message = 'An unknown error occurred, please check the error payload for ' +
        'server response.';
    return new FirebaseStorageError(Code.UNKNOWN, message);
***REMOVED***
function objectNotFound(path) {
    return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
***REMOVED***
function quotaExceeded(bucket) {
    return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" +
        bucket +
        "' exceeded, please view quota on " +
        'https://firebase.google.com/pricing/.');
***REMOVED***
function unauthenticated() {
    const message = 'User is not authenticated, please authenticate using Firebase ' +
        'Authentication and try again.';
    return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
***REMOVED***
function unauthorized(path) {
    return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
***REMOVED***
function retryLimitExceeded() {
    return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
***REMOVED***
function canceled() {
    return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
***REMOVED***
function invalidUrl(url) {
    return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
***REMOVED***
function invalidDefaultBucket(bucket) {
    return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
***REMOVED***
function noDefaultBucket() {
    return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' +
        "found. Did you set the '" +
        CONFIG_STORAGE_BUCKET_KEY +
        "' property when initializing the app?");
***REMOVED***
function cannotSliceBlob() {
    return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
***REMOVED***
function serverFileWrongSize() {
    return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
***REMOVED***
function noDownloadURL() {
    return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
***REMOVED***
function invalidArgument(index, fnName, message) {
    return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
***REMOVED***
function invalidArgumentCount(argMin, argMax, fnName, real) {
    let countPart;
    let plural;
    if (argMin === argMax) {
        countPart = argMin;
        plural = argMin === 1 ? 'argument' : 'arguments';
  ***REMOVED***
    else {
        countPart = 'between ' + argMin + ' and ' + argMax;
        plural = 'arguments';
  ***REMOVED***
    return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' +
        fnName +
        '`: Expected ' +
        countPart +
        ' ' +
        plural +
        ', received ' +
        real +
        '.');
***REMOVED***
function appDeleted() {
    return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
***REMOVED***
/**
 * @param name The name of the operation that was invalid.
 */
function invalidRootOperation(name) {
    return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" +
        name +
        "' cannot be performed on a root reference, create a non-root " +
        "reference using child, such as .child('file.png').");
***REMOVED***
/**
 * @param format The format that was not valid.
 * @param message A message describing the format violation.
 */
function invalidFormat(format, message) {
    return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
***REMOVED***
/**
 * @param message A message describing the internal error.
 */
function internalError(message) {
    throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const StringFormat = {
    RAW: 'raw',
    BASE64: 'base64',
    BASE64URL: 'base64url',
    DATA_URL: 'data_url'
***REMOVED***;
function formatValidator(stringFormat) {
    switch (stringFormat) {
        case StringFormat.RAW:
        case StringFormat.BASE64:
        case StringFormat.BASE64URL:
        case StringFormat.DATA_URL:
            return;
        default:
            throw 'Expected one of the event types: [' +
                StringFormat.RAW +
                ', ' +
                StringFormat.BASE64 +
                ', ' +
                StringFormat.BASE64URL +
                ', ' +
                StringFormat.DATA_URL +
                '].';
  ***REMOVED***
***REMOVED***
/**
 * @struct
 */
class StringData {
    constructor(data, contentType) {
        this.data = data;
        this.contentType = contentType || null;
  ***REMOVED***
***REMOVED***
function dataFromString(format, stringData) {
    switch (format) {
        case StringFormat.RAW:
            return new StringData(utf8Bytes_(stringData));
        case StringFormat.BASE64:
        case StringFormat.BASE64URL:
            return new StringData(base64Bytes_(format, stringData));
        case StringFormat.DATA_URL:
            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
        default:
        // do nothing
  ***REMOVED***
    // assert(false);
    throw unknown();
***REMOVED***
function utf8Bytes_(value) {
    const b = [];
    for (let i = 0; i < value.length; i++) {
        let c = value.charCodeAt(i);
        if (c <= 127) {
            b.push(c);
      ***REMOVED***
        else {
            if (c <= 2047) {
                b.push(192 | (c >> 6), 128 | (c & 63));
          ***REMOVED***
            else {
                if ((c & 64512) === 55296) {
                    // The start of a surrogate pair.
                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                    if (!valid) {
                        // The second surrogate wasn't there.
                        b.push(239, 191, 189);
                  ***REMOVED***
                    else {
                        const hi = c;
                        const lo = value.charCodeAt(++i);
                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                  ***REMOVED***
              ***REMOVED***
                else {
                    if ((c & 64512) === 56320) {
                        // Invalid low surrogate.
                        b.push(239, 191, 189);
                  ***REMOVED***
                    else {
                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    return new Uint8Array(b);
***REMOVED***
function percentEncodedBytes_(value) {
    let decoded;
    try {
        decoded = decodeURIComponent(value);
  ***REMOVED***
    catch (e) {
        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
  ***REMOVED***
    return utf8Bytes_(decoded);
***REMOVED***
function base64Bytes_(format, value) {
    switch (format) {
        case StringFormat.BASE64: {
            const hasMinus = value.indexOf('-') !== -1;
            const hasUnder = value.indexOf('_') !== -1;
            if (hasMinus || hasUnder) {
                const invalidChar = hasMinus ? '-' : '_';
                throw invalidFormat(format, "Invalid character '" +
                    invalidChar +
                    "' found: is it base64url encoded?");
          ***REMOVED***
            break;
      ***REMOVED***
        case StringFormat.BASE64URL: {
            const hasPlus = value.indexOf('+') !== -1;
            const hasSlash = value.indexOf('/') !== -1;
            if (hasPlus || hasSlash) {
                const invalidChar = hasPlus ? '+' : '/';
                throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
          ***REMOVED***
            value = value.replace(/-/g, '+').replace(/_/g, '/');
            break;
      ***REMOVED***
        default:
        // do nothing
  ***REMOVED***
    let bytes;
    try {
        bytes = atob(value);
  ***REMOVED***
    catch (e) {
        throw invalidFormat(format, 'Invalid character found');
  ***REMOVED***
    const array = new Uint8Array(bytes.length);
    for (let i = 0; i < bytes.length; i++) {
        array[i] = bytes.charCodeAt(i);
  ***REMOVED***
    return array;
***REMOVED***
/**
 * @struct
 */
class DataURLParts {
    constructor(dataURL) {
        this.base64 = false;
        this.contentType = null;
        const matches = dataURL.match(/^data:([^,]+)?,/);
        if (matches === null) {
            throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
      ***REMOVED***
        const middle = matches[1] || null;
        if (middle != null) {
            this.base64 = endsWith(middle, ';base64');
            this.contentType = this.base64
                ? middle.substring(0, middle.length - ';base64'.length)
                : middle;
      ***REMOVED***
        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
  ***REMOVED***
***REMOVED***
function dataURLBytes_(dataUrl) {
    const parts = new DataURLParts(dataUrl);
    if (parts.base64) {
        return base64Bytes_(StringFormat.BASE64, parts.rest);
  ***REMOVED***
    else {
        return percentEncodedBytes_(parts.rest);
  ***REMOVED***
***REMOVED***
function dataURLContentType_(dataUrl) {
    const parts = new DataURLParts(dataUrl);
    return parts.contentType;
***REMOVED***
function endsWith(s, end) {
    const longEnough = s.length >= end.length;
    if (!longEnough) {
        return false;
  ***REMOVED***
    return s.substring(s.length - end.length) === end;
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const TaskEvent = {
    /** Triggered whenever the task changes or progress is updated. */
    STATE_CHANGED: 'state_changed'
***REMOVED***;
const InternalTaskState = {
    RUNNING: 'running',
    PAUSING: 'pausing',
    PAUSED: 'paused',
    SUCCESS: 'success',
    CANCELING: 'canceling',
    CANCELED: 'canceled',
    ERROR: 'error'
***REMOVED***;
const TaskState = {
    /** The task is currently transferring data. */
    RUNNING: 'running',
    /** The task was paused by the user. */
    PAUSED: 'paused',
    /** The task completed successfully. */
    SUCCESS: 'success',
    /** The task was canceled. */
    CANCELED: 'canceled',
    /** The task failed with an error. */
    ERROR: 'error'
***REMOVED***;
function taskStateFromInternalTaskState(state) {
    switch (state) {
        case InternalTaskState.RUNNING:
        case InternalTaskState.PAUSING:
        case InternalTaskState.CANCELING:
            return TaskState.RUNNING;
        case InternalTaskState.PAUSED:
            return TaskState.PAUSED;
        case InternalTaskState.SUCCESS:
            return TaskState.SUCCESS;
        case InternalTaskState.CANCELED:
            return TaskState.CANCELED;
        case InternalTaskState.ERROR:
            return TaskState.ERROR;
        default:
            // TODO(andysoto): assert(false);
            return TaskState.ERROR;
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @return False if the object is undefined or null, true otherwise.
 */
function isDef(p) {
    return p != null;
***REMOVED***
function isJustDef(p) {
    return p !== void 0;
***REMOVED***
function isFunction(p) {
    return typeof p === 'function';
***REMOVED***
function isObject(p) {
    return typeof p === 'object';
***REMOVED***
function isNonNullObject(p) {
    return isObject(p) && p !== null;
***REMOVED***
function isNonArrayObject(p) {
    return isObject(p) && !Array.isArray(p);
***REMOVED***
function isString(p) {
    return typeof p === 'string' || p instanceof String;
***REMOVED***
function isInteger(p) {
    return isNumber(p) && Number.isInteger(p);
***REMOVED***
function isNumber(p) {
    return typeof p === 'number' || p instanceof Number;
***REMOVED***
function isNativeBlob(p) {
    return isNativeBlobDefined() && p instanceof Blob;
***REMOVED***
function isNativeBlobDefined() {
    return typeof Blob !== 'undefined';
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @enum{number***REMOVED***
 */
var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
    ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
    ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
***REMOVED***)(ErrorCode || (ErrorCode = {***REMOVED***));

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
 * doesn't work in React Native on Android.
 */
class NetworkXhrIo {
  ***REMOVED***
        this.sent_ = false;
        this.xhr_ = new XMLHttpRequest();
        this.errorCode_ = ErrorCode.NO_ERROR;
        this.sendPromise_ = new Promise(resolve => {
            this.xhr_.addEventListener('abort', () => {
                this.errorCode_ = ErrorCode.ABORT;
                resolve(this);
          ***REMOVED***);
            this.xhr_.addEventListener('error', () => {
                this.errorCode_ = ErrorCode.NETWORK_ERROR;
                resolve(this);
          ***REMOVED***);
            this.xhr_.addEventListener('load', () => {
                resolve(this);
          ***REMOVED***);
      ***REMOVED***);
  ***REMOVED***
    /**
     * @override
     */
    send(url, method, body, headers) {
        if (this.sent_) {
            throw internalError('cannot .send() more than once');
      ***REMOVED***
        this.sent_ = true;
        this.xhr_.open(method, url, true);
        if (isDef(headers)) {
            for (const key in headers) {
                if (headers.hasOwnProperty(key)) {
                    this.xhr_.setRequestHeader(key, headers[key].toString());
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
        if (isDef(body)) {
            this.xhr_.send(body);
      ***REMOVED***
        else {
            this.xhr_.send();
      ***REMOVED***
        return this.sendPromise_;
  ***REMOVED***
    /**
     * @override
     */
    getErrorCode() {
        if (!this.sent_) {
            throw internalError('cannot .getErrorCode() before sending');
      ***REMOVED***
        return this.errorCode_;
  ***REMOVED***
    /**
     * @override
     */
    getStatus() {
        if (!this.sent_) {
            throw internalError('cannot .getStatus() before sending');
      ***REMOVED***
        try {
            return this.xhr_.status;
      ***REMOVED***
        catch (e) {
            return -1;
      ***REMOVED***
  ***REMOVED***
    /**
     * @override
     */
    getResponseText() {
        if (!this.sent_) {
            throw internalError('cannot .getResponseText() before sending');
      ***REMOVED***
        return this.xhr_.responseText;
  ***REMOVED***
    /**
     * Aborts the request.
     * @override
     */
    abort() {
        this.xhr_.abort();
  ***REMOVED***
    /**
     * @override
     */
    getResponseHeader(header) {
        return this.xhr_.getResponseHeader(header);
  ***REMOVED***
    /**
     * @override
     */
    addUploadProgressListener(listener) {
        if (isDef(this.xhr_.upload)) {
            this.xhr_.upload.addEventListener('progress', listener);
      ***REMOVED***
  ***REMOVED***
    /**
     * @override
     */
    removeUploadProgressListener(listener) {
        if (isDef(this.xhr_.upload)) {
            this.xhr_.upload.removeEventListener('progress', listener);
      ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Factory-like class for creating XhrIo instances.
 */
class XhrIoPool {
    createXhrIo() {
        return new NetworkXhrIo();
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getBlobBuilder() {
    if (typeof BlobBuilder !== 'undefined') {
        return BlobBuilder;
  ***REMOVED***
    else if (typeof WebKitBlobBuilder !== 'undefined') {
        return WebKitBlobBuilder;
  ***REMOVED***
    else {
        return undefined;
  ***REMOVED***
***REMOVED***
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param args The values that will make up the resulting blob.
 * @return The blob.
 */
function getBlob(...args) {
    const BlobBuilder = getBlobBuilder();
    if (BlobBuilder !== undefined) {
        const bb = new BlobBuilder();
        for (let i = 0; i < args.length; i++) {
            bb.append(args[i]);
      ***REMOVED***
        return bb.getBlob();
  ***REMOVED***
    else {
        if (isNativeBlobDefined()) {
            return new Blob(args);
      ***REMOVED***
        else {
            throw Error("This browser doesn't seem to support creating Blobs");
      ***REMOVED***
  ***REMOVED***
***REMOVED***
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */
function sliceBlob(blob, start, end) {
    if (blob.webkitSlice) {
        return blob.webkitSlice(start, end);
  ***REMOVED***
    else if (blob.mozSlice) {
        return blob.mozSlice(start, end);
  ***REMOVED***
    else if (blob.slice) {
        return blob.slice(start, end);
  ***REMOVED***
    return null;
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param opt_elideCopy If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 */
class FbsBlob {
    constructor(data, elideCopy) {
        let size = 0;
        let blobType = '';
        if (isNativeBlob(data)) {
            this.data_ = data;
            size = data.size;
            blobType = data.type;
      ***REMOVED***
        else if (data instanceof ArrayBuffer) {
            if (elideCopy) {
                this.data_ = new Uint8Array(data);
          ***REMOVED***
            else {
                this.data_ = new Uint8Array(data.byteLength);
                this.data_.set(new Uint8Array(data));
          ***REMOVED***
            size = this.data_.length;
      ***REMOVED***
        else if (data instanceof Uint8Array) {
            if (elideCopy) {
                this.data_ = data;
          ***REMOVED***
            else {
                this.data_ = new Uint8Array(data.length);
                this.data_.set(data);
          ***REMOVED***
            size = data.length;
      ***REMOVED***
        this.size_ = size;
        this.type_ = blobType;
  ***REMOVED***
    size() {
        return this.size_;
  ***REMOVED***
    type() {
        return this.type_;
  ***REMOVED***
    slice(startByte, endByte) {
        if (isNativeBlob(this.data_)) {
            const realBlob = this.data_;
            const sliced = sliceBlob(realBlob, startByte, endByte);
            if (sliced === null) {
                return null;
          ***REMOVED***
            return new FbsBlob(sliced);
      ***REMOVED***
        else {
            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
            return new FbsBlob(slice, true);
      ***REMOVED***
  ***REMOVED***
    static getBlob(...args) {
        if (isNativeBlobDefined()) {
            const blobby = args.map((val) => {
                if (val instanceof FbsBlob) {
                    return val.data_;
              ***REMOVED***
                else {
                    return val;
              ***REMOVED***
          ***REMOVED***);
            return new FbsBlob(getBlob.apply(null, blobby));
      ***REMOVED***
        else {
            const uint8Arrays = args.map((val) => {
                if (isString(val)) {
                    return dataFromString(StringFormat.RAW, val).data;
              ***REMOVED***
                else {
                    // Blobs don't exist, so this has to be a Uint8Array.
                    return val.data_;
              ***REMOVED***
          ***REMOVED***);
            let finalLength = 0;
            uint8Arrays.forEach((array) => {
                finalLength += array.byteLength;
          ***REMOVED***);
            const merged = new Uint8Array(finalLength);
            let index = 0;
            uint8Arrays.forEach((array) => {
                for (let i = 0; i < array.length; i++) {
                    merged[index++] = array[i];
              ***REMOVED***
          ***REMOVED***);
            return new FbsBlob(merged, true);
      ***REMOVED***
  ***REMOVED***
    uploadData() {
        return this.data_;
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @struct
 */
class Location {
    constructor(bucket, path) {
        this.bucket = bucket;
        this.path_ = path;
  ***REMOVED***
    get path() {
        return this.path_;
  ***REMOVED***
    get isRoot() {
        return this.path.length === 0;
  ***REMOVED***
    fullServerUrl() {
        const encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
  ***REMOVED***
    bucketOnlyServerUrl() {
        const encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o';
  ***REMOVED***
    static makeFromBucketSpec(bucketString) {
        let bucketLocation;
        try {
            bucketLocation = Location.makeFromUrl(bucketString);
      ***REMOVED***
        catch (e) {
            // Not valid URL, use as-is. This lets you put bare bucket names in
            // config.
            return new Location(bucketString, '');
      ***REMOVED***
        if (bucketLocation.path === '') {
            return bucketLocation;
      ***REMOVED***
        else {
            throw invalidDefaultBucket(bucketString);
      ***REMOVED***
  ***REMOVED***
    static makeFromUrl(url) {
        let location = null;
        const bucketDomain = '([A-Za-z0-9.\\-_]+)';
        function gsModify(loc) {
            if (loc.path.charAt(loc.path.length - 1) === '/') {
                loc.path_ = loc.path_.slice(0, -1);
          ***REMOVED***
      ***REMOVED***
        const gsPath = '(/(.*))?$';
        const path = '(/([^?#]*).*)?$';
        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
        const gsIndices = { bucket: 1, path: 3 ***REMOVED***;
        function httpModify(loc) {
            loc.path_ = decodeURIComponent(loc.path);
      ***REMOVED***
        const version = 'v[A-Za-z0-9_]+';
        const hostRegex = DEFAULT_HOST.replace(/[.]/g, '\\.');
        const httpRegex = new RegExp(`^https?://${hostRegex***REMOVED***/${version***REMOVED***/b/${bucketDomain***REMOVED***/o${path***REMOVED***`, 'i');
        const httpIndices = { bucket: 1, path: 3 ***REMOVED***;
        const groups = [
            { regex: gsRegex, indices: gsIndices, postModify: gsModify ***REMOVED***,
            { regex: httpRegex, indices: httpIndices, postModify: httpModify ***REMOVED***
        ];
        for (let i = 0; i < groups.length; i++) {
            const group = groups[i];
            const captures = group.regex.exec(url);
            if (captures) {
                const bucketValue = captures[group.indices.bucket];
                let pathValue = captures[group.indices.path];
                if (!pathValue) {
                    pathValue = '';
              ***REMOVED***
                location = new Location(bucketValue, pathValue);
                group.postModify(location);
                break;
          ***REMOVED***
      ***REMOVED***
        if (location == null) {
            throw invalidUrl(url);
      ***REMOVED***
        return location;
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */
function jsonObjectOrNull(s) {
    let obj;
    try {
        obj = JSON.parse(s);
  ***REMOVED***
    catch (e) {
        return null;
  ***REMOVED***
    if (isNonArrayObject(obj)) {
        return obj;
  ***REMOVED***
    else {
        return null;
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Contains helper methods for manipulating paths.
 */
/**
 * @return Null if the path is already at the root.
 */
function parent(path) {
    if (path.length === 0) {
        return null;
  ***REMOVED***
    const index = path.lastIndexOf('/');
    if (index === -1) {
        return '';
  ***REMOVED***
    const newPath = path.slice(0, index);
    return newPath;
***REMOVED***
function child(path, childPath) {
    const canonicalChildPath = childPath
        .split('/')
        .filter(component => component.length > 0)
        .join('/');
    if (path.length === 0) {
        return canonicalChildPath;
  ***REMOVED***
    else {
        return path + '/' + canonicalChildPath;
  ***REMOVED***
***REMOVED***
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */
function lastComponent(path) {
    const index = path.lastIndexOf('/', path.length - 2);
    if (index === -1) {
        return path;
  ***REMOVED***
    else {
        return path.slice(index + 1);
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function makeUrl(urlPart) {
    return `https://${DEFAULT_HOST***REMOVED***/v0${urlPart***REMOVED***`;
***REMOVED***
function makeQueryString(params) {
    const encode = encodeURIComponent;
    let queryPart = '?';
    for (const key in params) {
        if (params.hasOwnProperty(key)) {
            // @ts-ignore TODO: remove once typescript is upgraded to 3.5.x
            const nextPart = encode(key) + '=' + encode(params[key]);
            queryPart = queryPart + nextPart + '&';
      ***REMOVED***
  ***REMOVED***
    // Chop off the extra '&' or '?' on the end
    queryPart = queryPart.slice(0, -1);
    return queryPart;
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function noXform_(metadata, value) {
    return value;
***REMOVED***
/**
 * @struct
 */
class Mapping {
    constructor(server, local, writable, xform) {
        this.server = server;
        this.local = local || server;
        this.writable = !!writable;
        this.xform = xform || noXform_;
  ***REMOVED***
***REMOVED***
let mappings_ = null;
function xformPath(fullPath) {
    if (!isString(fullPath) || fullPath.length < 2) {
        return fullPath;
  ***REMOVED***
    else {
        return lastComponent(fullPath);
  ***REMOVED***
***REMOVED***
function getMappings() {
    if (mappings_) {
        return mappings_;
  ***REMOVED***
    const mappings = [];
    mappings.push(new Mapping('bucket'));
    mappings.push(new Mapping('generation'));
    mappings.push(new Mapping('metageneration'));
    mappings.push(new Mapping('name', 'fullPath', true));
    function mappingsXformPath(_metadata, fullPath) {
        return xformPath(fullPath);
  ***REMOVED***
    const nameMapping = new Mapping('name');
    nameMapping.xform = mappingsXformPath;
    mappings.push(nameMapping);
    /**
     * Coerces the second param to a number, if it is defined.
     */
    function xformSize(_metadata, size) {
        if (isDef(size)) {
            return Number(size);
      ***REMOVED***
        else {
            return size;
      ***REMOVED***
  ***REMOVED***
    const sizeMapping = new Mapping('size');
    sizeMapping.xform = xformSize;
    mappings.push(sizeMapping);
    mappings.push(new Mapping('timeCreated'));
    mappings.push(new Mapping('updated'));
    mappings.push(new Mapping('md5Hash', null, true));
    mappings.push(new Mapping('cacheControl', null, true));
    mappings.push(new Mapping('contentDisposition', null, true));
    mappings.push(new Mapping('contentEncoding', null, true));
    mappings.push(new Mapping('contentLanguage', null, true));
    mappings.push(new Mapping('contentType', null, true));
    mappings.push(new Mapping('metadata', 'customMetadata', true));
    mappings_ = mappings;
    return mappings_;
***REMOVED***
function addRef(metadata, authWrapper) {
    function generateRef() {
        const bucket = metadata['bucket'];
        const path = metadata['fullPath'];
        const loc = new Location(bucket, path);
        return authWrapper.makeStorageReference(loc);
  ***REMOVED***
    Object.defineProperty(metadata, 'ref', { get: generateRef ***REMOVED***);
***REMOVED***
function fromResource(authWrapper, resource, mappings) {
    const metadata = {***REMOVED***;
    metadata['type'] = 'file';
    const len = mappings.length;
    for (let i = 0; i < len; i++) {
        const mapping = mappings[i];
        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
  ***REMOVED***
    addRef(metadata, authWrapper);
    return metadata;
***REMOVED***
function fromResourceString(authWrapper, resourceString, mappings) {
    const obj = jsonObjectOrNull(resourceString);
    if (obj === null) {
        return null;
  ***REMOVED***
    const resource = obj;
    return fromResource(authWrapper, resource, mappings);
***REMOVED***
function downloadUrlFromResourceString(metadata, resourceString) {
    const obj = jsonObjectOrNull(resourceString);
    if (obj === null) {
        return null;
  ***REMOVED***
    if (!isString(obj['downloadTokens'])) {
        // This can happen if objects are uploaded through GCS and retrieved
        // through list, so we don't want to throw an Error.
        return null;
  ***REMOVED***
    const tokens = obj['downloadTokens'];
    if (tokens.length === 0) {
        return null;
  ***REMOVED***
    const encode = encodeURIComponent;
    const tokensList = tokens.split(',');
    const urls = tokensList.map((token) => {
        const bucket = metadata['bucket'];
        const path = metadata['fullPath'];
        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
        const base = makeUrl(urlPart);
        const queryString = makeQueryString({
            alt: 'media',
            token
      ***REMOVED***);
        return base + queryString;
  ***REMOVED***);
    return urls[0];
***REMOVED***
function toResourceString(metadata, mappings) {
    const resource = {***REMOVED***;
    const len = mappings.length;
    for (let i = 0; i < len; i++) {
        const mapping = mappings[i];
        if (mapping.writable) {
            resource[mapping.server] = metadata[mapping.local];
      ***REMOVED***
  ***REMOVED***
    return JSON.stringify(resource);
***REMOVED***
function metadataValidator(p) {
    if (!isObject(p) || !p) {
        throw 'Expected Metadata object.';
  ***REMOVED***
    for (const key in p) {
        if (p.hasOwnProperty(key)) {
            const val = p[key];
            if (key === 'customMetadata') {
                if (!isObject(val)) {
                    throw 'Expected object for \'customMetadata\' mapping.';
              ***REMOVED***
          ***REMOVED***
            else {
                if (isNonNullObject(val)) {
                    throw "Mapping for '" + key + "' cannot be an object.";
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const MAX_RESULTS_KEY = 'maxResults';
const MAX_MAX_RESULTS = 1000;
const PAGE_TOKEN_KEY = 'pageToken';
const PREFIXES_KEY = 'prefixes';
const ITEMS_KEY = 'items';
function fromBackendResponse(authWrapper, resource) {
    const listResult = {
        prefixes: [],
        items: [],
        nextPageToken: resource['nextPageToken']
  ***REMOVED***
    const bucket = authWrapper.bucket();
    if (bucket === null) {
        throw noDefaultBucket();
  ***REMOVED***
    if (resource[PREFIXES_KEY]) {
        for (const path of resource[PREFIXES_KEY]) {
            const pathWithoutTrailingSlash = path.replace(/\/$/, '');
            const reference = authWrapper.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
            listResult.prefixes.push(reference);
      ***REMOVED***
  ***REMOVED***
    if (resource[ITEMS_KEY]) {
        for (const item of resource[ITEMS_KEY]) {
            const reference = authWrapper.makeStorageReference(new Location(bucket, item['name']));
            listResult.items.push(reference);
      ***REMOVED***
  ***REMOVED***
    return listResult;
***REMOVED***
function fromResponseString(authWrapper, resourceString) {
    const obj = jsonObjectOrNull(resourceString);
    if (obj === null) {
        return null;
  ***REMOVED***
    const resource = obj;
    return fromBackendResponse(authWrapper, resource);
***REMOVED***
function listOptionsValidator(p) {
    if (!isObject(p) || !p) {
        throw 'Expected ListOptions object.';
  ***REMOVED***
    for (const key in p) {
        if (key === MAX_RESULTS_KEY) {
            if (!isInteger(p[MAX_RESULTS_KEY]) ||
                p[MAX_RESULTS_KEY] <= 0) {
                throw 'Expected maxResults to be a positive number.';
          ***REMOVED***
            if (p[MAX_RESULTS_KEY] > 1000) {
                throw `Expected maxResults to be less than or equal to ${MAX_MAX_RESULTS***REMOVED***.`;
          ***REMOVED***
      ***REMOVED***
        else if (key === PAGE_TOKEN_KEY) {
            if (p[PAGE_TOKEN_KEY] && !isString(p[PAGE_TOKEN_KEY])) {
                throw 'Expected pageToken to be string.';
          ***REMOVED***
      ***REMOVED***
        else {
            throw 'Unknown option: ' + key;
      ***REMOVED***
  ***REMOVED***
***REMOVED***

class RequestInfo {
    constructor(url, method, 
    /**
     * Returns the value with which to resolve the request's promise. Only called
     * if the request is successful. Throw from this function to reject the
     * returned Request's promise with the thrown error.
     * Note: The XhrIo passed to this function may be reused after this callback
     * returns. Do not keep a reference to it in any way.
     */
    handler, timeout) {
        this.url = url;
        this.method = method;
        this.handler = handler;
        this.timeout = timeout;
        this.urlParams = {***REMOVED***;
        this.headers = {***REMOVED***;
        this.body = null;
        this.errorHandler = null;
        /**
         * Called with the current number of bytes uploaded and total size (-1 if not
         * computable) of the request body (i.e. used to report upload progress).
         */
        this.progressCallback = null;
        this.successCodes = [200];
        this.additionalRetryCodes = [];
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Throws the UNKNOWN FirebaseStorageError if cndn is false.
 */
function handlerCheck(cndn) {
    if (!cndn) {
        throw unknown();
  ***REMOVED***
***REMOVED***
function metadataHandler(authWrapper, mappings) {
    function handler(xhr, text) {
        const metadata = fromResourceString(authWrapper, text, mappings);
        handlerCheck(metadata !== null);
        return metadata;
  ***REMOVED***
    return handler;
***REMOVED***
function listHandler(authWrapper) {
    function handler(xhr, text) {
        const listResult = fromResponseString(authWrapper, text);
        handlerCheck(listResult !== null);
        return listResult;
  ***REMOVED***
    return handler;
***REMOVED***
function downloadUrlHandler(authWrapper, mappings) {
    function handler(xhr, text) {
        const metadata = fromResourceString(authWrapper, text, mappings);
        handlerCheck(metadata !== null);
        return downloadUrlFromResourceString(metadata, text);
  ***REMOVED***
    return handler;
***REMOVED***
function sharedErrorHandler(location) {
    function errorHandler(xhr, err) {
        let newErr;
        if (xhr.getStatus() === 401) {
            newErr = unauthenticated();
      ***REMOVED***
        else {
            if (xhr.getStatus() === 402) {
                newErr = quotaExceeded(location.bucket);
          ***REMOVED***
            else {
                if (xhr.getStatus() === 403) {
                    newErr = unauthorized(location.path);
              ***REMOVED***
                else {
                    newErr = err;
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
        newErr.setServerResponseProp(err.serverResponseProp());
        return newErr;
  ***REMOVED***
    return errorHandler;
***REMOVED***
function objectErrorHandler(location) {
    const shared = sharedErrorHandler(location);
    function errorHandler(xhr, err) {
        let newErr = shared(xhr, err);
        if (xhr.getStatus() === 404) {
            newErr = objectNotFound(location.path);
      ***REMOVED***
        newErr.setServerResponseProp(err.serverResponseProp());
        return newErr;
  ***REMOVED***
    return errorHandler;
***REMOVED***
function getMetadata(authWrapper, location, mappings) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart);
    const method = 'GET';
    const timeout = authWrapper.maxOperationRetryTime();
    const requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
***REMOVED***
function list(authWrapper, location, delimiter, pageToken, maxResults) {
    const urlParams = {***REMOVED***;
    if (location.isRoot) {
        urlParams['prefix'] = '';
  ***REMOVED***
    else {
        urlParams['prefix'] = location.path + '/';
  ***REMOVED***
    if (delimiter && delimiter.length > 0) {
        urlParams['delimiter'] = delimiter;
  ***REMOVED***
    if (pageToken) {
        urlParams['pageToken'] = pageToken;
  ***REMOVED***
    if (maxResults) {
        urlParams['maxResults'] = maxResults;
  ***REMOVED***
    const urlPart = location.bucketOnlyServerUrl();
    const url = makeUrl(urlPart);
    const method = 'GET';
    const timeout = authWrapper.maxOperationRetryTime();
    const requestInfo = new RequestInfo(url, method, listHandler(authWrapper), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
***REMOVED***
function getDownloadUrl(authWrapper, location, mappings) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart);
    const method = 'GET';
    const timeout = authWrapper.maxOperationRetryTime();
    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(authWrapper, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
***REMOVED***
function updateMetadata(authWrapper, location, metadata, mappings) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart);
    const method = 'PATCH';
    const body = toResourceString(metadata, mappings);
    const headers = { 'Content-Type': 'application/json; charset=utf-8' ***REMOVED***;
    const timeout = authWrapper.maxOperationRetryTime();
    const requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
***REMOVED***
function deleteObject(authWrapper, location) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart);
    const method = 'DELETE';
    const timeout = authWrapper.maxOperationRetryTime();
    function handler(_xhr, _text) { ***REMOVED***
    const requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.successCodes = [200, 204];
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
***REMOVED***
function determineContentType_(metadata, blob) {
    return ((metadata && metadata['contentType']) ||
        (blob && blob.type()) ||
        'application/octet-stream');
***REMOVED***
function metadataForUpload_(location, blob, metadata) {
    const metadataClone = Object.assign({***REMOVED***, metadata);
    metadataClone['fullPath'] = location.path;
    metadataClone['size'] = blob.size();
    if (!metadataClone['contentType']) {
        metadataClone['contentType'] = determineContentType_(null, blob);
  ***REMOVED***
    return metadataClone;
***REMOVED***
function multipartUpload(authWrapper, location, mappings, blob, metadata) {
    const urlPart = location.bucketOnlyServerUrl();
    const headers = {
        'X-Goog-Upload-Protocol': 'multipart'
  ***REMOVED***
    function genBoundary() {
        let str = '';
        for (let i = 0; i < 2; i++) {
            str =
                str +
                    Math.random()
                        .toString()
                        .slice(2);
      ***REMOVED***
        return str;
  ***REMOVED***
    const boundary = genBoundary();
    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
    const metadata_ = metadataForUpload_(location, blob, metadata);
    const metadataString = toResourceString(metadata_, mappings);
    const preBlobPart = '--' +
        boundary +
        '\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n\r\n' +
        metadataString +
        '\r\n--' +
        boundary +
        '\r\n' +
        'Content-Type: ' +
        metadata_['contentType'] +
        '\r\n\r\n';
    const postBlobPart = '\r\n--' + boundary + '--';
    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
    if (body === null) {
        throw cannotSliceBlob();
  ***REMOVED***
    const urlParams = { name: metadata_['fullPath'] ***REMOVED***;
    const url = makeUrl(urlPart);
    const method = 'POST';
    const timeout = authWrapper.maxUploadRetryTime();
    const requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
***REMOVED***
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 * @struct
 */
class ResumableUploadStatus {
    constructor(current, total, finalized, metadata) {
        this.current = current;
        this.total = total;
        this.finalized = !!finalized;
        this.metadata = metadata || null;
  ***REMOVED***
***REMOVED***
function checkResumeHeader_(xhr, allowed) {
    let status = null;
    try {
        status = xhr.getResponseHeader('X-Goog-Upload-Status');
  ***REMOVED***
    catch (e) {
        handlerCheck(false);
  ***REMOVED***
    const allowedStatus = allowed || ['active'];
    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
    return status;
***REMOVED***
function createResumableUpload(authWrapper, location, mappings, blob, metadata) {
    const urlPart = location.bucketOnlyServerUrl();
    const metadataForUpload = metadataForUpload_(location, blob, metadata);
    const urlParams = { name: metadataForUpload['fullPath'] ***REMOVED***;
    const url = makeUrl(urlPart);
    const method = 'POST';
    const headers = {
        'X-Goog-Upload-Protocol': 'resumable',
        'X-Goog-Upload-Command': 'start',
        'X-Goog-Upload-Header-Content-Length': blob.size(),
        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
        'Content-Type': 'application/json; charset=utf-8'
  ***REMOVED***
    const body = toResourceString(metadataForUpload, mappings);
    const timeout = authWrapper.maxUploadRetryTime();
    function handler(xhr) {
        checkResumeHeader_(xhr);
        let url;
        try {
            url = xhr.getResponseHeader('X-Goog-Upload-URL');
      ***REMOVED***
        catch (e) {
            handlerCheck(false);
      ***REMOVED***
        handlerCheck(isString(url));
        return url;
  ***REMOVED***
    const requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
***REMOVED***
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */
function getResumableUploadStatus(authWrapper, location, url, blob) {
    const headers = { 'X-Goog-Upload-Command': 'query' ***REMOVED***;
    function handler(xhr) {
        const status = checkResumeHeader_(xhr, ['active', 'final']);
        let sizeString = null;
        try {
            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
      ***REMOVED***
        catch (e) {
            handlerCheck(false);
      ***REMOVED***
        if (!sizeString) {
            // null or empty string
            handlerCheck(false);
      ***REMOVED***
        const size = Number(sizeString);
        handlerCheck(!isNaN(size));
        return new ResumableUploadStatus(size, blob.size(), status === 'final');
  ***REMOVED***
    const method = 'POST';
    const timeout = authWrapper.maxUploadRetryTime();
    const requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
***REMOVED***
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */
const resumableUploadChunkSize = 256 * 1024;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */
function continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, status, progressCallback) {
    // TODO(andysoto): standardize on internal asserts
    // assert(!(opt_status && opt_status.finalized));
    const status_ = new ResumableUploadStatus(0, 0);
    if (status) {
        status_.current = status.current;
        status_.total = status.total;
  ***REMOVED***
    else {
        status_.current = 0;
        status_.total = blob.size();
  ***REMOVED***
    if (blob.size() !== status_.total) {
        throw serverFileWrongSize();
  ***REMOVED***
    const bytesLeft = status_.total - status_.current;
    let bytesToUpload = bytesLeft;
    if (chunkSize > 0) {
        bytesToUpload = Math.min(bytesToUpload, chunkSize);
  ***REMOVED***
    const startByte = status_.current;
    const endByte = startByte + bytesToUpload;
    const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
    const headers = {
        'X-Goog-Upload-Command': uploadCommand,
        'X-Goog-Upload-Offset': status_.current
  ***REMOVED***
    const body = blob.slice(startByte, endByte);
    if (body === null) {
        throw cannotSliceBlob();
  ***REMOVED***
    function handler(xhr, text) {
        // TODO(andysoto): Verify the MD5 of each uploaded range:
        // the 'x-range-md5' header comes back with status code 308 responses.
        // We'll only be able to bail out though, because you can't re-upload a
        // range that you previously uploaded.
        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
        const newCurrent = status_.current + bytesToUpload;
        const size = blob.size();
        let metadata;
        if (uploadStatus === 'final') {
            metadata = metadataHandler(authWrapper, mappings)(xhr, text);
      ***REMOVED***
        else {
            metadata = null;
      ***REMOVED***
        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
  ***REMOVED***
    const method = 'POST';
    const timeout = authWrapper.maxUploadRetryTime();
    const requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.progressCallback = progressCallback || null;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @struct
 */
class Observer {
    constructor(nextOrObserver, error, complete) {
        const asFunctions = isFunction(nextOrObserver) ||
            isDef(error) ||
            isDef(complete);
        if (asFunctions) {
            this.next = nextOrObserver;
            this.error = error || null;
            this.complete = complete || null;
      ***REMOVED***
        else {
            const observer = nextOrObserver;
            this.next = observer.next || null;
            this.error = observer.error || null;
            this.complete = observer.complete || null;
      ***REMOVED***
  ***REMOVED***
***REMOVED***

class UploadTaskSnapshot {
    constructor(bytesTransferred, totalBytes, state, metadata, task, ref) {
        this.bytesTransferred = bytesTransferred;
        this.totalBytes = totalBytes;
        this.state = state;
        this.metadata = metadata;
        this.task = task;
        this.ref = ref;
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param name Name of the function.
 * @param specs Argument specs.
 * @param passed The actual arguments passed to the function.
 * @throws {fbs.Error***REMOVED*** If the arguments are invalid.
 */
function validate(name, specs, passed) {
    let minArgs = specs.length;
    const maxArgs = specs.length;
    for (let i = 0; i < specs.length; i++) {
        if (specs[i].optional) {
            minArgs = i;
            break;
      ***REMOVED***
  ***REMOVED***
    const validLength = minArgs <= passed.length && passed.length <= maxArgs;
    if (!validLength) {
        throw invalidArgumentCount(minArgs, maxArgs, name, passed.length);
  ***REMOVED***
    for (let i = 0; i < passed.length; i++) {
        try {
            specs[i].validator(passed[i]);
      ***REMOVED***
        catch (e) {
            if (e instanceof Error) {
                throw invalidArgument(i, name, e.message);
          ***REMOVED***
            else {
                throw invalidArgument(i, name, e);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
***REMOVED***
/**
 * @struct
 */
class ArgSpec {
    constructor(validator, optional) {
        const self = this;
        this.validator = function (p) {
            if (self.optional && !isJustDef(p)) {
                return;
          ***REMOVED***
            validator(p);
      ***REMOVED***
        this.optional = !!optional;
  ***REMOVED***
***REMOVED***
function and_(v1, v2) {
    return function (p) {
        v1(p);
        v2(p);
  ***REMOVED***
***REMOVED***
function stringSpec(validator, optional) {
    function stringValidator(p) {
        if (!isString(p)) {
            throw 'Expected string.';
      ***REMOVED***
  ***REMOVED***
    let chainedValidator;
    if (validator) {
        chainedValidator = and_(stringValidator, validator);
  ***REMOVED***
    else {
        chainedValidator = stringValidator;
  ***REMOVED***
    return new ArgSpec(chainedValidator, optional);
***REMOVED***
function uploadDataSpec() {
    function validator(p) {
        const valid = p instanceof Uint8Array ||
            p instanceof ArrayBuffer ||
            (isNativeBlobDefined() && p instanceof Blob);
        if (!valid) {
            throw 'Expected Blob or File.';
      ***REMOVED***
  ***REMOVED***
    return new ArgSpec(validator);
***REMOVED***
function metadataSpec(optional) {
    return new ArgSpec(metadataValidator, optional);
***REMOVED***
function listOptionSpec(optional) {
    return new ArgSpec(listOptionsValidator, optional);
***REMOVED***
function nonNegativeNumberSpec() {
    function validator(p) {
        const valid = isNumber(p) && p >= 0;
        if (!valid) {
            throw 'Expected a number 0 or greater.';
      ***REMOVED***
  ***REMOVED***
    return new ArgSpec(validator);
***REMOVED***
function looseObjectSpec(validator, optional) {
    function isLooseObjectValidator(p) {
        const isLooseObject = p === null || (isDef(p) && p instanceof Object);
        if (!isLooseObject) {
            throw 'Expected an Object.';
      ***REMOVED***
        if (validator !== undefined && validator !== null) {
            validator(p);
      ***REMOVED***
  ***REMOVED***
    return new ArgSpec(isLooseObjectValidator, optional);
***REMOVED***
function nullFunctionSpec(optional) {
    function validator(p) {
        const valid = p === null || isFunction(p);
        if (!valid) {
            throw 'Expected a Function.';
      ***REMOVED***
  ***REMOVED***
    return new ArgSpec(validator, optional);
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */
function async(f) {
    return (...argsToForward) => {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(() => f(...argsToForward));
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 */
class UploadTask {
    /**
     * @param ref The firebaseStorage.Reference object this task came
     *     from, untyped to avoid cyclic dependencies.
     * @param blob The blob to upload.
     */
    constructor(ref, authWrapper, location, mappings, blob, metadata = null) {
        this.transferred_ = 0;
        this.needToFetchStatus_ = false;
        this.needToFetchMetadata_ = false;
        this.observers_ = [];
        this.error_ = null;
        this.uploadUrl_ = null;
        this.request_ = null;
        this.chunkMultiplier_ = 1;
        this.resolve_ = null;
        this.reject_ = null;
        this.ref_ = ref;
        this.authWrapper_ = authWrapper;
        this.location_ = location;
        this.blob_ = blob;
        this.metadata_ = metadata;
        this.mappings_ = mappings;
        this.resumable_ = this.shouldDoResumable_(this.blob_);
        this.state_ = InternalTaskState.RUNNING;
        this.errorHandler_ = error => {
            this.request_ = null;
            this.chunkMultiplier_ = 1;
            if (error.codeEquals(Code.CANCELED)) {
                this.needToFetchStatus_ = true;
                this.completeTransitions_();
          ***REMOVED***
            else {
                this.error_ = error;
                this.transition_(InternalTaskState.ERROR);
          ***REMOVED***
      ***REMOVED***
        this.metadataErrorHandler_ = error => {
            this.request_ = null;
            if (error.codeEquals(Code.CANCELED)) {
                this.completeTransitions_();
          ***REMOVED***
            else {
                this.error_ = error;
                this.transition_(InternalTaskState.ERROR);
          ***REMOVED***
      ***REMOVED***
        this.promise_ = new Promise((resolve, reject) => {
            this.resolve_ = resolve;
            this.reject_ = reject;
            this.start_();
      ***REMOVED***);
        // Prevent uncaught rejections on the internal promise from bubbling out
        // to the top level with a dummy handler.
        this.promise_.then(null, () => { ***REMOVED***);
  ***REMOVED***
    makeProgressCallback_() {
        const sizeBefore = this.transferred_;
        return loaded => this.updateProgress_(sizeBefore + loaded);
  ***REMOVED***
    shouldDoResumable_(blob) {
        return blob.size() > 256 * 1024;
  ***REMOVED***
    start_() {
        if (this.state_ !== InternalTaskState.RUNNING) {
            // This can happen if someone pauses us in a resume callback, for example.
            return;
      ***REMOVED***
        if (this.request_ !== null) {
            return;
      ***REMOVED***
        if (this.resumable_) {
            if (this.uploadUrl_ === null) {
                this.createResumable_();
          ***REMOVED***
            else {
                if (this.needToFetchStatus_) {
                    this.fetchStatus_();
              ***REMOVED***
                else {
                    if (this.needToFetchMetadata_) {
                        // Happens if we miss the metadata on upload completion.
                        this.fetchMetadata_();
                  ***REMOVED***
                    else {
                        this.continueUpload_();
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
        else {
            this.oneShotUpload_();
      ***REMOVED***
  ***REMOVED***
    resolveToken_(callback) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.authWrapper_.getAuthToken().then(authToken => {
            switch (this.state_) {
                case InternalTaskState.RUNNING:
                    callback(authToken);
                    break;
                case InternalTaskState.CANCELING:
                    this.transition_(InternalTaskState.CANCELED);
                    break;
                case InternalTaskState.PAUSING:
                    this.transition_(InternalTaskState.PAUSED);
                    break;
                default:
          ***REMOVED***
      ***REMOVED***);
  ***REMOVED***
    // TODO(andysoto): assert false
    createResumable_() {
        this.resolveToken_(authToken => {
            const requestInfo = createResumableUpload(this.authWrapper_, this.location_, this.mappings_, this.blob_, this.metadata_);
            const createRequest = this.authWrapper_.makeRequest(requestInfo, authToken);
            this.request_ = createRequest;
            createRequest.getPromise().then((url) => {
                this.request_ = null;
                this.uploadUrl_ = url;
                this.needToFetchStatus_ = false;
                this.completeTransitions_();
          ***REMOVED***, this.errorHandler_);
      ***REMOVED***);
  ***REMOVED***
    fetchStatus_() {
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        const url = this.uploadUrl_;
        this.resolveToken_(authToken => {
            const requestInfo = getResumableUploadStatus(this.authWrapper_, this.location_, url, this.blob_);
            const statusRequest = this.authWrapper_.makeRequest(requestInfo, authToken);
            this.request_ = statusRequest;
            statusRequest.getPromise().then(status => {
                status = status;
                this.request_ = null;
                this.updateProgress_(status.current);
                this.needToFetchStatus_ = false;
                if (status.finalized) {
                    this.needToFetchMetadata_ = true;
              ***REMOVED***
                this.completeTransitions_();
          ***REMOVED***, this.errorHandler_);
      ***REMOVED***);
  ***REMOVED***
    continueUpload_() {
        const chunkSize = resumableUploadChunkSize * this.chunkMultiplier_;
        const status = new ResumableUploadStatus(this.transferred_, this.blob_.size());
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        const url = this.uploadUrl_;
        this.resolveToken_(authToken => {
            let requestInfo;
            try {
                requestInfo = continueResumableUpload(this.location_, this.authWrapper_, url, this.blob_, chunkSize, this.mappings_, status, this.makeProgressCallback_());
          ***REMOVED***
            catch (e) {
                this.error_ = e;
                this.transition_(InternalTaskState.ERROR);
                return;
          ***REMOVED***
            const uploadRequest = this.authWrapper_.makeRequest(requestInfo, authToken);
            this.request_ = uploadRequest;
            uploadRequest
                .getPromise()
                .then((newStatus) => {
                this.increaseMultiplier_();
                this.request_ = null;
                this.updateProgress_(newStatus.current);
                if (newStatus.finalized) {
                    this.metadata_ = newStatus.metadata;
                    this.transition_(InternalTaskState.SUCCESS);
              ***REMOVED***
                else {
                    this.completeTransitions_();
              ***REMOVED***
          ***REMOVED***, this.errorHandler_);
      ***REMOVED***);
  ***REMOVED***
    increaseMultiplier_() {
        const currentSize = resumableUploadChunkSize * this.chunkMultiplier_;
        // Max chunk size is 32M.
        if (currentSize < 32 * 1024 * 1024) {
            this.chunkMultiplier_ *= 2;
      ***REMOVED***
  ***REMOVED***
    fetchMetadata_() {
        this.resolveToken_(authToken => {
            const requestInfo = getMetadata(this.authWrapper_, this.location_, this.mappings_);
            const metadataRequest = this.authWrapper_.makeRequest(requestInfo, authToken);
            this.request_ = metadataRequest;
            metadataRequest.getPromise().then(metadata => {
                this.request_ = null;
                this.metadata_ = metadata;
                this.transition_(InternalTaskState.SUCCESS);
          ***REMOVED***, this.metadataErrorHandler_);
      ***REMOVED***);
  ***REMOVED***
    oneShotUpload_() {
        this.resolveToken_(authToken => {
            const requestInfo = multipartUpload(this.authWrapper_, this.location_, this.mappings_, this.blob_, this.metadata_);
            const multipartRequest = this.authWrapper_.makeRequest(requestInfo, authToken);
            this.request_ = multipartRequest;
            multipartRequest.getPromise().then(metadata => {
                this.request_ = null;
                this.metadata_ = metadata;
                this.updateProgress_(this.blob_.size());
                this.transition_(InternalTaskState.SUCCESS);
          ***REMOVED***, this.errorHandler_);
      ***REMOVED***);
  ***REMOVED***
    updateProgress_(transferred) {
        const old = this.transferred_;
        this.transferred_ = transferred;
        // A progress update can make the "transferred" value smaller (e.g. a
        // partial upload not completed by server, after which the "transferred"
        // value may reset to the value at the beginning of the request).
        if (this.transferred_ !== old) {
            this.notifyObservers_();
      ***REMOVED***
  ***REMOVED***
    transition_(state) {
        if (this.state_ === state) {
            return;
      ***REMOVED***
        switch (state) {
            case InternalTaskState.CANCELING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING);
                this.state_ = state;
                if (this.request_ !== null) {
                    this.request_.cancel();
              ***REMOVED***
                break;
            case InternalTaskState.PAUSING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING);
                this.state_ = state;
                if (this.request_ !== null) {
                    this.request_.cancel();
              ***REMOVED***
                break;
            case InternalTaskState.RUNNING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.PAUSING);
                const wasPaused = this.state_ === InternalTaskState.PAUSED;
                this.state_ = state;
                if (wasPaused) {
                    this.notifyObservers_();
                    this.start_();
              ***REMOVED***
                break;
            case InternalTaskState.PAUSED:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSING);
                this.state_ = state;
                this.notifyObservers_();
                break;
            case InternalTaskState.CANCELED:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.error_ = canceled();
                this.state_ = state;
                this.notifyObservers_();
                break;
            case InternalTaskState.ERROR:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.state_ = state;
                this.notifyObservers_();
                break;
            case InternalTaskState.SUCCESS:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.state_ = state;
                this.notifyObservers_();
                break;
            default: // Ignore
      ***REMOVED***
  ***REMOVED***
    completeTransitions_() {
        switch (this.state_) {
            case InternalTaskState.PAUSING:
                this.transition_(InternalTaskState.PAUSED);
                break;
            case InternalTaskState.CANCELING:
                this.transition_(InternalTaskState.CANCELED);
                break;
            case InternalTaskState.RUNNING:
                this.start_();
                break;
            default:
                // TODO(andysoto): assert(false);
                break;
      ***REMOVED***
  ***REMOVED***
    get snapshot() {
        const externalState = taskStateFromInternalTaskState(this.state_);
        return new UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
  ***REMOVED***
    /**
     * Adds a callback for an event.
     * @param type The type of event to listen for.
     */
    on(type, nextOrObserver, error, completed) {
        function typeValidator() {
            if (type !== TaskEvent.STATE_CHANGED) {
                throw `Expected one of the event types: [${TaskEvent.STATE_CHANGED***REMOVED***].`;
          ***REMOVED***
      ***REMOVED***
        const nextOrObserverMessage = 'Expected a function or an Object with one of ' +
            '`next`, `error`, `complete` properties.';
        const nextValidator = nullFunctionSpec(true).validator;
        const observerValidator = looseObjectSpec(null, true).validator;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        function nextOrObserverValidator(p) {
            try {
                nextValidator(p);
                return;
          ***REMOVED***
            catch (e) { ***REMOVED***
            try {
                observerValidator(p);
                const anyDefined = isJustDef(p['next']) ||
                    isJustDef(p['error']) ||
                    isJustDef(p['complete']);
                if (!anyDefined) {
                    throw '';
              ***REMOVED***
                return;
          ***REMOVED***
            catch (e) {
                throw nextOrObserverMessage;
          ***REMOVED***
      ***REMOVED***
        const specs = [
            stringSpec(typeValidator),
            looseObjectSpec(nextOrObserverValidator, true),
            nullFunctionSpec(true),
            nullFunctionSpec(true)
        ];
        validate('on', specs, arguments);
        const self = this;
        function makeBinder(specs) {
            function binder(nextOrObserver, error, complete) {
                if (specs !== null) {
                    validate('on', specs, arguments);
              ***REMOVED***
                const observer = new Observer(nextOrObserver, error, completed);
                self.addObserver_(observer);
                return () => {
                    self.removeObserver_(observer);
              ***REMOVED***
          ***REMOVED***
            return binder;
      ***REMOVED***
        function binderNextOrObserverValidator(p) {
            if (p === null) {
                throw nextOrObserverMessage;
          ***REMOVED***
            nextOrObserverValidator(p);
      ***REMOVED***
        const binderSpecs = [
            looseObjectSpec(binderNextOrObserverValidator),
            nullFunctionSpec(true),
            nullFunctionSpec(true)
        ];
        const typeOnly = !(isJustDef(nextOrObserver) ||
            isJustDef(error) ||
            isJustDef(completed));
        if (typeOnly) {
            return makeBinder(binderSpecs);
      ***REMOVED***
        else {
            return makeBinder(null)(nextOrObserver, error, completed);
      ***REMOVED***
  ***REMOVED***
    /**
     * This object behaves like a Promise, and resolves with its snapshot data
     * when the upload completes.
     * @param onFulfilled The fulfillment callback. Promise chaining works as normal.
     * @param onRejected The rejection callback.
     */
    then(onFulfilled, onRejected) {
        // These casts are needed so that TypeScript can infer the types of the
        // resulting Promise.
        return this.promise_.then(onFulfilled, onRejected);
  ***REMOVED***
    /**
     * Equivalent to calling `then(null, onRejected)`.
     */
    catch(onRejected) {
        return this.then(null, onRejected);
  ***REMOVED***
    /**
     * Adds the given observer.
     */
    addObserver_(observer) {
        this.observers_.push(observer);
        this.notifyObserver_(observer);
  ***REMOVED***
    /**
     * Removes the given observer.
     */
    removeObserver_(observer) {
        const i = this.observers_.indexOf(observer);
        if (i !== -1) {
            this.observers_.splice(i, 1);
      ***REMOVED***
  ***REMOVED***
    notifyObservers_() {
        this.finishPromise_();
        const observers = this.observers_.slice();
        observers.forEach(observer => {
            this.notifyObserver_(observer);
      ***REMOVED***);
  ***REMOVED***
    finishPromise_() {
        if (this.resolve_ !== null) {
            let triggered = true;
            switch (taskStateFromInternalTaskState(this.state_)) {
                case TaskState.SUCCESS:
                    async(this.resolve_.bind(null, this.snapshot))();
                    break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                    const toCall = this.reject_;
                    async(toCall.bind(null, this.error_))();
                    break;
                default:
                    triggered = false;
                    break;
          ***REMOVED***
            if (triggered) {
                this.resolve_ = null;
                this.reject_ = null;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    notifyObserver_(observer) {
        const externalState = taskStateFromInternalTaskState(this.state_);
        switch (externalState) {
            case TaskState.RUNNING:
            case TaskState.PAUSED:
                if (observer.next) {
                    async(observer.next.bind(observer, this.snapshot))();
              ***REMOVED***
                break;
            case TaskState.SUCCESS:
                if (observer.complete) {
                    async(observer.complete.bind(observer))();
              ***REMOVED***
                break;
            case TaskState.CANCELED:
            case TaskState.ERROR:
                if (observer.error) {
                    async(observer.error.bind(observer, this.error_))();
              ***REMOVED***
                break;
            default:
                // TODO(andysoto): assert(false);
                if (observer.error) {
                    async(observer.error.bind(observer, this.error_))();
              ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    /**
     * Resumes a paused task. Has no effect on a currently running or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    resume() {
        validate('resume', [], arguments);
        const valid = this.state_ === InternalTaskState.PAUSED ||
            this.state_ === InternalTaskState.PAUSING;
        if (valid) {
            this.transition_(InternalTaskState.RUNNING);
      ***REMOVED***
        return valid;
  ***REMOVED***
    /**
     * Pauses a currently running task. Has no effect on a paused or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    pause() {
        validate('pause', [], arguments);
        const valid = this.state_ === InternalTaskState.RUNNING;
        if (valid) {
            this.transition_(InternalTaskState.PAUSING);
      ***REMOVED***
        return valid;
  ***REMOVED***
    /**
     * Cancels a currently running or paused task. Has no effect on a complete or
     * failed task.
     * @return True if the operation took effect, false if ignored.
     */
    cancel() {
        validate('cancel', [], arguments);
        const valid = this.state_ === InternalTaskState.RUNNING ||
            this.state_ === InternalTaskState.PAUSING;
        if (valid) {
            this.transition_(InternalTaskState.CANCELING);
      ***REMOVED***
        return valid;
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @param location An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */
class Reference {
    constructor(authWrapper, location) {
        this.authWrapper = authWrapper;
        if (location instanceof Location) {
            this.location = location;
      ***REMOVED***
        else {
            this.location = Location.makeFromUrl(location);
      ***REMOVED***
  ***REMOVED***
    /**
     * @return The URL for the bucket and path this object references,
     *     in the form gs://<bucket>/<object-path>
     * @override
     */
    toString() {
        validate('toString', [], arguments);
        return 'gs://' + this.location.bucket + '/' + this.location.path;
  ***REMOVED***
    newRef(authWrapper, location) {
        return new Reference(authWrapper, location);
  ***REMOVED***
    mappings() {
        return getMappings();
  ***REMOVED***
    /**
     * @return A reference to the object obtained by
     *     appending childPath, removing any duplicate, beginning, or trailing
     *     slashes.
     */
    child(childPath) {
        validate('child', [stringSpec()], arguments);
        const newPath = child(this.location.path, childPath);
        const location = new Location(this.location.bucket, newPath);
        return this.newRef(this.authWrapper, location);
  ***REMOVED***
    /**
     * @return A reference to the parent of the
     *     current object, or null if the current object is the root.
     */
    get parent() {
        const newPath = parent(this.location.path);
        if (newPath === null) {
            return null;
      ***REMOVED***
        const location = new Location(this.location.bucket, newPath);
        return this.newRef(this.authWrapper, location);
  ***REMOVED***
    /**
     * @return An reference to the root of this
     *     object's bucket.
     */
    get root() {
        const location = new Location(this.location.bucket, '');
        return this.newRef(this.authWrapper, location);
  ***REMOVED***
    get bucket() {
        return this.location.bucket;
  ***REMOVED***
    get fullPath() {
        return this.location.path;
  ***REMOVED***
    get name() {
        return lastComponent(this.location.path);
  ***REMOVED***
    get storage() {
        return this.authWrapper.service();
  ***REMOVED***
    /**
     * Uploads a blob to this object's location.
     * @param data The blob to upload.
     * @return An UploadTask that lets you control and
     *     observe the upload.
     */
    put(data, metadata = null) {
        validate('put', [uploadDataSpec(), metadataSpec(true)], arguments);
        this.throwIfRoot_('put');
        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);
  ***REMOVED***
    /**
     * Uploads a string to this object's location.
     * @param value The string to upload.
     * @param format The format of the string to upload.
     * @return An UploadTask that lets you control and
     *     observe the upload.
     */
    putString(value, format = StringFormat.RAW, metadata) {
        validate('putString', [stringSpec(), stringSpec(formatValidator, true), metadataSpec(true)], arguments);
        this.throwIfRoot_('putString');
        const data = dataFromString(format, value);
        const metadataClone = Object.assign({***REMOVED***, metadata);
        if (!isDef(metadataClone['contentType']) &&
            isDef(data.contentType)) {
            metadataClone['contentType'] = data.contentType;
      ***REMOVED***
        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadataClone);
  ***REMOVED***
    /**
     * Deletes the object at this location.
     * @return A promise that resolves if the deletion succeeds.
     */
    delete() {
        validate('delete', [], arguments);
        this.throwIfRoot_('delete');
        return this.authWrapper.getAuthToken().then(authToken => {
            const requestInfo = deleteObject(this.authWrapper, this.location);
            return this.authWrapper.makeRequest(requestInfo, authToken).getPromise();
      ***REMOVED***);
  ***REMOVED***
    /**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling list() repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: listAll may potentially consume too many resources if there are
     * too many results.
     *
     * @return A Promise that resolves with all the items and prefixes under
     *      the current storage reference. `prefixes` contains references to
     *      sub-directories and `items` contains references to objects in this
     *      folder. `nextPageToken` is never returned.
     */
    listAll() {
        validate('listAll', [], arguments);
        const accumulator = {
            prefixes: [],
            items: []
      ***REMOVED***
        return this.listAllHelper(accumulator).then(() => accumulator);
  ***REMOVED***
    async listAllHelper(accumulator, pageToken) {
        const opt = {
            // maxResults is 1000 by default.
            pageToken
      ***REMOVED***
        const nextPage = await this.list(opt);
        accumulator.prefixes.push(...nextPage.prefixes);
        accumulator.items.push(...nextPage.items);
        if (nextPage.nextPageToken != null) {
            await this.listAllHelper(accumulator, nextPage.nextPageToken);
      ***REMOVED***
  ***REMOVED***
    /**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure.
     * Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with "/" or contain two consecutive
     * "/"s. Firebase Storage List API will filter these unsupported objects.
     * list() may fail if there are too many unsupported objects in the bucket.
     *
     * @param options See ListOptions for details.
     * @return A Promise that resolves with the items and prefixes.
     *      `prefixes` contains references to sub-folders and `items`
     *      contains references to objects in this folder. `nextPageToken`
     *      can be used to get the rest of the results.
     */
    list(options) {
        validate('list', [listOptionSpec(true)], arguments);
        const self = this;
        return this.authWrapper.getAuthToken().then(authToken => {
            const op = options || {***REMOVED***;
            const requestInfo = list(self.authWrapper, self.location, 
            /*delimiter= */ '/', op.pageToken, op.maxResults);
            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
      ***REMOVED***);
  ***REMOVED***
    /**
     *     A promise that resolves with the metadata for this object. If this
     *     object doesn't exist or metadata cannot be retreived, the promise is
     *     rejected.
     */
    getMetadata() {
        validate('getMetadata', [], arguments);
        this.throwIfRoot_('getMetadata');
        return this.authWrapper.getAuthToken().then(authToken => {
            const requestInfo = getMetadata(this.authWrapper, this.location, this.mappings());
            return this.authWrapper.makeRequest(requestInfo, authToken).getPromise();
      ***REMOVED***);
  ***REMOVED***
    /**
     * Updates the metadata for this object.
     * @param metadata The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @return A promise that resolves
     *     with the new metadata for this object.
     *     @see firebaseStorage.Reference.prototype.getMetadata
     */
    updateMetadata(metadata) {
        validate('updateMetadata', [metadataSpec()], arguments);
        this.throwIfRoot_('updateMetadata');
        return this.authWrapper.getAuthToken().then(authToken => {
            const requestInfo = updateMetadata(this.authWrapper, this.location, metadata, this.mappings());
            return this.authWrapper.makeRequest(requestInfo, authToken).getPromise();
      ***REMOVED***);
  ***REMOVED***
    /**
     * @return A promise that resolves with the download
     *     URL for this object.
     */
    getDownloadURL() {
        validate('getDownloadURL', [], arguments);
        this.throwIfRoot_('getDownloadURL');
        return this.authWrapper.getAuthToken().then(authToken => {
            const requestInfo = getDownloadUrl(this.authWrapper, this.location, this.mappings());
            return this.authWrapper
                .makeRequest(requestInfo, authToken)
                .getPromise()
                .then(url => {
                if (url === null) {
                    throw noDownloadURL();
              ***REMOVED***
                return url;
          ***REMOVED***);
      ***REMOVED***);
  ***REMOVED***
    throwIfRoot_(name) {
        if (this.location.path === '') {
            throw invalidRootOperation(name);
      ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * A request whose promise always fails.
 * @struct
 * @template T
 */
class FailRequest {
    constructor(error) {
        this.promise_ = Promise.reject(error);
  ***REMOVED***
    /** @inheritDoc */
    getPromise() {
        return this.promise_;
  ***REMOVED***
    /** @inheritDoc */
    cancel(_appDelete = false) { ***REMOVED***
***REMOVED***

class RequestMap {
  ***REMOVED***
        this.map = new Map();
        this.id = MIN_SAFE_INTEGER;
  ***REMOVED***
    /**
     * Registers the given request with this map.
     * The request is unregistered when it completes.
     *
     * @param request The request to register.
     */
    addRequest(request) {
        const id = this.id;
        this.id++;
        this.map.set(id, request);
        request
            .getPromise()
            .then(() => this.map.delete(id), () => this.map.delete(id));
  ***REMOVED***
    /**
     * Cancels all registered requests.
     */
    clear() {
        this.map.forEach(v => {
            v && v.cancel(true);
      ***REMOVED***);
        this.map.clear();
  ***REMOVED***
***REMOVED***

/**
 * @param app If null, getAuthToken always resolves with null.
 * @param service The storage service associated with this auth wrapper.
 *     Untyped to avoid circular type dependencies.
 * @struct
 */
class AuthWrapper {
    constructor(app, maker, requestMaker, service, pool) {
        this.bucket_ = null;
        this.deleted_ = false;
        this.app_ = app;
        if (this.app_ !== null) {
            const options = this.app_.options;
            if (isDef(options)) {
                this.bucket_ = AuthWrapper.extractBucket_(options);
          ***REMOVED***
      ***REMOVED***
        this.storageRefMaker_ = maker;
        this.requestMaker_ = requestMaker;
        this.pool_ = pool;
        this.service_ = service;
        this.maxOperationRetryTime_ = DEFAULT_MAX_OPERATION_RETRY_TIME;
        this.maxUploadRetryTime_ = DEFAULT_MAX_UPLOAD_RETRY_TIME;
        this.requestMap_ = new RequestMap();
  ***REMOVED***
    static extractBucket_(config) {
        const bucketString = config[CONFIG_STORAGE_BUCKET_KEY] || null;
        if (bucketString == null) {
            return null;
      ***REMOVED***
        const loc = Location.makeFromBucketSpec(bucketString);
        return loc.bucket;
  ***REMOVED***
    getAuthToken() {
        // TODO(andysoto): remove ifDef checks after firebase-app implements stubs
        // (b/28673818).
        if (this.app_ !== null &&
            isDef(this.app_.INTERNAL) &&
            isDef(this.app_.INTERNAL.getToken)) {
            return this.app_.INTERNAL.getToken().then((response) => {
                if (response !== null) {
                    return response.accessToken;
              ***REMOVED***
                else {
                    return null;
              ***REMOVED***
          ***REMOVED***, () => null);
      ***REMOVED***
        else {
            return Promise.resolve(null);
      ***REMOVED***
  ***REMOVED***
    bucket() {
        if (this.deleted_) {
            throw appDeleted();
      ***REMOVED***
        else {
            return this.bucket_;
      ***REMOVED***
  ***REMOVED***
    /**
     * The service associated with this auth wrapper. Untyped to avoid circular
     * type dependencies.
     */
    service() {
        return this.service_;
  ***REMOVED***
    /**
     * Returns a new firebaseStorage.Reference object referencing this AuthWrapper
     * at the given Location.
     * @param loc The Location.
     * @return Actually a firebaseStorage.Reference, typing not allowed
     *     because of circular dependency problems.
     */
    makeStorageReference(loc) {
        return this.storageRefMaker_(this, loc);
  ***REMOVED***
    makeRequest(requestInfo, authToken) {
        if (!this.deleted_) {
            const request = this.requestMaker_(requestInfo, authToken, this.pool_);
            this.requestMap_.addRequest(request);
            return request;
      ***REMOVED***
        else {
            return new FailRequest(appDeleted());
      ***REMOVED***
  ***REMOVED***
    /**
     * Stop running requests and prevent more from being created.
     */
    deleteApp() {
        this.deleted_ = true;
        this.app_ = null;
        this.requestMap_.clear();
  ***REMOVED***
    maxUploadRetryTime() {
        return this.maxUploadRetryTime_;
  ***REMOVED***
    setMaxUploadRetryTime(time) {
        this.maxUploadRetryTime_ = time;
  ***REMOVED***
    maxOperationRetryTime() {
        return this.maxOperationRetryTime_;
  ***REMOVED***
    setMaxOperationRetryTime(time) {
        this.maxOperationRetryTime_ = time;
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */
function start(f, callback, timeout) {
    // TODO(andysoto): make this code cleaner (probably refactor into an actual
    // type instead of a bunch of functions with state shared in the closure)
    let waitSeconds = 1;
    // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
    // TODO: find a way to exclude Node type definition for storage because storage only works in browser
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let timeoutId = null;
    let hitTimeout = false;
    let cancelState = 0;
    function canceled() {
        return cancelState === 2;
  ***REMOVED***
    let triggeredCallback = false;
    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
    // the no-explicit-any rule when ESlint releases it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function triggerCallback(...args) {
        if (!triggeredCallback) {
            triggeredCallback = true;
            callback.apply(null, args);
      ***REMOVED***
  ***REMOVED***
    function callWithDelay(millis) {
        timeoutId = setTimeout(() => {
            timeoutId = null;
            f(handler, canceled());
      ***REMOVED***, millis);
  ***REMOVED***
    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
    // the no-explicit-any rule when ESlint releases it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function handler(success, ...args) {
        if (triggeredCallback) {
            return;
      ***REMOVED***
        if (success) {
            triggerCallback.call(null, success, ...args);
            return;
      ***REMOVED***
        const mustStop = canceled() || hitTimeout;
        if (mustStop) {
            triggerCallback.call(null, success, ...args);
            return;
      ***REMOVED***
        if (waitSeconds < 64) {
            /* TODO(andysoto): don't back off so quickly if we know we're offline. */
            waitSeconds *= 2;
      ***REMOVED***
        let waitMillis;
        if (cancelState === 1) {
            cancelState = 2;
            waitMillis = 0;
      ***REMOVED***
        else {
            waitMillis = (waitSeconds + Math.random()) * 1000;
      ***REMOVED***
        callWithDelay(waitMillis);
  ***REMOVED***
    let stopped = false;
    function stop(wasTimeout) {
        if (stopped) {
            return;
      ***REMOVED***
        stopped = true;
        if (triggeredCallback) {
            return;
      ***REMOVED***
        if (timeoutId !== null) {
            if (!wasTimeout) {
                cancelState = 2;
          ***REMOVED***
            clearTimeout(timeoutId);
            callWithDelay(0);
      ***REMOVED***
        else {
            if (!wasTimeout) {
                cancelState = 1;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    callWithDelay(0);
    setTimeout(() => {
        hitTimeout = true;
        stop(true);
  ***REMOVED***, timeout);
    return stop;
***REMOVED***
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */
function stop(id) {
    id(false);
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @struct
 * @template T
 */
class NetworkRequest {
    constructor(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
        this.pendingXhr_ = null;
        this.backoffId_ = null;
        this.resolve_ = null;
        this.reject_ = null;
        this.canceled_ = false;
        this.appDelete_ = false;
        this.url_ = url;
        this.method_ = method;
        this.headers_ = headers;
        this.body_ = body;
        this.successCodes_ = successCodes.slice();
        this.additionalRetryCodes_ = additionalRetryCodes.slice();
        this.callback_ = callback;
        this.errorCallback_ = errorCallback;
        this.progressCallback_ = progressCallback;
        this.timeout_ = timeout;
        this.pool_ = pool;
        this.promise_ = new Promise((resolve, reject) => {
            this.resolve_ = resolve;
            this.reject_ = reject;
            this.start_();
      ***REMOVED***);
  ***REMOVED***
    /**
     * Actually starts the retry loop.
     */
    start_() {
        const self = this;
        function doTheRequest(backoffCallback, canceled) {
            if (canceled) {
                backoffCallback(false, new RequestEndStatus(false, null, true));
                return;
          ***REMOVED***
            const xhr = self.pool_.createXhrIo();
            self.pendingXhr_ = xhr;
            function progressListener(progressEvent) {
                const loaded = progressEvent.loaded;
                const total = progressEvent.lengthComputable ? progressEvent.total : -1;
                if (self.progressCallback_ !== null) {
                    self.progressCallback_(loaded, total);
              ***REMOVED***
          ***REMOVED***
            if (self.progressCallback_ !== null) {
                xhr.addUploadProgressListener(progressListener);
          ***REMOVED***
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            xhr
                .send(self.url_, self.method_, self.body_, self.headers_)
                .then((xhr) => {
                if (self.progressCallback_ !== null) {
                    xhr.removeUploadProgressListener(progressListener);
              ***REMOVED***
                self.pendingXhr_ = null;
                xhr = xhr;
                const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;
                const status = xhr.getStatus();
                if (!hitServer || self.isRetryStatusCode_(status)) {
                    const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;
                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                    return;
              ***REMOVED***
                const successCode = self.successCodes_.indexOf(status) !== -1;
                backoffCallback(true, new RequestEndStatus(successCode, xhr));
          ***REMOVED***);
      ***REMOVED***
        /**
         * @param requestWentThrough True if the request eventually went
         *     through, false if it hit the retry limit or was canceled.
         */
        function backoffDone(requestWentThrough, status) {
            const resolve = self.resolve_;
            const reject = self.reject_;
            const xhr = status.xhr;
            if (status.wasSuccessCode) {
                try {
                    const result = self.callback_(xhr, xhr.getResponseText());
                    if (isJustDef(result)) {
                        resolve(result);
                  ***REMOVED***
                    else {
                        resolve();
                  ***REMOVED***
              ***REMOVED***
                catch (e) {
                    reject(e);
              ***REMOVED***
          ***REMOVED***
            else {
                if (xhr !== null) {
                    const err = unknown();
                    err.setServerResponseProp(xhr.getResponseText());
                    if (self.errorCallback_) {
                        reject(self.errorCallback_(xhr, err));
                  ***REMOVED***
                    else {
                        reject(err);
                  ***REMOVED***
              ***REMOVED***
                else {
                    if (status.canceled) {
                        const err = self.appDelete_ ? appDeleted() : canceled();
                        reject(err);
                  ***REMOVED***
                    else {
                        const err = retryLimitExceeded();
                        reject(err);
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
        if (this.canceled_) {
            backoffDone(false, new RequestEndStatus(false, null, true));
      ***REMOVED***
        else {
            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
      ***REMOVED***
  ***REMOVED***
    /** @inheritDoc */
    getPromise() {
        return this.promise_;
  ***REMOVED***
    /** @inheritDoc */
    cancel(appDelete) {
        this.canceled_ = true;
        this.appDelete_ = appDelete || false;
        if (this.backoffId_ !== null) {
            stop(this.backoffId_);
      ***REMOVED***
        if (this.pendingXhr_ !== null) {
            this.pendingXhr_.abort();
      ***REMOVED***
  ***REMOVED***
    isRetryStatusCode_(status) {
        // The codes for which to retry came from this page:
        // https://cloud.google.com/storage/docs/exponential-backoff
        const isFiveHundredCode = status >= 500 && status < 600;
        const extraRetryCodes = [
            // Request Timeout: web server didn't receive full request in time.
            408,
            // Too Many Requests: you're getting rate-limited, basically.
            429
        ];
        const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
        const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
  ***REMOVED***
***REMOVED***
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled Defaults to false.
 * @struct
 */
class RequestEndStatus {
    constructor(wasSuccessCode, xhr, canceled) {
        this.wasSuccessCode = wasSuccessCode;
        this.xhr = xhr;
        this.canceled = !!canceled;
  ***REMOVED***
***REMOVED***
function addAuthHeader_(headers, authToken) {
    if (authToken !== null && authToken.length > 0) {
        headers['Authorization'] = 'Firebase ' + authToken;
  ***REMOVED***
***REMOVED***
function addVersionHeader_(headers) {
    const version = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';
    headers['X-Firebase-Storage-Version'] = 'webjs/' + version;
***REMOVED***
/**
 * @template T
 */
function makeRequest(requestInfo, authToken, pool) {
    const queryPart = makeQueryString(requestInfo.urlParams);
    const url = requestInfo.url + queryPart;
    const headers = Object.assign({***REMOVED***, requestInfo.headers);
    addAuthHeader_(headers, authToken);
    addVersionHeader_(headers);
    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A service that provides firebaseStorage.Reference instances.
 * @param opt_url gs:// url to a custom Storage Bucket
 *
 * @struct
 */
class Service {
    constructor(app, pool, url) {
        this.bucket_ = null;
        function maker(authWrapper, loc) {
            return new Reference(authWrapper, loc);
      ***REMOVED***
        this.authWrapper_ = new AuthWrapper(app, maker, makeRequest, this, pool);
        this.app_ = app;
        if (url != null) {
            this.bucket_ = Location.makeFromBucketSpec(url);
      ***REMOVED***
        else {
            const authWrapperBucket = this.authWrapper_.bucket();
            if (authWrapperBucket != null) {
                this.bucket_ = new Location(authWrapperBucket, '');
          ***REMOVED***
      ***REMOVED***
        this.internals_ = new ServiceInternals(this);
  ***REMOVED***
    /**
     * Returns a firebaseStorage.Reference for the given path in the default
     * bucket.
     */
    ref(path) {
        function validator(path) {
            if (typeof path !== 'string') {
                throw 'Path is not a string.';
          ***REMOVED***
            if (/^[A-Za-z]+:\/\//.test(path)) {
                throw 'Expected child path but got a URL, use refFromURL instead.';
          ***REMOVED***
      ***REMOVED***
        validate('ref', [stringSpec(validator, true)], arguments);
        if (this.bucket_ == null) {
            throw new Error('No Storage Bucket defined in Firebase Options.');
      ***REMOVED***
        const ref = new Reference(this.authWrapper_, this.bucket_);
        if (path != null) {
            return ref.child(path);
      ***REMOVED***
        else {
            return ref;
      ***REMOVED***
  ***REMOVED***
    /**
     * Returns a firebaseStorage.Reference object for the given absolute URL,
     * which must be a gs:// or http[s]:// URL.
     */
    refFromURL(url) {
        function validator(p) {
            if (typeof p !== 'string') {
                throw 'Path is not a string.';
          ***REMOVED***
            if (!/^[A-Za-z]+:\/\//.test(p)) {
                throw 'Expected full URL but got a child path, use ref instead.';
          ***REMOVED***
            try {
                Location.makeFromUrl(p);
          ***REMOVED***
            catch (e) {
                throw 'Expected valid full URL but got an invalid one.';
          ***REMOVED***
      ***REMOVED***
        validate('refFromURL', [stringSpec(validator, false)], arguments);
        return new Reference(this.authWrapper_, url);
  ***REMOVED***
    get maxUploadRetryTime() {
        return this.authWrapper_.maxUploadRetryTime();
  ***REMOVED***
    setMaxUploadRetryTime(time) {
        validate('setMaxUploadRetryTime', [nonNegativeNumberSpec()], arguments);
        this.authWrapper_.setMaxUploadRetryTime(time);
  ***REMOVED***
    setMaxOperationRetryTime(time) {
        validate('setMaxOperationRetryTime', [nonNegativeNumberSpec()], arguments);
        this.authWrapper_.setMaxOperationRetryTime(time);
  ***REMOVED***
    get app() {
        return this.app_;
  ***REMOVED***
    get INTERNAL() {
        return this.internals_;
  ***REMOVED***
***REMOVED***
/**
 * @struct
 */
class ServiceInternals {
    constructor(service) {
        this.service_ = service;
  ***REMOVED***
    /**
     * Called when the associated app is deleted.
     * @see {!fbs.AuthWrapper.prototype.deleteApp***REMOVED***
     */
    delete() {
        this.service_.authWrapper_.deleteApp();
        return Promise.resolve();
  ***REMOVED***
***REMOVED***

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Type constant for Firebase Storage.
 */
const STORAGE_TYPE = 'storage';
function factory(app, unused, url) {
    return new Service(app, new XhrIoPool(), url);
***REMOVED***
function registerStorage(instance) {
    const namespaceExports = {
        // no-inline
        TaskState,
        TaskEvent,
        StringFormat,
        Storage: Service,
        Reference
  ***REMOVED***
    instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, 
    // Allow multiple storage instances per app.
    true);
***REMOVED***
registerStorage(firebase);

export { registerStorage ***REMOVED***;
//# sourceMappingURL=index.esm2017.js.map
