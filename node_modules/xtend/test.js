var test = require("tape")
var extend = require("./")
var mutableExtend = require("./mutable")

test("merge", function(assert) {
    var a = { a: "foo" ***REMOVED***
    var b = { b: "bar" ***REMOVED***

    assert.deepEqual(extend(a, b), { a: "foo", b: "bar" ***REMOVED***)
    assert.end()
***REMOVED***)

test("replace", function(assert) {
    var a = { a: "foo" ***REMOVED***
    var b = { a: "bar" ***REMOVED***

    assert.deepEqual(extend(a, b), { a: "bar" ***REMOVED***)
    assert.end()
***REMOVED***)

test("undefined", function(assert) {
    var a = { a: undefined ***REMOVED***
    var b = { b: "foo" ***REMOVED***

    assert.deepEqual(extend(a, b), { a: undefined, b: "foo" ***REMOVED***)
    assert.deepEqual(extend(b, a), { a: undefined, b: "foo" ***REMOVED***)
    assert.end()
***REMOVED***)

test("handle 0", function(assert) {
    var a = { a: "default" ***REMOVED***
    var b = { a: 0 ***REMOVED***

    assert.deepEqual(extend(a, b), { a: 0 ***REMOVED***)
    assert.deepEqual(extend(b, a), { a: "default" ***REMOVED***)
    assert.end()
***REMOVED***)

test("is immutable", function (assert) {
    var record = {***REMOVED***

    extend(record, { foo: "bar" ***REMOVED***)
    assert.equal(record.foo, undefined)
    assert.end()
***REMOVED***)

test("null as argument", function (assert) {
    var a = { foo: "bar" ***REMOVED***
    var b = null
    var c = void 0

    assert.deepEqual(extend(b, a, c), { foo: "bar" ***REMOVED***)
    assert.end()
***REMOVED***)

test("mutable", function (assert) {
    var a = { foo: "bar" ***REMOVED***

    mutableExtend(a, { bar: "baz" ***REMOVED***)

    assert.equal(a.bar, "baz")
    assert.end()
***REMOVED***)

test("null prototype", function(assert) {
    var a = { a: "foo" ***REMOVED***
    var b = Object.create(null)
    b.b = "bar";

    assert.deepEqual(extend(a, b), { a: "foo", b: "bar" ***REMOVED***)
    assert.end()
***REMOVED***)

test("null prototype mutable", function (assert) {
    var a = { foo: "bar" ***REMOVED***
    var b = Object.create(null)
    b.bar = "baz";

    mutableExtend(a, b)

    assert.equal(a.bar, "baz")
    assert.end()
***REMOVED***)

test("prototype pollution", function (assert) {
    var a = {***REMOVED***
    var maliciousPayload = '{"__proto__":{"oops":"It works!"***REMOVED******REMOVED***'

    assert.strictEqual(a.oops, undefined)
    extend({***REMOVED***, maliciousPayload)
    assert.strictEqual(a.oops, undefined)
    assert.end()
***REMOVED***)

test("prototype pollution mutable", function (assert) {
    var a = {***REMOVED***
    var maliciousPayload = '{"__proto__":{"oops":"It works!"***REMOVED******REMOVED***'

    assert.strictEqual(a.oops, undefined)
    mutableExtend({***REMOVED***, maliciousPayload)
    assert.strictEqual(a.oops, undefined)
    assert.end()
***REMOVED***)
