/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number***REMOVED*** low The low (signed) 32 bits of the long
 * @param {number***REMOVED*** high The high (signed) 32 bits of the long
 * @param {boolean=***REMOVED*** unsigned Whether unsigned or not, defaults to `false` for signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number***REMOVED***
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number***REMOVED***
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean***REMOVED***
     */
    this.unsigned = !!unsigned;
***REMOVED***

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean***REMOVED***
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", {
    value: true,
    enumerable: false,
    configurable: false
***REMOVED***);

/**
 * @function
 * @param {****REMOVED*** obj Object
 * @returns {boolean***REMOVED***
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
***REMOVED***

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {****REMOVED*** obj Object
 * @returns {boolean***REMOVED***
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object***REMOVED***
 * @inner
 */
var INT_CACHE = {***REMOVED***;

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object***REMOVED***
 * @inner
 */
var UINT_CACHE = {***REMOVED***;

/**
 * @param {number***REMOVED*** value
 * @param {boolean=***REMOVED*** unsigned
 * @returns {!Long***REMOVED***
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
      ***REMOVED***
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
  ***REMOVED*** else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
      ***REMOVED***
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
  ***REMOVED***
***REMOVED***

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number***REMOVED*** value The 32 bit integer in question
 * @param {boolean=***REMOVED*** unsigned Whether unsigned or not, defaults to `false` for signed
 * @returns {!Long***REMOVED*** The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number***REMOVED*** value
 * @param {boolean=***REMOVED*** unsigned
 * @returns {!Long***REMOVED***
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value) || !isFinite(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
  ***REMOVED*** else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
  ***REMOVED***
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
***REMOVED***

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number***REMOVED*** value The number in question
 * @param {boolean=***REMOVED*** unsigned Whether unsigned or not, defaults to `false` for signed
 * @returns {!Long***REMOVED*** The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number***REMOVED*** lowBits
 * @param {number***REMOVED*** highBits
 * @param {boolean=***REMOVED*** unsigned
 * @returns {!Long***REMOVED***
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
***REMOVED***

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number***REMOVED*** lowBits The low 32 bits
 * @param {number***REMOVED*** highBits The high 32 bits
 * @param {boolean=***REMOVED*** unsigned Whether unsigned or not, defaults to `false` for signed
 * @returns {!Long***REMOVED*** The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number***REMOVED*** base
 * @param {number***REMOVED*** exponent
 * @returns {number***REMOVED***
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string***REMOVED*** str
 * @param {(boolean|number)=***REMOVED*** unsigned
 * @param {number=***REMOVED*** radix
 * @returns {!Long***REMOVED***
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') { 
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
  ***REMOVED*** else {
        unsigned = !! unsigned;
  ***REMOVED***
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
  ***REMOVED***

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
      ***REMOVED*** else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
      ***REMOVED***
  ***REMOVED***
    result.unsigned = unsigned;
    return result;
***REMOVED***

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string***REMOVED*** str The textual representation of the Long
 * @param {(boolean|number)=***REMOVED*** unsigned Whether unsigned or not, defaults to `false` for signed
 * @param {number=***REMOVED*** radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long***REMOVED*** The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean***REMOVED******REMOVED*** val
 * @returns {!Long***REMOVED***
 * @inner
 */
function fromValue(val) {
    if (val /* is compatible */ instanceof Long)
        return val;
    if (typeof val === 'number')
        return fromNumber(val);
    if (typeof val === 'string')
        return fromString(val);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, val.unsigned);
***REMOVED***

/**
 * Converts the specified value to a Long.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean***REMOVED******REMOVED*** val Value
 * @returns {!Long***REMOVED***
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number***REMOVED***
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number***REMOVED***
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number***REMOVED***
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number***REMOVED***
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number***REMOVED***
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long***REMOVED***
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long***REMOVED***
 */
Long.ZERO = ZERO;

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long***REMOVED***
 */
Long.UZERO = UZERO;

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long***REMOVED***
 */
Long.ONE = ONE;

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long***REMOVED***
 */
Long.UONE = UONE;

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long***REMOVED***
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long***REMOVED***
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long***REMOVED***
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long***REMOVED***
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long***REMOVED***
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number***REMOVED***
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
***REMOVED***;

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number***REMOVED***
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
***REMOVED***;

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=***REMOVED*** radix Radix (2-36), defaults to 10
 * @returns {string***REMOVED***
 * @override
 * @throws {RangeError***REMOVED*** If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
      ***REMOVED*** else
            return '-' + this.neg().toString(radix);
  ***REMOVED***

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
      ***REMOVED***
  ***REMOVED***
***REMOVED***;

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number***REMOVED*** Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
***REMOVED***;

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number***REMOVED*** Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
***REMOVED***;

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number***REMOVED*** Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
***REMOVED***;

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number***REMOVED*** Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
***REMOVED***;

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number***REMOVED***
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
***REMOVED***;

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean***REMOVED***
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
***REMOVED***;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean***REMOVED***
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
***REMOVED***;

/**
 * Tests if this Long's value is positive.
 * @returns {boolean***REMOVED***
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
***REMOVED***;

/**
 * Tests if this Long's value is odd.
 * @returns {boolean***REMOVED***
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
***REMOVED***;

/**
 * Tests if this Long's value is even.
 * @returns {boolean***REMOVED***
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
***REMOVED***;

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
***REMOVED***;

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
***REMOVED***;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
***REMOVED***;

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
***REMOVED***;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
***REMOVED***;

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
***REMOVED***;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {boolean***REMOVED***
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {number***REMOVED*** 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
***REMOVED***;

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** other Other value
 * @returns {number***REMOVED*** 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long***REMOVED*** Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
***REMOVED***;

/**
 * Negates this Long's value. This is an alias of {@link Long#negate***REMOVED***.
 * @function
 * @returns {!Long***REMOVED*** Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string***REMOVED*** addend Addend
 * @returns {!Long***REMOVED*** Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
***REMOVED***;

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string***REMOVED*** subtrahend Subtrahend
 * @returns {!Long***REMOVED*** Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
***REMOVED***;

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** subtrahend Subtrahend
 * @returns {!Long***REMOVED*** Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string***REMOVED*** multiplier Multiplier
 * @returns {!Long***REMOVED*** Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);
    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
  ***REMOVED*** else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
***REMOVED***;

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** multiplier Multiplier
 * @returns {!Long***REMOVED*** Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string***REMOVED*** divisor Divisor
 * @returns {!Long***REMOVED*** Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');
    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
              ***REMOVED*** else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
              ***REMOVED***
          ***REMOVED***
      ***REMOVED*** else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
      ***REMOVED*** else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
  ***REMOVED*** else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
  ***REMOVED***
        
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
      ***REMOVED***

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
  ***REMOVED***
    return res;
***REMOVED***;

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** divisor Divisor
 * @returns {!Long***REMOVED*** Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string***REMOVED*** divisor Divisor
 * @returns {!Long***REMOVED*** Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    return this.sub(this.div(divisor).mul(divisor));
***REMOVED***;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo***REMOVED***.
 * @function
 * @param {!Long|number|string***REMOVED*** divisor Divisor
 * @returns {!Long***REMOVED*** Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long***REMOVED***
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
***REMOVED***;

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string***REMOVED*** other Other Long
 * @returns {!Long***REMOVED***
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
***REMOVED***;

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string***REMOVED*** other Other Long
 * @returns {!Long***REMOVED***
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
***REMOVED***;

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string***REMOVED*** other Other Long
 * @returns {!Long***REMOVED***
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
***REMOVED***;

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long***REMOVED*** numBits Number of bits
 * @returns {!Long***REMOVED*** Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
***REMOVED***;

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft***REMOVED***.
 * @function
 * @param {number|!Long***REMOVED*** numBits Number of bits
 * @returns {!Long***REMOVED*** Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long***REMOVED*** numBits Number of bits
 * @returns {!Long***REMOVED*** Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
***REMOVED***;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight***REMOVED***.
 * @function
 * @param {number|!Long***REMOVED*** numBits Number of bits
 * @returns {!Long***REMOVED*** Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long***REMOVED*** numBits Number of bits
 * @returns {!Long***REMOVED*** Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
      ***REMOVED*** else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
  ***REMOVED***
***REMOVED***;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned***REMOVED***.
 * @function
 * @param {number|!Long***REMOVED*** numBits Number of bits
 * @returns {!Long***REMOVED*** Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long***REMOVED*** Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
***REMOVED***;

/**
 * Converts this Long to unsigned.
 * @returns {!Long***REMOVED*** Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
***REMOVED***;

/**
 * Converts this Long to its byte representation.
 * @param {boolean=***REMOVED*** le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>***REMOVED*** Byte representation
 */
LongPrototype.toBytes = function(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
***REMOVED***

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>***REMOVED*** Little endian byte representation
 */
LongPrototype.toBytesLE = function() {
    var hi = this.high,
        lo = this.low;
    return [
         lo         & 0xff,
        (lo >>>  8) & 0xff,
        (lo >>> 16) & 0xff,
        (lo >>> 24) & 0xff,
         hi         & 0xff,
        (hi >>>  8) & 0xff,
        (hi >>> 16) & 0xff,
        (hi >>> 24) & 0xff
    ];
***REMOVED***

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>***REMOVED*** Big endian byte representation
 */
LongPrototype.toBytesBE = function() {
    var hi = this.high,
        lo = this.low;
    return [
        (hi >>> 24) & 0xff,
        (hi >>> 16) & 0xff,
        (hi >>>  8) & 0xff,
         hi         & 0xff,
        (lo >>> 24) & 0xff,
        (lo >>> 16) & 0xff,
        (lo >>>  8) & 0xff,
         lo         & 0xff        
    ];
***REMOVED***
