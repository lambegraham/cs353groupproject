// http://www.rajdeepd.com/articles/chrome/localstrg/LocalStorageSample.htm

// NOTE:
// this varies from actual localStorage in some subtle ways

// also, there is no persistence
// TODO persist
(function () {
  "use strict";

  var fs = require('fs');

  function Storage(path, opts) {
    opts = opts || {***REMOVED***;
    var db;

    Object.defineProperty(this, '___priv_bk___', {
      value: {
        path: path
    ***REMOVED***
    , writable: false
    , enumerable: false
  ***REMOVED***);

    Object.defineProperty(this, '___priv_strict___', {
      value: !!opts.strict
    , writable: false
    , enumerable: false
  ***REMOVED***);

    Object.defineProperty(this, '___priv_ws___', {
      value: opts.ws || '  '
    , writable: false
    , enumerable: false
  ***REMOVED***);

    try {
      db = JSON.parse(fs.readFileSync(path));
  ***REMOVED*** catch(e) {
      db = {***REMOVED***;
  ***REMOVED***

    Object.keys(db).forEach(function (key) {
      this[key] = db[key];
  ***REMOVED***, this);
***REMOVED***

  Storage.prototype.getItem = function (key) {
    if (this.hasOwnProperty(key)) {
      if (this.___priv_strict___) {
        return String(this[key]);
    ***REMOVED*** else {
        return this[key];
    ***REMOVED***
  ***REMOVED***
    return null;
***REMOVED***

  Storage.prototype.setItem = function (key, val) {
    if (val === undefined) {
      this[key] = null;
  ***REMOVED*** else if (this.___priv_strict___) {
      this[key] = String(val);
  ***REMOVED*** else {
      this[key] = val;
  ***REMOVED***
    this.___save___();
***REMOVED***

  Storage.prototype.removeItem = function (key) {
    delete this[key];
    this.___save___();
***REMOVED***

  Storage.prototype.clear = function () {
    var self = this;
    // filters out prototype keys
    Object.keys(self).forEach(function (key) {
      self[key] = undefined;
      delete self[key];
  ***REMOVED***);
***REMOVED***

  Storage.prototype.key = function (i) {
    i = i || 0;
    return Object.keys(this)[i];
***REMOVED***

  Object.defineProperty(Storage.prototype, 'length', {
    get: function() {
      return Object.keys(this).length;
  ***REMOVED***
***REMOVED***);

  Storage.prototype.___save___ = function () {
    var self = this;

    if (!this.___priv_bk___.path) {
      return;
  ***REMOVED***

    if (this.___priv_bk___.lock) {
      this.___priv_bk___.wait = true;
      return;
  ***REMOVED***

    this.___priv_bk___.lock = true;
    fs.writeFile(
      this.___priv_bk___.path
    , JSON.stringify(this, null, this.___priv_ws___)
    , 'utf8'
    , function (e) {
      self.___priv_bk___.lock = false;
      if (e) {
        console.error('Could not write to database', self.___priv_bk___.path);
        console.error(e);
        return;
    ***REMOVED***
      if (self.___priv_bk___.wait) {
        self.___priv_bk___.wait = false;
        self.___save___();
    ***REMOVED***
  ***REMOVED***);
***REMOVED***

  Object.defineProperty(Storage, 'create', {
    value: function (path, opts) {
      return new Storage(path, opts);
  ***REMOVED***
  , writable: false
  , enumerable: false
***REMOVED***);

  module.exports = Storage;
***REMOVED***());
