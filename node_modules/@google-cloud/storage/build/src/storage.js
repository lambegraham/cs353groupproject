"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const common_1 = require("@google-cloud/common");
const paginator_1 = require("@google-cloud/paginator");
const promisify_1 = require("@google-cloud/promisify");
const arrify = require("arrify");
const bucket_1 = require("./bucket");
const channel_1 = require("./channel");
const file_1 = require("./file");
const util_1 = require("./util");
const hmacKey_1 = require("./hmacKey");
/*! Developer Documentation
 *
 * Invoke this method to create a new Storage object bound with pre-determined
 * configuration options. For each object that can be created (e.g., a bucket),
 * there is an equivalent static and instance method. While they are classes,
 * they can be instantiated without use of the `new` keyword.
 */
/**
 * <h4>ACLs</h4>
 * Cloud Storage uses access control lists (ACLs) to manage object and
 * bucket access. ACLs are the mechanism you use to share files with other users
 * and allow other users to access your buckets and files.
 *
 * To learn more about ACLs, read this overview on
 * [Access Control](https://cloud.google.com/storage/docs/access-control).
 *
 * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview***REMOVED***
 * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control***REMOVED***
 *
 * @class
 */
class Storage extends common_1.Service {
    /**
     * @typedef {object***REMOVED*** StorageOptions
     * @property {string***REMOVED*** [projectId] The project ID from the Google Developer's
     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment
     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running
     * in an environment which supports {@link
     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application
     * Application Default Credentials***REMOVED***, your project ID will be detected
     * automatically.
     * @property {string***REMOVED*** [keyFilename] Full path to the a .json, .pem, or .p12 key
     *     downloaded from the Google Developers Console. If you provide a path to
     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and
     *     .p12 require you to specify the `email` option as well.
     * @property {string***REMOVED*** [email] Account email address. Required when using a .pem
     *     or .p12 keyFilename.
     * @property {object***REMOVED*** [credentials] Credentials object.
     * @property {string***REMOVED*** [credentials.client_email]
     * @property {string***REMOVED*** [credentials.private_key]
     * @property {boolean***REMOVED*** [autoRetry=true] Automatically retry requests if the
     *     response is related to rate limits or certain intermittent server
     * errors. We will exponentially backoff subsequent requests by default.
     * @property {number***REMOVED*** [maxRetries=3] Maximum number of automatic retries
     *     attempted before returning the error.
     * @property {Constructor***REMOVED*** [promise] Custom promise module to use instead of
     *     native Promises.
     */
    /**
     * Constructs the Storage client.
     *
     * @example <caption>Create a client that uses Application Default Credentials
     * (ADC)</caption> const {Storage***REMOVED*** = require('@google-cloud/storage'); const
     * storage = new Storage();
     *
     * @example <caption>Create a client with explicit credentials</caption>
     * storage');/storage');
     * const storage = new Storage({
     *   projectId: 'your-project-id',
     *   keyFilename: '/path/to/keyfile.json'
     * ***REMOVED***);
     *
     * @param {StorageOptions***REMOVED*** [options] Configuration options.
     */
    constructor(options = {***REMOVED***) {
        options.apiEndpoint = options.apiEndpoint || 'storage.googleapis.com';
        const url = process.env.STORAGE_EMULATOR_HOST ||
            `https://${options.apiEndpoint***REMOVED***/storage/v1`;
        ***REMOVED***
            apiEndpoint: options.apiEndpoint,
            baseUrl: url,
            projectIdRequired: false,
            scopes: [
                'https://www.googleapis.com/auth/iam',
                'https://www.googleapis.com/auth/cloud-platform',
                'https://www.googleapis.com/auth/devstorage.full_control',
            ],
            packageJson: require('../../package.json'),
      ***REMOVED***
        super(config, options);
        /**
         * Reference to {@link Storage.acl***REMOVED***.
         *
         * @name Storage#acl
         * @see Storage.acl
         */
        this.acl = Storage.acl;
        this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');
        this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');
  ***REMOVED***
    /**
     * Get a reference to a Cloud Storage bucket.
     *
     * @param {string***REMOVED*** name Name of the bucket.
     * @param {object***REMOVED*** [options] Configuration object.
     * @param {string***REMOVED*** [options.kmsKeyName] A Cloud KMS key that will be used to
     *     encrypt objects inserted into this bucket, if no encryption method is
     *     specified.
     * @param {string***REMOVED*** [options.userProject] User project to be billed for all
     *     requests made from this Bucket object.
     * @returns {Bucket***REMOVED***
     * @see Bucket
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const albums = storage.bucket('albums');
     * const photos = storage.bucket('photos');
     */
    bucket(name, options) {
        if (!name) {
            throw new Error('A bucket name is needed to use Cloud Storage.');
      ***REMOVED***
        return new bucket_1.Bucket(this, name, options);
  ***REMOVED***
    /**
     * Reference a channel to receive notifications about changes to your bucket.
     *
     * @param {string***REMOVED*** id The ID of the channel.
     * @param {string***REMOVED*** resourceId The resource ID of the channel.
     * @returns {Channel***REMOVED***
     * @see Channel
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const channel = storage.channel('id', 'resource-id');
     */
    channel(id, resourceId) {
        return new channel_1.Channel(this, id, resourceId);
  ***REMOVED***
    /**
     * @typedef {array***REMOVED*** CreateBucketResponse
     * @property {Bucket***REMOVED*** 0 The new {@link Bucket***REMOVED***.
     * @property {object***REMOVED*** 1 The full API response.
     */
    /**
     * @callback CreateBucketCallback
     * @param {?Error***REMOVED*** err Request error, if any.
     * @param {Bucket***REMOVED*** bucket The new {@link Bucket***REMOVED***.
     * @param {object***REMOVED*** apiResponse The full API response.
     */
    /**
     * Metadata to set for the bucket.
     *
     * @typedef {object***REMOVED*** CreateBucketRequest
     * @property {boolean***REMOVED*** [coldline=false] Specify the storage class as Coldline.
     * @property {boolean***REMOVED*** [dra=false] Specify the storage class as Durable Reduced
     *     Availability.
     * @property {boolean***REMOVED*** [multiRegional=false] Specify the storage class as
     *     Multi-Regional.
     * @property {boolean***REMOVED*** [nearline=false] Specify the storage class as Nearline.
     * @property {boolean***REMOVED*** [regional=false] Specify the storage class as Regional.
     * @property {boolean***REMOVED*** [requesterPays=false] **Early Access Testers Only**
     *     Force the use of the User Project metadata field to assign operational
     *     costs when an operation is made on a Bucket and its objects.
     * @property {boolean***REMOVED*** [standard=true] Specify the storage class as Standard.
     * @property {string***REMOVED*** [userProject] The ID of the project which will be billed
     *     for the request.
     */
    /**
     * Create a bucket.
     *
     * Cloud Storage uses a flat namespace, so you can't create a bucket with
     * a name that is already in use. For more information, see
     * [Bucket Naming
     * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).
     *
     * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert***REMOVED***
     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes***REMOVED***
     *
     * @param {string***REMOVED*** name Name of the bucket to create.
     * @param {CreateBucketRequest***REMOVED*** [metadata] Metadata to set for the bucket.
     * @param {CreateBucketCallback***REMOVED*** [callback] Callback function.
     * @returns {Promise<CreateBucketResponse>***REMOVED***
     * @throws {Error***REMOVED*** If a name is not provided.
     * @see Bucket#create
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const callback = function(err, bucket, apiResponse) {
     *   // `bucket` is a Bucket object.
     * ***REMOVED***;
     *
     * storage.createBucket('new-bucket', callback);
     *
     * //-
     * // Create a bucket in a specific location and region. <em>See the <a
     * // href="https://cloud.google.com/storage/docs/json_api/v1/buckets/insert">
     * // Official JSON API docs</a> for complete details on the `location`
     * option.
     * // </em>
     * //-
     * const metadata = {
     *   location: 'US-CENTRAL1',
     *   regional: true
     * ***REMOVED***;
     *
     * storage.createBucket('new-bucket', metadata, callback);
     *
     * //-
     * // Create a bucket with a retention policy of 6 months.
     * //-
     * const metadata = {
     *   retentionPolicy: {
     *     retentionPeriod: 15780000 // 6 months in seconds.
     * ***REMOVED***
     * ***REMOVED***;
     *
     * storage.createBucket('new-bucket', metadata, callback);
     *
     * //-
     * // Enable versioning on a new bucket.
     * //-
     * const metadata = {
     *   versioning: {
     *     enabled: true
     * ***REMOVED***
     * ***REMOVED***;
     *
     * storage.createBucket('new-bucket', metadata, callback);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * storage.createBucket('new-bucket').then(function(data) {
     *   const bucket = data[0];
     *   const apiResponse = data[1];
     * ***REMOVED***);
     *
     * @example <caption>include:samples/buckets.js</caption>
     * region_tag:storage_create_bucket
     * Another example:
     */
    createBucket(name, metadataOrCallback, callback) {
        if (!name) {
            throw new Error('A name is required to create a bucket.');
      ***REMOVED***
        let metadata;
        if (!callback) {
            callback = metadataOrCallback;
            metadata = {***REMOVED***;
      ***REMOVED***
        else {
            metadata = metadataOrCallback;
      ***REMOVED***
        const body = Object.assign({***REMOVED***, metadata, { name ***REMOVED***);
        const storageClasses = {
            coldline: 'COLDLINE',
            dra: 'DURABLE_REDUCED_AVAILABILITY',
            multiRegional: 'MULTI_REGIONAL',
            nearline: 'NEARLINE',
            regional: 'REGIONAL',
            standard: 'STANDARD',
      ***REMOVED***
        Object.keys(storageClasses).forEach(storageClass => {
            if (body[storageClass]) {
                body.storageClass = storageClasses[storageClass];
                delete body[storageClass];
          ***REMOVED***
      ***REMOVED***);
        if (body.requesterPays) {
            body.billing = {
                requesterPays: body.requesterPays,
          ***REMOVED***
            delete body.requesterPays;
      ***REMOVED***
        const query = {
            project: this.projectId,
      ***REMOVED***
        if (body.userProject) {
            query.userProject = body.userProject;
            delete body.userProject;
      ***REMOVED***
        this.request({
            method: 'POST',
            uri: '/b',
            qs: query,
            json: body,
      ***REMOVED***, (err, resp) => {
            if (err) {
                callback(err, null, resp);
                return;
          ***REMOVED***
            const bucket = this.bucket(name);
            bucket.metadata = resp;
            callback(null, bucket, resp);
      ***REMOVED***);
  ***REMOVED***
    /**
     * @typedef {object***REMOVED*** CreateHmacKeyOptions
     * @property {string***REMOVED*** [projectId] The project ID of the project that owns
     *     the service account of the requested HMAC key. If not provided,
     *     the project ID used to instantiate the Storage client will be used.
     * @property {string***REMOVED*** [userProject] This parameter is currently ignored.
     */
    /**
     * @typedef {object***REMOVED*** HmacKeyMetadata
     * @property {string***REMOVED*** accessId The access id identifies which HMAC key was
     *     used to sign a request when authenticating with HMAC.
     * @property {string***REMOVED*** etag Used to perform a read-modify-write of the key.
     * @property {string***REMOVED*** id The resource name of the HMAC key.
     * @property {string***REMOVED*** projectId The project ID.
     * @property {string***REMOVED*** serviceAccountEmail The service account's email this
     *     HMAC key is created for.
     * @property {string***REMOVED*** state The state of this HMAC key. One of "ACTIVE",
     *     "INACTIVE" or "DELETED".
     * @property {string***REMOVED*** timeCreated The creation time of the HMAC key in
     *     RFC 3339 format.
     * @property {string***REMOVED*** [updated] The time this HMAC key was last updated in
     *     RFC 3339 format.
     */
    /**
     * @typedef {array***REMOVED*** CreateHmacKeyResponse
     * @property {HmacKey***REMOVED*** 0 The HmacKey instance created from API response.
     * @property {string***REMOVED*** 1 The HMAC key's secret used to access the XML API.
     * @property {object***REMOVED*** 3 The raw API response.
     */
    /**
     * @callback CreateHmacKeyCallback Callback function.
     * @param {?Error***REMOVED*** err Request error, if any.
     * @param {HmacKey***REMOVED*** hmacKey The HmacKey instance created from API response.
     * @param {string***REMOVED*** secret The HMAC key's secret used to access the XML API.
     * @param {object***REMOVED*** apiResponse The raw API response.
     */
    /**
     * Create an HMAC key associated with an service account to authenticate
     * requests to the Cloud Storage XML API.
     *
     * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys***REMOVED***
     *
     * @param {string***REMOVED*** serviceAccountEmail The service account's email address
     *     with which the HMAC key is created for.
     * @param {CreateHmacKeyCallback***REMOVED*** [callback] Callback function.
     * @return {Promise<CreateHmacKeyResponse>***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('google-cloud/storage');
     * const storage = new Storage();
     *
     * // Replace with your service account's email address
     * const serviceAccountEmail =
     *   'my-service-account@appspot.gserviceaccount.com';
     *
     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {
     *   if (!err) {
     *     // Securely store the secret for use with the XML API.
     * ***REMOVED***
     * ***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * storage.createHmacKey(serviceAccountEmail)
     *   .then((response) => {
     *     const hmacKey = response[0];
     *     const secret = response[1];
     *     // Securely store the secret for use with the XML API.
     * ***REMOVED***);
     */
    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {
        if (typeof serviceAccountEmail !== 'string') {
            throw new Error('The first argument must be a service account email to create an HMAC key.');
      ***REMOVED***
        const { options, callback ***REMOVED*** = util_1.normalize(optionsOrCb, cb);
        const query = Object.assign({***REMOVED***, options, { serviceAccountEmail ***REMOVED***);
        const projectId = query.projectId || this.projectId;
        delete query.projectId;
        this.request({
            method: 'POST',
            uri: `/projects/${projectId***REMOVED***/hmacKeys`,
            qs: query,
      ***REMOVED***, (err, resp) => {
            if (err) {
                callback(err, null, null, resp);
                return;
          ***REMOVED***
            const metadata = resp.metadata;
            const hmacKey = this.hmacKey(metadata.accessId, {
                projectId: metadata.projectId,
          ***REMOVED***);
            hmacKey.metadata = resp.metadata;
            callback(null, hmacKey, resp.secret, resp);
      ***REMOVED***);
  ***REMOVED***
    /**
     * Query object for listing buckets.
     *
     * @typedef {object***REMOVED*** GetBucketsRequest
     * @property {boolean***REMOVED*** [autoPaginate=true] Have pagination handled
     *     automatically.
     * @property {number***REMOVED*** [maxApiCalls] Maximum number of API calls to make.
     * @property {number***REMOVED*** [maxResults] Maximum number of items plus prefixes to
     *     return.
     * @property {string***REMOVED*** [pageToken] A previously-returned page token
     *     representing part of the larger set of results to view.
     * @property {string***REMOVED*** [userProject] The ID of the project which will be billed
     *     for the request.
     */
    /**
     * @typedef {array***REMOVED*** GetBucketsResponse
     * @property {Bucket[]***REMOVED*** 0 Array of {@link Bucket***REMOVED*** instances.
     */
    /**
     * @callback GetBucketsCallback
     * @param {?Error***REMOVED*** err Request error, if any.
     * @param {Bucket[]***REMOVED*** buckets Array of {@link Bucket***REMOVED*** instances.
     */
    /**
     * Get Bucket objects for all of the buckets in your project.
     *
     * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list***REMOVED***
     *
     * @param {GetBucketsRequest***REMOVED*** [query] Query object for listing buckets.
     * @param {GetBucketsCallback***REMOVED*** [callback] Callback function.
     * @returns {Promise<GetBucketsResponse>***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * storage.getBuckets(function(err, buckets) {
     *   if (!err) {
     *     // buckets is an array of Bucket objects.
     * ***REMOVED***
     * ***REMOVED***);
     *
     * //-
     * // To control how many API requests are made and page through the results
     * // manually, set `autoPaginate` to `false`.
     * //-
     * const callback = function(err, buckets, nextQuery, apiResponse) {
     *   if (nextQuery) {
     *     // More results exist.
     *     storage.getBuckets(nextQuery, callback);
     * ***REMOVED***
     *
     *   // The `metadata` property is populated for you with the metadata at the
     *   // time of fetching.
     *   buckets[0].metadata;
     *
     *   // However, in cases where you are concerned the metadata could have
     *   // changed, use the `getMetadata` method.
     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {***REMOVED***);
     * ***REMOVED***;
     *
     * storage.getBuckets({
     *   autoPaginate: false
     * ***REMOVED***, callback);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * storage.getBuckets().then(function(data) {
     *   const buckets = data[0];
     * ***REMOVED***);
     *
     * @example <caption>include:samples/buckets.js</caption>
     * region_tag:storage_list_buckets
     * Another example:
     */
    getBuckets(optionsOrCallback, cb) {
        const { options, callback ***REMOVED*** = util_1.normalize(optionsOrCallback, cb);
        options.project = options.project || this.projectId;
        this.request({
            uri: '/b',
            qs: options,
      ***REMOVED***, (err, resp) => {
            if (err) {
                callback(err, null, null, resp);
                return;
          ***REMOVED***
            const buckets = arrify(resp.items).map((bucket) => {
                const bucketInstance = this.bucket(bucket.id);
                bucketInstance.metadata = bucket;
                return bucketInstance;
          ***REMOVED***);
            const nextQuery = resp.nextPageToken
                ? Object.assign({***REMOVED***, options, { pageToken: resp.nextPageToken ***REMOVED***)
                : null;
            callback(null, buckets, nextQuery, resp);
      ***REMOVED***);
  ***REMOVED***
    getHmacKeys(optionsOrCb, cb) {
        const { options, callback ***REMOVED*** = util_1.normalize(optionsOrCb, cb);
        const query = Object.assign({***REMOVED***, options);
        const projectId = query.projectId || this.projectId;
        delete query.projectId;
        this.request({
            uri: `/projects/${projectId***REMOVED***/hmacKeys`,
            qs: query,
      ***REMOVED***, (err, resp) => {
            if (err) {
                callback(err, null, null, resp);
                return;
          ***REMOVED***
            const hmacKeys = arrify(resp.items).map((hmacKey) => {
                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {
                    projectId: hmacKey.projectId,
              ***REMOVED***);
                hmacKeyInstance.metadata = hmacKey;
                return hmacKeyInstance;
          ***REMOVED***);
            const nextQuery = resp.nextPageToken
                ? Object.assign({***REMOVED***, options, { pageToken: resp.nextPageToken ***REMOVED***)
                : null;
            callback(null, hmacKeys, nextQuery, resp);
      ***REMOVED***);
  ***REMOVED***
    /**
     * @typedef {array***REMOVED*** GetServiceAccountResponse
     * @property {object***REMOVED*** 0 The service account resource.
     * @property {object***REMOVED*** 1 The full
     * [API
     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).
     */
    /**
     * @callback GetServiceAccountCallback
     * @param {?Error***REMOVED*** err Request error, if any.
     * @param {object***REMOVED*** serviceAccount The serviceAccount resource.
     * @param {string***REMOVED*** serviceAccount.emailAddress The service account email
     *     address.
     * @param {object***REMOVED*** apiResponse The full
     * [API
     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).
     */
    /**
     * Get the email address of this project's Google Cloud Storage service
     * account.
     *
     * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get***REMOVED***
     * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource***REMOVED***
     *
     * @param {object***REMOVED*** [options] Configuration object.
     * @param {string***REMOVED*** [options.userProject] User project to be billed for this
     *     request.
     * @param {GetServiceAccountCallback***REMOVED*** [callback] Callback function.
     * @returns {Promise<GetServiceAccountResponse>***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     *
     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {
     *   if (!err) {
     *     const serviceAccountEmail = serviceAccount.emailAddress;
     * ***REMOVED***
     * ***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * storage.getServiceAccount().then(function(data) {
     *   const serviceAccountEmail = data[0].emailAddress;
     *   const apiResponse = data[1];
     * ***REMOVED***);
     */
    getServiceAccount(optionsOrCallback, cb) {
        const { options, callback ***REMOVED*** = util_1.normalize(optionsOrCallback, cb);
        this.request({
            uri: `/projects/${this.projectId***REMOVED***/serviceAccount`,
            qs: options,
      ***REMOVED***, (err, resp) => {
            if (err) {
                callback(err, null, resp);
                return;
          ***REMOVED***
            const camelCaseResponse = {***REMOVED***;
            for (const prop in resp) {
                if (resp.hasOwnProperty(prop)) {
                    const camelCaseProp = prop.replace(/_(\w)/g, (_, match) => match.toUpperCase());
                    camelCaseResponse[camelCaseProp] = resp[prop];
              ***REMOVED***
          ***REMOVED***
            callback(null, camelCaseResponse, resp);
      ***REMOVED***);
  ***REMOVED***
    /**
     * Get a reference to an HmacKey object.
     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to
     * retrieve and populate the metadata.
     *
     * To get a reference to an HMAC key that's not created for a service
     * account in the same project used to instantiate the Storage client,
     * supply the project's ID as `projectId` in the `options` argument.
     *
     * @param {string***REMOVED*** accessId The HMAC key's access ID.
     * @param {HmacKeyOptions***REMOVED*** options HmacKey constructor owptions.
     * @returns {HmacKey***REMOVED***
     * @see HmacKey
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const hmacKey = storage.hmacKey('ACCESS_ID');
     */
    hmacKey(accessId, options) {
        if (!accessId) {
            throw new Error('An access ID is needed to create an HmacKey object.');
      ***REMOVED***
        return new hmacKey_1.HmacKey(this, accessId, options);
  ***REMOVED***
***REMOVED***
exports.Storage = Storage;
/**
 * {@link Bucket***REMOVED*** class.
 *
 * @name Storage.Bucket
 * @see Bucket
 * @type {Constructor***REMOVED***
 */
Storage.Bucket = bucket_1.Bucket;
/**
 * {@link Channel***REMOVED*** class.
 *
 * @name Storage.Channel
 * @see Channel
 * @type {Constructor***REMOVED***
 */
Storage.Channel = channel_1.Channel;
/**
 * {@link File***REMOVED*** class.
 *
 * @name Storage.File
 * @see File
 * @type {Constructor***REMOVED***
 */
Storage.File = file_1.File;
/**
 * {@link HmacKey***REMOVED*** class.
 *
 * @name Storage.HmacKey
 * @see HmacKey
 * @type {Constructor***REMOVED***
 */
Storage.HmacKey = hmacKey_1.HmacKey;
/**
 * Cloud Storage uses access control lists (ACLs) to manage object and
 * bucket access. ACLs are the mechanism you use to share objects with other
 * users and allow other users to access your buckets and objects.
 *
 * This object provides constants to refer to the three permission levels that
 * can be granted to an entity:
 *
 *   - `gcs.acl.OWNER_ROLE` - ("OWNER")
 *   - `gcs.acl.READER_ROLE` - ("READER")
 *   - `gcs.acl.WRITER_ROLE` - ("WRITER")
 *
 * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists***REMOVED***
 *
 * @name Storage.acl
 * @type {object***REMOVED***
 * @property {string***REMOVED*** OWNER_ROLE
 * @property {string***REMOVED*** READER_ROLE
 * @property {string***REMOVED*** WRITER_ROLE
 *
 * @example
 * const {Storage***REMOVED*** = require('@google-cloud/storage');
 * const storage = new Storage();
 * const albums = storage.bucket('albums');
 *
 * //-
 * // Make all of the files currently in a bucket publicly readable.
 * //-
 * const options = {
 *   entity: 'allUsers',
 *   role: storage.acl.READER_ROLE
 * ***REMOVED***;
 *
 * albums.acl.add(options, function(err, aclObject) {***REMOVED***);
 *
 * //-
 * // Make any new objects added to a bucket publicly readable.
 * //-
 * albums.acl.default.add(options, function(err, aclObject) {***REMOVED***);
 *
 * //-
 * // Grant a user ownership permissions to a bucket.
 * //-
 * albums.acl.add({
 *   entity: 'user-useremail@example.com',
 *   role: storage.acl.OWNER_ROLE
 * ***REMOVED***, function(err, aclObject) {***REMOVED***);
 *
 * //-
 * // If the callback is omitted, we'll return a Promise.
 * //-
 * albums.acl.add(options).then(function(data) {
 *   const aclObject = data[0];
 *   const apiResponse = data[1];
 * ***REMOVED***);
 */
Storage.acl = {
    OWNER_ROLE: 'OWNER',
    READER_ROLE: 'READER',
    WRITER_ROLE: 'WRITER',
***REMOVED***;
/*! Developer Documentation
 *
 * These methods can be auto-paginated.
 */
paginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);
/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
promisify_1.promisifyAll(Storage, {
    exclude: ['bucket', 'channel', 'hmacKey'],
***REMOVED***);
//# sourceMappingURL=storage.js.map