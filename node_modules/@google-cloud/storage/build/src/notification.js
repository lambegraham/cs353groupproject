"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const common_1 = require("@google-cloud/common");
const promisify_1 = require("@google-cloud/promisify");
/**
 * A Notification object is created from your {@link Bucket***REMOVED*** object using
 * {@link Bucket#notification***REMOVED***. Use it to interact with Cloud Pub/Sub
 * notifications.
 *
 * @see [Cloud Pub/Sub Notifications for Google Cloud Storage]{@link https://cloud.google.com/storage/docs/pubsub-notifications***REMOVED***
 *
 * @class
 * @hideconstructor
 *
 * @param {Bucket***REMOVED*** bucket The bucket instance this notification is attached to.
 * @param {string***REMOVED*** id The ID of the notification.
 *
 * @example
 * const {Storage***REMOVED*** = require('@google-cloud/storage');
 * const storage = new Storage();
 * const myBucket = storage.bucket('my-bucket');
 *
 * const notification = myBucket.notification('1');
 */
class Notification extends common_1.ServiceObject {
    constructor(bucket, id) {
        const methods = {
            /**
             * Creates a notification subscription for the bucket.
             *
             * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert***REMOVED***
             * @method Notification#exists
             *
             * @param {Topic|string***REMOVED*** topic The Cloud PubSub topic to which this
             *     subscription publishes. If the project ID is omitted, the current
             *     project ID will be used.
             *
             *     Acceptable formats are:
             *     - `projects/grape-spaceship-123/topics/my-topic`
             *
             *     - `my-topic`
             * @param {CreateNotificationRequest***REMOVED*** [options] Metadata to set for
             *     the notification.
             * @param {CreateNotificationCallback***REMOVED*** [callback] Callback function.
             * @returns {Promise<CreateNotificationResponse>***REMOVED***
             * @throws {Error***REMOVED*** If a valid topic is not provided.
             *
             * @example
             * const {Storage***REMOVED*** = require('@google-cloud/storage');
             * const storage = new Storage();
             * const myBucket = storage.bucket('my-bucket');
             * const notification = myBucket.notification('1');
             *
             * notification.create(function(err, notification, apiResponse) {
             *   if (!err) {
             *     // The notification was created successfully.
             * ***REMOVED***
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, we'll return a Promise.
             * //-
             * notification.create().then(function(data) {
             *   const notification = data[0];
             *   const apiResponse = data[1];
             * ***REMOVED***);
             */
            create: true,
            /**
             * @typedef {array***REMOVED*** NotificationExistsResponse
             * @property {boolean***REMOVED*** 0 Whether the notification exists or not.
             */
            /**
             * @callback NotificationExistsCallback
             * @param {?Error***REMOVED*** err Request error, if any.
             * @param {boolean***REMOVED*** exists Whether the notification exists or not.
             */
            /**
             * Check if the notification exists.
             *
             * @method Notification#exists
             * @param {NotificationExistsCallback***REMOVED*** [callback] Callback function.
             * @returns {Promise<NotificationExistsResponse>***REMOVED***
             *
             * @example
             * const {Storage***REMOVED*** = require('@google-cloud/storage');
             * const storage = new Storage();
             * const myBucket = storage.bucket('my-bucket');
             * const notification = myBucket.notification('1');
             *
             * notification.exists(function(err, exists) {***REMOVED***);
             *
             * //-
             * // If the callback is omitted, we'll return a Promise.
             * //-
             * notification.exists().then(function(data) {
             *   const exists = data[0];
             * ***REMOVED***);
             */
            exists: true,
      ***REMOVED***
        super({
            parent: bucket,
            baseUrl: '/notificationConfigs',
            id: id.toString(),
            createMethod: bucket.createNotification.bind(bucket),
            methods,
      ***REMOVED***);
  ***REMOVED***
    /**
     * @typedef {array***REMOVED*** DeleteNotificationResponse
     * @property {object***REMOVED*** 0 The full API response.
     */
    /**
     * Permanently deletes a notification subscription.
     *
     * @see [Notifications: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete***REMOVED***
     *
     * @param {object***REMOVED*** [options] Configuration options.
     * @param {string***REMOVED*** [options.userProject] The ID of the project which will be
     *     billed for the request.
     * @param {DeleteNotificationCallback***REMOVED*** [callback] Callback function.
     * @returns {Promise<DeleteNotificationResponse>***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const myBucket = storage.bucket('my-bucket');
     * const notification = myBucket.notification('1');
     *
     * notification.delete(function(err, apiResponse) {***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * notification.delete().then(function(data) {
     *   const apiResponse = data[0];
     * ***REMOVED***);
     *
     * @example <caption>include:samples/notifications.js</caption>
     * region_tag:storage_delete_notification
     * Another example:
     */
    delete(optionsOrCallback, callback) {
        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {***REMOVED***;
        callback =
            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;
        this.request({
            method: 'DELETE',
            uri: '',
            qs: options,
      ***REMOVED***, callback || common_1.util.noop);
  ***REMOVED***
    /**
     * Get a notification and its metadata if it exists.
     *
     * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get***REMOVED***
     *
     * @param {object***REMOVED*** [options] Configuration options.
     *     See {@link Bucket#createNotification***REMOVED*** for create options.
     * @param {boolean***REMOVED*** [options.autoCreate] Automatically create the object if
     *     it does not exist. Default: `false`.
     * @param {string***REMOVED*** [options.userProject] The ID of the project which will be
     *     billed for the request.
     * @param {GetNotificationCallback***REMOVED*** [callback] Callback function.
     * @return {Promise<GetNotificationCallback>***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const myBucket = storage.bucket('my-bucket');
     * const notification = myBucket.notification('1');
     *
     * notification.get(function(err, notification, apiResponse) {
     *   // `notification.metadata` has been populated.
     * ***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * notification.get().then(function(data) {
     *   const notification = data[0];
     *   const apiResponse = data[1];
     * ***REMOVED***);
     */
    get(optionsOrCallback, callback) {
        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {***REMOVED***;
        callback =
            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;
        const autoCreate = options.autoCreate;
        delete options.autoCreate;
        const onCreate = (err, notification, apiResponse) => {
            if (err) {
                if (err.code === 409) {
                    this.get(options, callback);
                    return;
              ***REMOVED***
                callback(err, null, apiResponse);
                return;
          ***REMOVED***
            callback(null, notification, apiResponse);
      ***REMOVED***
        this.getMetadata(options, (err, metadata) => {
            if (err) {
                if (err.code === 404 && autoCreate) {
                    const args = [];
                    if (Object.keys(options).length > 0) {
                        args.push(options);
                  ***REMOVED***
                    args.push(onCreate);
                    // tslint:disable-next-line no-any
                    this.create.apply(this, args);
                    return;
              ***REMOVED***
                callback(err, null, metadata);
                return;
          ***REMOVED***
            callback(null, this, metadata);
      ***REMOVED***);
  ***REMOVED***
    /**
     * Get the notification's metadata.
     *
     * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get***REMOVED***
     *
     * @param {object***REMOVED*** [options] Configuration options.
     * @param {string***REMOVED*** [options.userProject] The ID of the project which will be
     *     billed for the request.
     * @param {GetNotificationMetadataCallback***REMOVED*** [callback] Callback function.
     * @returns {Promise<GetNotificationMetadataResponse>***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const myBucket = storage.bucket('my-bucket');
     * const notification = myBucket.notification('1');
     *
     * notification.getMetadata(function(err, metadata, apiResponse) {***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * notification.getMetadata().then(function(data) {
     *   const metadata = data[0];
     *   const apiResponse = data[1];
     * ***REMOVED***);
     *
     * @example <caption>include:samples/notifications.js</caption>
     * region_tag:storage_notifications_get_metadata
     * Another example:
     */
    getMetadata(optionsOrCallback, callback) {
        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {***REMOVED***;
        callback =
            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;
        this.request({
            uri: '',
            qs: options,
      ***REMOVED***, (err, resp) => {
            if (err) {
                callback(err, null, resp);
                return;
          ***REMOVED***
            this.metadata = resp;
            callback(null, this.metadata, resp);
      ***REMOVED***);
  ***REMOVED***
***REMOVED***
exports.Notification = Notification;
/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
promisify_1.promisifyAll(Notification);
//# sourceMappingURL=notification.js.map