"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const common_1 = require("@google-cloud/common");
/**
 * An HmacKey object contains metadata of an HMAC key created from a
 * service account through the {@link Storage***REMOVED*** client using
 * {@link Storage#createHmacKey***REMOVED***.
 *
 * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys***REMOVED***
 *
 * @class
 */
class HmacKey extends common_1.ServiceObject {
    /**
     * @typedef {object***REMOVED*** HmacKeyOptions
     * @property {string***REMOVED*** [projectId] The project ID of the project that owns
     *     the service account of the requested HMAC key. If not provided,
     *     the project ID used to instantiate the Storage client will be used.
     */
    /**
     * Constructs an HmacKey object.
     *
     * Note: this only create a local reference to an HMAC key, to create
     * an HMAC key, use {@link Storage#createHmacKey***REMOVED***.
     *
     * @param {Storage***REMOVED*** storage The Storage instance this HMAC key is
     *     attached to.
     * @param {string***REMOVED*** accessId The unique accessId for this HMAC key.
     * @param {HmacKeyOptions***REMOVED*** options Constructor configurations.
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const hmacKey = storage.hmacKey('access-id');
     */
    constructor(storage, accessId, options) {
        const methods = {
            /**
             * @typedef {object***REMOVED*** DeleteHmacKeyOptions
             * @property {string***REMOVED*** [userProject] This parameter is currently ignored.
             */
            /**
             * @typedef {array***REMOVED*** DeleteHmacKeyResponse
             * @property {object***REMOVED*** 0 The full API response.
             */
            /**
             * @callback DeleteHmacKeyCallback
             * @param {?Error***REMOVED*** err Request error, if any.
             * @param {object***REMOVED*** apiResponse The full API response.
             */
            /**
             * Deletes an HMAC key.
             * Key state must be set to `INACTIVE` prior to deletion.
             * Caution: HMAC keys cannot be recovered once you delete them.
             *
             * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.
             *
             * @method HmacKey#delete
             * @param {DeleteHmacKeyOptions***REMOVED*** [options] Configuration options.
             * @param {DeleteHmacKeyCallback***REMOVED*** [callback] Callback function.
             * @returns {Promise<DeleteHmacKeyResponse>***REMOVED***
             *
             * @example
             * const {Storage***REMOVED*** = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * //-
             * // Delete HMAC key after making the key inactive.
             * //-
             * const hmacKey = storage.hmacKey('ACCESS_ID');
             * hmacKey.setMetadata({state: 'INACTIVE'***REMOVED***, (err, hmacKeyMetadata) => {
             *     if (err) {
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     hmacKey.delete((err) => {
             *       if (err) {
             *         console.error(err);
             *         return;
             *     ***REMOVED***
             *       // The HMAC key is deleted.
             *   ***REMOVED***);
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * const hmacKey = storage.hmacKey('ACCESS_ID');
             * hmacKey
             *   .setMetadata({state: 'INACTIVE'***REMOVED***)
             *   .then(() => {
             *     return hmacKey.delete();
             * ***REMOVED***);
             */
            delete: true,
            /**
             * @callback GetHmacKeyCallback
             * @param {?Error***REMOVED*** err Request error, if any.
             * @param {HmacKey***REMOVED*** hmacKey this {@link HmacKey***REMOVED*** instance.
             * @param {object***REMOVED*** apiResponse The full API response.
             */
            /**
             * @typedef {array***REMOVED*** GetHmacKeyResponse
             * @property {HmacKey***REMOVED*** 0 This {@link HmacKey***REMOVED*** instance.
             * @property {object***REMOVED*** 1 The full API response.
             */
            /**
             * @typedef {object***REMOVED*** GetHmacKeyOptions
             * @property {string***REMOVED*** [userProject] This parameter is currently ignored.
             */
            /**
             * Retrieves and populate an HMAC key's metadata, and return
             * this {@link HmacKey***REMOVED*** instance.
             *
             * HmacKey.get() does not give the HMAC key secret, as
             * it is only returned on creation.
             *
             * The authenticated user must have `storage.hmacKeys.get` permission
             * for the project in which the key exists.
             *
             * @method HmacKey#get
             * @param {GetHmacKeyOptions***REMOVED*** [options] Configuration options.
             * @param {GetHmacKeyCallback***REMOVED*** [callback] Callback function.
             * @returns {Promise<GetHmacKeyResponse>***REMOVED***
             *
             * @example
             * const {Storage***REMOVED*** = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * //-
             * // Get the HmacKey's Metadata.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .get((err, hmacKey) => {
             *     if (err) {
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     // do something with the returned HmacKey object.
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .get()
             *   .then((data) => {
             *     const hmacKey = data[0];
             * ***REMOVED***);
             */
            get: true,
            /**
             * @typedef {object***REMOVED*** GetHmacKeyMetadataOptions
             * @property {string***REMOVED*** [userProject] This parameter is currently ignored.
             */
            /**
             * Retrieves and populate an HMAC key's metadata, and return
             * the HMAC key's metadata as an object.
             *
             * HmacKey.getMetadata() does not give the HMAC key secret, as
             * it is only returned on creation.
             *
             * The authenticated user must have `storage.hmacKeys.get` permission
             * for the project in which the key exists.
             *
             * @method HmacKey#getMetadata
             * @param {GetHmacKeyMetadataOptions***REMOVED*** [options] Configuration options.
             * @param {HmacKeyMetadataCallback***REMOVED*** [callback] Callback function.
             * @returns {Promise<HmacKeyMetadataResponse>***REMOVED***
             *
             * @example
             * const {Storage***REMOVED*** = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * //-
             * // Get the HmacKey's metadata and populate to the metadata property.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .getMetadata((err, hmacKeyMetadata) => {
             *     if (err) {
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .getMetadata()
             *   .then((data) => {
             *     const hmacKeyMetadata = data[0];
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             */
            getMetadata: true,
            /**
             * @typedef {object***REMOVED*** SetHmacKeyMetadata Subset of {@link HmacKeyMetadata***REMOVED*** to update.
             * @property {string***REMOVED*** state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.
             * @property {string***REMOVED*** [etag] Include an etag from a previous get HMAC key request
             *    to perform safe read-modify-write.
             */
            /**
             * @typedef {object***REMOVED*** SetHmacKeyMetadataOptions
             * @property {string***REMOVED*** [userProject] This parameter is currently ignored.
             */
            /**
             * @callback HmacKeyMetadataCallback
             * @param {?Error***REMOVED*** err Request error, if any.
             * @param {HmacKeyMetadata***REMOVED*** metadata The updated {@link HmacKeyMetadata***REMOVED*** object.
             * @param {object***REMOVED*** apiResponse The full API response.
             */
            /**
             * @typedef {array***REMOVED*** HmacKeyMetadataResponse
             * @property {HmacKeyMetadata***REMOVED*** 0 The updated {@link HmacKeyMetadata***REMOVED*** object.
             * @property {object***REMOVED*** 1 The full API response.
             */
            /**
             * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata***REMOVED*** for
             * valid states.
             *
             * @method HmacKey#setMetadata
             * @param {SetHmacKeyMetadata***REMOVED*** metadata The new metadata.
             * @param {SetHmacKeyMetadataOptions***REMOVED*** [options] Configuration options.
             * @param {HmacKeyMetadataCallback***REMOVED*** [callback] Callback function.
             * @returns {Promise<HmacKeyMetadataResponse>***REMOVED***
             *
             * @example
             * const {Storage***REMOVED*** = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * const metadata = {
             *   state: 'INACTIVE',
             * ***REMOVED***;
             *
             * storage.hmacKey('ACCESS_ID')
             *   .setMetadata(metadata, (err, hmacKeyMetadata) => {
             *     if (err) {
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .setMetadata(metadata)
             *   .then((data) => {
             *     const hmacKeyMetadata = data[0];
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             */
            setMetadata: {
                reqOpts: {
                    method: 'PUT',
              ***REMOVED***,
          ***REMOVED***,
      ***REMOVED***
        const projectId = (options && options.projectId) || storage.projectId;
        super({
            parent: storage,
            id: accessId,
            baseUrl: `/projects/${projectId***REMOVED***/hmacKeys`,
            methods,
      ***REMOVED***);
  ***REMOVED***
***REMOVED***
exports.HmacKey = HmacKey;
//# sourceMappingURL=hmacKey.js.map