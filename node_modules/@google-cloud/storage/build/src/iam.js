"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const promisify_1 = require("@google-cloud/promisify");
const arrify = require("arrify");
const util_1 = require("./util");
/**
 * Get and set IAM policies for your Cloud Storage bucket.
 *
 * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)
 * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)
 * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)
 *
 * @constructor Iam
 * @mixin
 *
 * @param {Bucket***REMOVED*** bucket The parent instance.
 * @example
 * const {Storage***REMOVED*** = require('@google-cloud/storage');
 * const storage = new Storage();
 * const bucket = storage.bucket('my-bucket');
 * // bucket.iam
 */
class Iam {
    constructor(bucket) {
        this.request_ = bucket.request.bind(bucket);
        this.resourceId_ = 'buckets/' + bucket.getId();
  ***REMOVED***
    /**
     * Get the IAM policy.
     *
     * @param {GetPolicyRequest***REMOVED*** [options] Request options.
     * @param {GetPolicyCallback***REMOVED*** [callback] Callback function.
     * @returns {Promise<GetPolicyResponse>***REMOVED***
     *
     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('my-bucket');
     * bucket.iam.getPolicy(function(err, policy, apiResponse) {***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * bucket.iam.getPolicy().then(function(data) {
     *   const policy = data[0];
     *   const apiResponse = data[1];
     * ***REMOVED***);
     *
     * @example <caption>include:samples/iam.js</caption>
     * region_tag:storage_view_bucket_iam_members
     * Example of retrieving a bucket's IAM policy:
     */
    getPolicy(optionsOrCallback, callback) {
        const { options, callback: cb ***REMOVED*** = util_1.normalize(optionsOrCallback, callback);
        this.request_({
            uri: '/iam',
            qs: options,
      ***REMOVED***, cb);
  ***REMOVED***
    /**
     * Set the IAM policy.
     *
     * @throws {Error***REMOVED*** If no policy is provided.
     *
     * @param {Policy***REMOVED*** policy The policy.
     * @param {SetPolicyOptions***REMOVED*** [options] Configuration opbject.
     * @param {SetPolicyCallback***REMOVED*** callback Callback function.
     * @returns {Promise<SetPolicyResponse>***REMOVED***
     *
     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy***REMOVED***
     * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('my-bucket');
     *
     * const myPolicy = {
     *   bindings: [
     *     {
     *       role: 'roles/storage.admin',
     *       members:
     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']
     *   ***REMOVED***
     *   ]
     * ***REMOVED***;
     *
     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * bucket.iam.setPolicy(myPolicy).then(function(data) {
     *   const policy = data[0];
     *   const apiResponse = data[1];
     * ***REMOVED***);
     *
     * @example <caption>include:samples/iam.js</caption>
     * region_tag:storage_add_bucket_iam_member
     * Example of adding to a bucket's IAM policy:
     *
     * @example <caption>include:samples/iam.js</caption>
     * region_tag:storage_remove_bucket_iam_member
     * Example of removing from a bucket's IAM policy:
     */
    setPolicy(policy, optionsOrCallback, callback) {
        if (policy === null || typeof policy !== 'object') {
            throw new Error('A policy object is required.');
      ***REMOVED***
        const { options, callback: cb ***REMOVED*** = util_1.normalize(optionsOrCallback, callback);
        this.request_({
            method: 'PUT',
            uri: '/iam',
            json: Object.assign({
                resourceId: this.resourceId_,
          ***REMOVED***, policy),
            qs: options,
      ***REMOVED***, cb);
  ***REMOVED***
    /**
     * Test a set of permissions for a resource.
     *
     * @throws {Error***REMOVED*** If permissions are not provided.
     *
     * @param {string|string[]***REMOVED*** permissions The permission(s) to test for.
     * @param {TestIamPermissionsOptions***REMOVED*** [options] Configuration object.
     * @param {TestIamPermissionsCallback***REMOVED*** [callback] Callback function.
     * @returns {Promise<TestIamPermissionsResponse>***REMOVED***
     *
     * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions***REMOVED***
     *
     * @example
     * const {Storage***REMOVED*** = require('@google-cloud/storage');
     * const storage = new Storage();
     * const bucket = storage.bucket('my-bucket');
     *
     * //-
     * // Test a single permission.
     * //-
     * const test = 'storage.buckets.delete';
     *
     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {
     *   console.log(permissions);
     *   // {
     *   //   "storage.buckets.delete": true
     *   // ***REMOVED***
     * ***REMOVED***);
     *
     * //-
     * // Test several permissions at once.
     * //-
     * const tests = [
     *   'storage.buckets.delete',
     *   'storage.buckets.get'
     * ];
     *
     * bucket.iam.testPermissions(tests, function(err, permissions) {
     *   console.log(permissions);
     *   // {
     *   //   "storage.buckets.delete": false,
     *   //   "storage.buckets.get": true
     *   // ***REMOVED***
     * ***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * bucket.iam.testPermissions(test).then(function(data) {
     *   const permissions = data[0];
     *   const apiResponse = data[1];
     * ***REMOVED***);
     */
    testPermissions(permissions, optionsOrCallback, callback) {
        if (!Array.isArray(permissions) && typeof permissions !== 'string') {
            throw new Error('Permissions are required.');
      ***REMOVED***
        const { options, callback: cb ***REMOVED*** = util_1.normalize(optionsOrCallback, callback);
        const permissionsArray = arrify(permissions);
        const req = Object.assign({
            permissions: permissionsArray,
      ***REMOVED***, options);
        this.request_({
            uri: '/iam/testPermissions',
            qs: req,
            useQuerystring: true,
      ***REMOVED***, (err, resp) => {
            if (err) {
                cb(err, null, resp);
                return;
          ***REMOVED***
            const availablePermissions = arrify(resp.permissions);
            const permissionsHash = permissionsArray.reduce((acc, permission) => {
                acc[permission] = availablePermissions.indexOf(permission) > -1;
                return acc;
          ***REMOVED***, {***REMOVED***);
            cb(null, permissionsHash, resp);
      ***REMOVED***);
  ***REMOVED***
***REMOVED***
exports.Iam = Iam;
/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
promisify_1.promisifyAll(Iam);
//# sourceMappingURL=iam.js.map