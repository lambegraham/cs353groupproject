// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
'use strict';
const gapicConfig = require('./firestore_admin_client_config.json');
const gax = require('google-gax');
const path = require('path');
const VERSION = require('../../../package.json').version;
/**
 * Operations are created by service `FirestoreAdmin`, but are accessed via
 * service `google.longrunning.Operations`.
 *
 * @class
 * @memberof v1
 */
class FirestoreAdminClient {
    /**
     * Construct an instance of FirestoreAdminClient.
     *
     * @param {object***REMOVED*** [options] - The configuration object. See the subsequent
     *   parameters for more details.
     * @param {object***REMOVED*** [options.credentials] - Credentials object.
     * @param {string***REMOVED*** [options.credentials.client_email]
     * @param {string***REMOVED*** [options.credentials.private_key]
     * @param {string***REMOVED*** [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string***REMOVED*** [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number***REMOVED*** [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string***REMOVED*** [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials***REMOVED***,
     *     your project ID will be detected automatically.
     * @param {function***REMOVED*** [options.promise] - Custom promise module to use instead
     *     of native Promises.
     * @param {string***REMOVED*** [options.apiEndpoint] - The domain name of the
     *     API remote host.
     */
    constructor(opts) {
        opts = opts || {***REMOVED***;
        this._descriptors = {***REMOVED***;
        if (global.isBrowser) {
            // If we're in browser, we use gRPC fallback.
            opts.fallback = true;
      ***REMOVED***
        // If we are in browser, we are already using fallback because of the
        // "browser" field in package.json.
        // But if we were explicitly requested to use fallback, let's do it now.
        const gaxModule = !global.isBrowser && opts.fallback ? gax.fallback : gax;
        const servicePath = opts.servicePath || opts.apiEndpoint || this.constructor.servicePath;
        // Ensure that options include the service address and port.
        opts = Object.assign({
            clientConfig: {***REMOVED***,
            port: this.constructor.port,
            servicePath,
      ***REMOVED***, opts);
        // Create a `gaxGrpc` object, with any grpc-specific options
        // sent to the client.
        opts.scopes = this.constructor.scopes;
        const gaxGrpc = new gaxModule.GrpcClient(opts);
        // Save the auth object to the client, for use by other methods.
        this.auth = gaxGrpc.auth;
        // Determine the client header string.
        const clientHeader = [];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node***REMOVED***`);
      ***REMOVED***
        clientHeader.push(`gax/${gaxModule.version***REMOVED***`);
        if (opts.fallback) {
            clientHeader.push(`gl-web/${gaxModule.version***REMOVED***`);
      ***REMOVED***
        else {
            clientHeader.push(`grpc/${gaxGrpc.grpcVersion***REMOVED***`);
      ***REMOVED***
        clientHeader.push(`gapic/${VERSION***REMOVED***`);
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName***REMOVED***/${opts.libVersion***REMOVED***`);
      ***REMOVED***
        // Load the applicable protos.
        // For Node.js, pass the path to JSON proto file.
        // For browsers, pass the JSON content.
        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
        const protos = gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this._pathTemplates = {
            databasePathTemplate: new gaxModule.PathTemplate('projects/{project***REMOVED***/databases/{database***REMOVED***'),
            fieldPathTemplate: new gaxModule.PathTemplate('projects/{project***REMOVED***/databases/{database***REMOVED***/collectionGroups/{collection_id***REMOVED***/fields/{field_id***REMOVED***'),
            indexPathTemplate: new gaxModule.PathTemplate('projects/{project***REMOVED***/databases/{database***REMOVED***/collectionGroups/{collection_id***REMOVED***/indexes/{index_id***REMOVED***'),
            parentPathTemplate: new gaxModule.PathTemplate('projects/{project***REMOVED***/databases/{database***REMOVED***/collectionGroups/{collection_id***REMOVED***'),
      ***REMOVED***
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this._descriptors.page = {
            listIndexes: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),
            listFields: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields'),
      ***REMOVED***
        // Put together the default options sent with requests.
        const defaults = gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig, { 'x-goog-api-client': clientHeader.join(' ') ***REMOVED***);
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this._innerApiCalls = {***REMOVED***;
        // Put together the "service stub" for
        // google.firestore.admin.v1.FirestoreAdmin.
        const firestoreAdminStub = gaxGrpc.createStub(opts.fallback
            ? protos.lookupService('google.firestore.admin.v1.FirestoreAdmin')
            : protos.google.firestore.admin.v1.FirestoreAdmin, opts);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const firestoreAdminStubMethods = [
            'createIndex',
            'listIndexes',
            'getIndex',
            'deleteIndex',
            'importDocuments',
            'exportDocuments',
            'getField',
            'listFields',
            'updateField',
        ];
        for (const methodName of firestoreAdminStubMethods) {
            const innerCallPromise = firestoreAdminStub.then(stub => (...args) => {
                return stub[methodName].apply(stub, args);
          ***REMOVED***, err => () => {
                throw err;
          ***REMOVED***);
            this._innerApiCalls[methodName] = gaxModule.createApiCall(innerCallPromise, defaults[methodName], this._descriptors.page[methodName]);
      ***REMOVED***
  ***REMOVED***
    /**
     * The DNS address for this API service.
     */
    static get servicePath() {
        return 'firestore.googleapis.com';
  ***REMOVED***
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static get apiEndpoint() {
        return 'firestore.googleapis.com';
  ***REMOVED***
    /**
     * The port for this API service.
     */
    static get port() {
        return 443;
  ***REMOVED***
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/datastore',
        ];
  ***REMOVED***
    /**
     * Return the project ID used by this class.
     * @param {function(Error, string)***REMOVED*** callback - the callback to
     *   be called with the current project Id.
     */
    getProjectId(callback) {
        return this.auth.getProjectId(callback);
  ***REMOVED***
    // -------------------
    // -- Service calls --
    // -------------------
    /**
     * Creates a composite index. This returns a google.longrunning.Operation
     * which may be used to track the status of the creation. The metadata for
     * the operation will be the type IndexOperationMetadata.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.parent
     *   A parent name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***`
     * @param {Object***REMOVED*** request.index
     *   The composite index to create.
     *
     *   This object should have the same structure as [Index]{@link google.firestore.admin.v1.Index***REMOVED***
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');
     * const index = {***REMOVED***;
     * const request = {
     *   parent: formattedParent,
     *   index: index,
     * ***REMOVED***;
     * client.createIndex(request)
     *   .then(responses => {
     *     const response = responses[0];
     *     // doThingsWith(response)
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    createIndex(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            parent: request.parent,
      ***REMOVED***);
        return this._innerApiCalls.createIndex(request, options, callback);
  ***REMOVED***
    /**
     * Lists composite indexes.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.parent
     *   A parent name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***`
     * @param {string***REMOVED*** [request.filter]
     *   The filter to apply to list results.
     * @param {number***REMOVED*** [request.pageSize]
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Array, ?Object, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is Array of [Index]{@link google.firestore.admin.v1.Index***REMOVED***.
     *
     *   When autoPaginate: false is specified through options, it contains the result
     *   in a single response. If the response indicates the next page exists, the third
     *   parameter is set to be used for the next request object. The fourth parameter keeps
     *   the raw response object of an object representing [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index***REMOVED***.
     *
     *   When autoPaginate: false is specified through options, the array has three elements.
     *   The first element is Array of [Index]{@link google.firestore.admin.v1.Index***REMOVED*** in a single response.
     *   The second element is the next request object if the response
     *   indicates the next page exists, or null. The third element is
     *   an object representing [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse***REMOVED***.
     *
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * // Iterate over all elements.
     * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');
     *
     * client.listIndexes({parent: formattedParent***REMOVED***)
     *   .then(responses => {
     *     const resources = responses[0];
     *     for (const resource of resources) {
     *       // doThingsWith(resource)
     *   ***REMOVED***
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     *
     * // Or obtain the paged response.
     * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');
     *
     *
     * const options = {autoPaginate: false***REMOVED***;
     * const callback = responses => {
     *   // The actual resources in a response.
     *   const resources = responses[0];
     *   // The next request if the response shows that there are more responses.
     *   const nextRequest = responses[1];
     *   // The actual response object, if necessary.
     *   // const rawResponse = responses[2];
     *   for (const resource of resources) {
     *     // doThingsWith(resource);
     * ***REMOVED***
     *   if (nextRequest) {
     *     // Fetch the next page.
     *     return client.listIndexes(nextRequest, options).then(callback);
     * ***REMOVED***
     * ***REMOVED***
     * client.listIndexes({parent: formattedParent***REMOVED***, options)
     *   .then(callback)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    listIndexes(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            parent: request.parent,
      ***REMOVED***);
        return this._innerApiCalls.listIndexes(request, options, callback);
  ***REMOVED***
    /**
     * Equivalent to {@link listIndexes***REMOVED***, but returns a NodeJS Stream object.
     *
     * This fetches the paged responses for {@link listIndexes***REMOVED*** continuously
     * and invokes the callback registered for 'data' event for each element in the
     * responses.
     *
     * The returned object has 'end' method when no more elements are required.
     *
     * autoPaginate option will be ignored.
     *
     * @see {@link https://nodejs.org/api/stream.html***REMOVED***
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.parent
     *   A parent name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***`
     * @param {string***REMOVED*** [request.filter]
     *   The filter to apply to list results.
     * @param {number***REMOVED*** [request.pageSize]
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @returns {Stream***REMOVED***
     *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index***REMOVED*** on 'data' event.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');
     * client.listIndexesStream({parent: formattedParent***REMOVED***)
     *   .on('data', element => {
     *     // doThingsWith(element)
     * ***REMOVED***).on('error', err => {
     *     console.log(err);
     * ***REMOVED***);
     */
    listIndexesStream(request, options) {
        options = options || {***REMOVED***;
        return this._descriptors.page.listIndexes.createStream(this._innerApiCalls.listIndexes, request, options);
  ***REMOVED***
    /**
     * Gets a composite index.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.name
     *   A name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***/indexes/{index_id***REMOVED***`
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing [Index]{@link google.firestore.admin.v1.Index***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index***REMOVED***.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedName = client.indexPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]', '[INDEX_ID]');
     * client.getIndex({name: formattedName***REMOVED***)
     *   .then(responses => {
     *     const response = responses[0];
     *     // doThingsWith(response)
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    getIndex(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name,
      ***REMOVED***);
        return this._innerApiCalls.getIndex(request, options, callback);
  ***REMOVED***
    /**
     * Deletes a composite index.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.name
     *   A name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***/indexes/{index_id***REMOVED***`
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     * @returns {Promise***REMOVED*** - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedName = client.indexPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]', '[INDEX_ID]');
     * client.deleteIndex({name: formattedName***REMOVED***).catch(err => {
     *   console.error(err);
     * ***REMOVED***);
     */
    deleteIndex(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name,
      ***REMOVED***);
        return this._innerApiCalls.deleteIndex(request, options, callback);
  ***REMOVED***
    /**
     * Imports documents into Google Cloud Firestore. Existing documents with the
     * same name are overwritten. The import occurs in the background and its
     * progress can be monitored and managed via the Operation resource that is
     * created. If an ImportDocuments operation is cancelled, it is possible
     * that a subset of the data has already been imported to Cloud Firestore.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.name
     *   Database to import into. Should be of the form:
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***`.
     * @param {string[]***REMOVED*** [request.collectionIds]
     *   Which collection ids to import. Unspecified means all collections included
     *   in the import.
     * @param {string***REMOVED*** [request.inputUriPrefix]
     *   Location of the exported files.
     *   This must match the output_uri_prefix of an ExportDocumentsResponse from
     *   an export that has completed successfully.
     *   See:
     *   google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix.
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedName = client.databasePath('[PROJECT]', '[DATABASE]');
     * client.importDocuments({name: formattedName***REMOVED***)
     *   .then(responses => {
     *     const response = responses[0];
     *     // doThingsWith(response)
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    importDocuments(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name,
      ***REMOVED***);
        return this._innerApiCalls.importDocuments(request, options, callback);
  ***REMOVED***
    /**
     * Exports a copy of all or a subset of documents from Google Cloud Firestore
     * to another storage system, such as Google Cloud Storage. Recent updates to
     * documents may not be reflected in the export. The export occurs in the
     * background and its progress can be monitored and managed via the
     * Operation resource that is created. The output of an export may only be
     * used once the associated operation is done. If an export operation is
     * cancelled before completion it may leave partial data behind in Google
     * Cloud Storage.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.name
     *   Database to export. Should be of the form:
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***`.
     * @param {string[]***REMOVED*** [request.collectionIds]
     *   Which collection ids to export. Unspecified means all collections.
     * @param {string***REMOVED*** [request.outputUriPrefix]
     *   The output URI. Currently only supports Google Cloud Storage URIs of the
     *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
     *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
     *   Google Cloud Storage namespace path. When
     *   choosing a name, be sure to consider Google Cloud Storage naming
     *   guidelines: https://cloud.google.com/storage/docs/naming.
     *   If the URI is a bucket (without a namespace path), a prefix will be
     *   generated based on the start time.
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedName = client.databasePath('[PROJECT]', '[DATABASE]');
     * client.exportDocuments({name: formattedName***REMOVED***)
     *   .then(responses => {
     *     const response = responses[0];
     *     // doThingsWith(response)
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    exportDocuments(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name,
      ***REMOVED***);
        return this._innerApiCalls.exportDocuments(request, options, callback);
  ***REMOVED***
    /**
     * Gets the metadata and configuration for a Field.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.name
     *   A name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***/fields/{field_id***REMOVED***`
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing [Field]{@link google.firestore.admin.v1.Field***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field***REMOVED***.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedName = client.fieldPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]', '[FIELD_ID]');
     * client.getField({name: formattedName***REMOVED***)
     *   .then(responses => {
     *     const response = responses[0];
     *     // doThingsWith(response)
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    getField(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name,
      ***REMOVED***);
        return this._innerApiCalls.getField(request, options, callback);
  ***REMOVED***
    /**
     * Lists the field configuration and metadata for this database.
     *
     * Currently, FirestoreAdmin.ListFields only supports listing fields
     * that have been explicitly overridden. To issue this query, call
     * FirestoreAdmin.ListFields with the filter set to
     * `indexConfig.usesAncestorConfig:false`.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.parent
     *   A parent name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***`
     * @param {string***REMOVED*** [request.filter]
     *   The filter to apply to list results. Currently,
     *   FirestoreAdmin.ListFields only supports listing fields
     *   that have been explicitly overridden. To issue this query, call
     *   FirestoreAdmin.ListFields with the filter set to
     *   `indexConfig.usesAncestorConfig:false`.
     * @param {number***REMOVED*** [request.pageSize]
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Array, ?Object, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is Array of [Field]{@link google.firestore.admin.v1.Field***REMOVED***.
     *
     *   When autoPaginate: false is specified through options, it contains the result
     *   in a single response. If the response indicates the next page exists, the third
     *   parameter is set to be used for the next request object. The fourth parameter keeps
     *   the raw response object of an object representing [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field***REMOVED***.
     *
     *   When autoPaginate: false is specified through options, the array has three elements.
     *   The first element is Array of [Field]{@link google.firestore.admin.v1.Field***REMOVED*** in a single response.
     *   The second element is the next request object if the response
     *   indicates the next page exists, or null. The third element is
     *   an object representing [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse***REMOVED***.
     *
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * // Iterate over all elements.
     * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');
     *
     * client.listFields({parent: formattedParent***REMOVED***)
     *   .then(responses => {
     *     const resources = responses[0];
     *     for (const resource of resources) {
     *       // doThingsWith(resource)
     *   ***REMOVED***
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     *
     * // Or obtain the paged response.
     * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');
     *
     *
     * const options = {autoPaginate: false***REMOVED***;
     * const callback = responses => {
     *   // The actual resources in a response.
     *   const resources = responses[0];
     *   // The next request if the response shows that there are more responses.
     *   const nextRequest = responses[1];
     *   // The actual response object, if necessary.
     *   // const rawResponse = responses[2];
     *   for (const resource of resources) {
     *     // doThingsWith(resource);
     * ***REMOVED***
     *   if (nextRequest) {
     *     // Fetch the next page.
     *     return client.listFields(nextRequest, options).then(callback);
     * ***REMOVED***
     * ***REMOVED***
     * client.listFields({parent: formattedParent***REMOVED***, options)
     *   .then(callback)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    listFields(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            parent: request.parent,
      ***REMOVED***);
        return this._innerApiCalls.listFields(request, options, callback);
  ***REMOVED***
    /**
     * Equivalent to {@link listFields***REMOVED***, but returns a NodeJS Stream object.
     *
     * This fetches the paged responses for {@link listFields***REMOVED*** continuously
     * and invokes the callback registered for 'data' event for each element in the
     * responses.
     *
     * The returned object has 'end' method when no more elements are required.
     *
     * autoPaginate option will be ignored.
     *
     * @see {@link https://nodejs.org/api/stream.html***REMOVED***
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {string***REMOVED*** request.parent
     *   A parent name of the form
     *   `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/{collection_id***REMOVED***`
     * @param {string***REMOVED*** [request.filter]
     *   The filter to apply to list results. Currently,
     *   FirestoreAdmin.ListFields only supports listing fields
     *   that have been explicitly overridden. To issue this query, call
     *   FirestoreAdmin.ListFields with the filter set to
     *   `indexConfig.usesAncestorConfig:false`.
     * @param {number***REMOVED*** [request.pageSize]
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @returns {Stream***REMOVED***
     *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field***REMOVED*** on 'data' event.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const formattedParent = client.parentPath('[PROJECT]', '[DATABASE]', '[COLLECTION_ID]');
     * client.listFieldsStream({parent: formattedParent***REMOVED***)
     *   .on('data', element => {
     *     // doThingsWith(element)
     * ***REMOVED***).on('error', err => {
     *     console.log(err);
     * ***REMOVED***);
     */
    listFieldsStream(request, options) {
        options = options || {***REMOVED***;
        return this._descriptors.page.listFields.createStream(this._innerApiCalls.listFields, request, options);
  ***REMOVED***
    /**
     * Updates a field configuration. Currently, field updates apply only to
     * single field index configuration. However, calls to
     * FirestoreAdmin.UpdateField should provide a field mask to avoid
     * changing any configuration that the caller isn't aware of. The field mask
     * should be specified as: `{ paths: "index_config" ***REMOVED***`.
     *
     * This call returns a google.longrunning.Operation which may be used to
     * track the status of the field update. The metadata for
     * the operation will be the type FieldOperationMetadata.
     *
     * To configure the default field settings for the database, use
     * the special `Field` with resource name:
     * `projects/{project_id***REMOVED***/databases/{database_id***REMOVED***/collectionGroups/__default__/fields/*`.
     *
     * @param {Object***REMOVED*** request
     *   The request object that will be sent.
     * @param {Object***REMOVED*** request.field
     *   The field to be updated.
     *
     *   This object should have the same structure as [Field]{@link google.firestore.admin.v1.Field***REMOVED***
     * @param {Object***REMOVED*** [request.updateMask]
     *   A mask, relative to the field. If specified, only configuration specified
     *   by this field_mask will be updated in the field.
     *
     *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask***REMOVED***
     * @param {Object***REMOVED*** [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html***REMOVED*** for the details.
     * @param {function(?Error, ?Object)***REMOVED*** [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     * @returns {Promise***REMOVED*** - The promise which resolves to an array.
     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation***REMOVED***.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     *
     * const firestore = require('@google-cloud/firestore');
     *
     * const client = new firestore.v1.FirestoreAdminClient({
     *   // optional auth parameters.
     * ***REMOVED***);
     *
     * const field = {***REMOVED***;
     * client.updateField({field: field***REMOVED***)
     *   .then(responses => {
     *     const response = responses[0];
     *     // doThingsWith(response)
     * ***REMOVED***)
     *   .catch(err => {
     *     console.error(err);
     * ***REMOVED***);
     */
    updateField(request, options, callback) {
        if (options instanceof Function && callback === undefined) {
            callback = options;
            options = {***REMOVED***;
      ***REMOVED***
        request = request || {***REMOVED***;
        options = options || {***REMOVED***;
        options.otherArgs = options.otherArgs || {***REMOVED***;
        options.otherArgs.headers = options.otherArgs.headers || {***REMOVED***;
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            'field.name': request.field.name,
      ***REMOVED***);
        return this._innerApiCalls.updateField(request, options, callback);
  ***REMOVED***
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified database resource name string.
     *
     * @param {String***REMOVED*** project
     * @param {String***REMOVED*** database
     * @returns {String***REMOVED***
     */
    databasePath(project, database) {
        return this._pathTemplates.databasePathTemplate.render({
            project: project,
            database: database,
      ***REMOVED***);
  ***REMOVED***
    /**
     * Return a fully-qualified field resource name string.
     *
     * @param {String***REMOVED*** project
     * @param {String***REMOVED*** database
     * @param {String***REMOVED*** collectionId
     * @param {String***REMOVED*** fieldId
     * @returns {String***REMOVED***
     */
    fieldPath(project, database, collectionId, fieldId) {
        return this._pathTemplates.fieldPathTemplate.render({
            project: project,
            database: database,
            collection_id: collectionId,
            field_id: fieldId,
      ***REMOVED***);
  ***REMOVED***
    /**
     * Return a fully-qualified index resource name string.
     *
     * @param {String***REMOVED*** project
     * @param {String***REMOVED*** database
     * @param {String***REMOVED*** collectionId
     * @param {String***REMOVED*** indexId
     * @returns {String***REMOVED***
     */
    indexPath(project, database, collectionId, indexId) {
        return this._pathTemplates.indexPathTemplate.render({
            project: project,
            database: database,
            collection_id: collectionId,
            index_id: indexId,
      ***REMOVED***);
  ***REMOVED***
    /**
     * Return a fully-qualified parent resource name string.
     *
     * @param {String***REMOVED*** project
     * @param {String***REMOVED*** database
     * @param {String***REMOVED*** collectionId
     * @returns {String***REMOVED***
     */
    parentPath(project, database, collectionId) {
        return this._pathTemplates.parentPathTemplate.render({
            project: project,
            database: database,
            collection_id: collectionId,
      ***REMOVED***);
  ***REMOVED***
    /**
     * Parse the databaseName from a database resource.
     *
     * @param {String***REMOVED*** databaseName
     *   A fully-qualified path representing a database resources.
     * @returns {String***REMOVED*** - A string representing the project.
     */
    matchProjectFromDatabaseName(databaseName) {
        return this._pathTemplates.databasePathTemplate.match(databaseName).project;
  ***REMOVED***
    /**
     * Parse the databaseName from a database resource.
     *
     * @param {String***REMOVED*** databaseName
     *   A fully-qualified path representing a database resources.
     * @returns {String***REMOVED*** - A string representing the database.
     */
    matchDatabaseFromDatabaseName(databaseName) {
        return this._pathTemplates.databasePathTemplate.match(databaseName)
            .database;
  ***REMOVED***
    /**
     * Parse the fieldName from a field resource.
     *
     * @param {String***REMOVED*** fieldName
     *   A fully-qualified path representing a field resources.
     * @returns {String***REMOVED*** - A string representing the project.
     */
    matchProjectFromFieldName(fieldName) {
        return this._pathTemplates.fieldPathTemplate.match(fieldName).project;
  ***REMOVED***
    /**
     * Parse the fieldName from a field resource.
     *
     * @param {String***REMOVED*** fieldName
     *   A fully-qualified path representing a field resources.
     * @returns {String***REMOVED*** - A string representing the database.
     */
    matchDatabaseFromFieldName(fieldName) {
        return this._pathTemplates.fieldPathTemplate.match(fieldName).database;
  ***REMOVED***
    /**
     * Parse the fieldName from a field resource.
     *
     * @param {String***REMOVED*** fieldName
     *   A fully-qualified path representing a field resources.
     * @returns {String***REMOVED*** - A string representing the collection_id.
     */
    matchCollectionIdFromFieldName(fieldName) {
        return this._pathTemplates.fieldPathTemplate.match(fieldName).collection_id;
  ***REMOVED***
    /**
     * Parse the fieldName from a field resource.
     *
     * @param {String***REMOVED*** fieldName
     *   A fully-qualified path representing a field resources.
     * @returns {String***REMOVED*** - A string representing the field_id.
     */
    matchFieldIdFromFieldName(fieldName) {
        return this._pathTemplates.fieldPathTemplate.match(fieldName).field_id;
  ***REMOVED***
    /**
     * Parse the indexName from a index resource.
     *
     * @param {String***REMOVED*** indexName
     *   A fully-qualified path representing a index resources.
     * @returns {String***REMOVED*** - A string representing the project.
     */
    matchProjectFromIndexName(indexName) {
        return this._pathTemplates.indexPathTemplate.match(indexName).project;
  ***REMOVED***
    /**
     * Parse the indexName from a index resource.
     *
     * @param {String***REMOVED*** indexName
     *   A fully-qualified path representing a index resources.
     * @returns {String***REMOVED*** - A string representing the database.
     */
    matchDatabaseFromIndexName(indexName) {
        return this._pathTemplates.indexPathTemplate.match(indexName).database;
  ***REMOVED***
    /**
     * Parse the indexName from a index resource.
     *
     * @param {String***REMOVED*** indexName
     *   A fully-qualified path representing a index resources.
     * @returns {String***REMOVED*** - A string representing the collection_id.
     */
    matchCollectionIdFromIndexName(indexName) {
        return this._pathTemplates.indexPathTemplate.match(indexName).collection_id;
  ***REMOVED***
    /**
     * Parse the indexName from a index resource.
     *
     * @param {String***REMOVED*** indexName
     *   A fully-qualified path representing a index resources.
     * @returns {String***REMOVED*** - A string representing the index_id.
     */
    matchIndexIdFromIndexName(indexName) {
        return this._pathTemplates.indexPathTemplate.match(indexName).index_id;
  ***REMOVED***
    /**
     * Parse the parentName from a parent resource.
     *
     * @param {String***REMOVED*** parentName
     *   A fully-qualified path representing a parent resources.
     * @returns {String***REMOVED*** - A string representing the project.
     */
    matchProjectFromParentName(parentName) {
        return this._pathTemplates.parentPathTemplate.match(parentName).project;
  ***REMOVED***
    /**
     * Parse the parentName from a parent resource.
     *
     * @param {String***REMOVED*** parentName
     *   A fully-qualified path representing a parent resources.
     * @returns {String***REMOVED*** - A string representing the database.
     */
    matchDatabaseFromParentName(parentName) {
        return this._pathTemplates.parentPathTemplate.match(parentName).database;
  ***REMOVED***
    /**
     * Parse the parentName from a parent resource.
     *
     * @param {String***REMOVED*** parentName
     *   A fully-qualified path representing a parent resources.
     * @returns {String***REMOVED*** - A string representing the collection_id.
     */
    matchCollectionIdFromParentName(parentName) {
        return this._pathTemplates.parentPathTemplate.match(parentName)
            .collection_id;
  ***REMOVED***
***REMOVED***
module.exports = FirestoreAdminClient;
//# sourceMappingURL=firestore_admin_client.js.map