"use strict";
/**
 * Copyright 2018 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const gcpMetadata = require("gcp-metadata");
var GCPEnv;
(function (GCPEnv) {
    GCPEnv["APP_ENGINE"] = "APP_ENGINE";
    GCPEnv["KUBERNETES_ENGINE"] = "KUBERNETES_ENGINE";
    GCPEnv["CLOUD_FUNCTIONS"] = "CLOUD_FUNCTIONS";
    GCPEnv["COMPUTE_ENGINE"] = "COMPUTE_ENGINE";
    GCPEnv["NONE"] = "NONE";
***REMOVED***)(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {***REMOVED***));
let env;
function clear() {
    env = undefined;
***REMOVED***
exports.clear = clear;
async function getEnv() {
    if (!env) {
        if (isAppEngine()) {
            env = GCPEnv.APP_ENGINE;
      ***REMOVED***
        else if (isCloudFunction()) {
            env = GCPEnv.CLOUD_FUNCTIONS;
      ***REMOVED***
        else if (await isComputeEngine()) {
            if (await isKubernetesEngine()) {
                env = GCPEnv.KUBERNETES_ENGINE;
          ***REMOVED***
            else {
                env = GCPEnv.COMPUTE_ENGINE;
          ***REMOVED***
      ***REMOVED***
        else {
            env = GCPEnv.NONE;
      ***REMOVED***
  ***REMOVED***
    return env;
***REMOVED***
exports.getEnv = getEnv;
function isAppEngine() {
    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);
***REMOVED***
function isCloudFunction() {
    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);
***REMOVED***
async function isKubernetesEngine() {
    try {
        await gcpMetadata.instance('attributes/cluster-name');
        return true;
  ***REMOVED***
    catch (e) {
        return false;
  ***REMOVED***
***REMOVED***
async function isComputeEngine() {
    return gcpMetadata.isAvailable();
***REMOVED***
//# sourceMappingURL=envDetect.js.map