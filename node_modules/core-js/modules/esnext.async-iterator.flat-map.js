'use strict';
// https://github.com/tc39/proposal-iterator-helpers
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var createAsyncIteratorProxy = require('../internals/create-async-iterator-proxy');
var getAsyncIteratorMethod = require('../internals/get-async-iterator-method');

var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {
  var state = this;
  var mapper = state.mapper;
  var innerIterator, iteratorMethod;

  return new Promise(function (resolve, reject) {
    var outerLoop = function () {
      try {
        Promise.resolve(anObject(state.next.call(state.iterator, arg))).then(function (step) {
          try {
            if (anObject(step).done) {
              state.done = true;
              resolve({ done: true, value: undefined ***REMOVED***);
          ***REMOVED*** else {
              Promise.resolve(mapper(step.value)).then(function (mapped) {
                try {
                  if (isObject(mapped) && (iteratorMethod = getAsyncIteratorMethod(mapped)) !== undefined) {
                    state.innerIterator = innerIterator = iteratorMethod.call(mapped);
                    state.innerNext = aFunction(innerIterator.next);
                    return innerLoop();
                ***REMOVED*** resolve({ done: false, value: mapped ***REMOVED***);
              ***REMOVED*** catch (error2) { reject(error2); ***REMOVED***
            ***REMOVED***, reject);
          ***REMOVED***
        ***REMOVED*** catch (error1) { reject(error1); ***REMOVED***
      ***REMOVED***, reject);
    ***REMOVED*** catch (error) { reject(error); ***REMOVED***
  ***REMOVED***

    var innerLoop = function () {
      if (innerIterator = state.innerIterator) {
        try {
          Promise.resolve(anObject(state.innerNext.call(innerIterator))).then(function (result) {
            try {
              if (anObject(result).done) {
                state.innerIterator = state.innerNext = null;
                outerLoop();
            ***REMOVED*** else resolve({ done: false, value: result.value ***REMOVED***);
          ***REMOVED*** catch (error1) { reject(error1); ***REMOVED***
        ***REMOVED***, reject);
      ***REMOVED*** catch (error) { reject(error); ***REMOVED***
    ***REMOVED*** else outerLoop();
  ***REMOVED***

    innerLoop();
***REMOVED***);
***REMOVED***);

$({ target: 'AsyncIterator', proto: true, real: true ***REMOVED***, {
  flatMap: function flatMap(mapper) {
    return new AsyncIteratorProxy({
      iterator: anObject(this),
      mapper: aFunction(mapper),
      innerIterator: null,
      innerNext: null
  ***REMOVED***);
***REMOVED***
***REMOVED***);
