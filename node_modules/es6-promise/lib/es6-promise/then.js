import {
  invokeCallback,
  subscribe,
  FULFILLED,
  REJECTED,
  noop,
  makePromise,
  PROMISE_ID
***REMOVED*** from './-internal';

import { asap ***REMOVED*** from './asap';

export default function then(onFulfillment, onRejection) {
  const parent = this;

  const child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
***REMOVED***

  const { _state ***REMOVED*** = parent;

  if (_state) {
    const callback = arguments[_state - 1];
    asap(() => invokeCallback(_state, child, callback, parent._result));
***REMOVED*** else {
    subscribe(parent, child, onFulfillment, onRejection);
***REMOVED***

  return child;
***REMOVED***
