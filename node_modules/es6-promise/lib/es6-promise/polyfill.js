/*global self*/
import Promise from './promise';

export default function polyfill() {
  let local;

  if (typeof global !== 'undefined') {
    local = global;
***REMOVED*** else if (typeof self !== 'undefined') {
    local = self;
***REMOVED*** else {
    try {
      local = Function('return this')();
  ***REMOVED*** catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
  ***REMOVED***
***REMOVED***

  let P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
  ***REMOVED*** catch(e) {
      // silently ignored
  ***REMOVED***

    if (promiseToString === '[object Promise]' && !P.cast){
      return;
  ***REMOVED***
***REMOVED***

  local.Promise = Promise;
***REMOVED***
