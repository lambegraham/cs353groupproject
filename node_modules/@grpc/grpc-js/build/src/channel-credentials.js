"use strict";
/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const tls_1 = require("tls");
const call_credentials_1 = require("./call-credentials");
// tslint:disable-next-line:no-any
function verifyIsBufferOrNull(obj, friendlyName) {
    if (obj && !(obj instanceof Buffer)) {
        throw new TypeError(`${friendlyName***REMOVED***, if provided, must be a Buffer.`);
  ***REMOVED***
***REMOVED***
function bufferOrNullEqual(buf1, buf2) {
    if (buf1 === null && buf2 === null) {
        return true;
  ***REMOVED***
    else {
        return buf1 !== null && buf2 !== null && buf1.equals(buf2);
  ***REMOVED***
***REMOVED***
/**
 * A class that contains credentials for communicating over a channel, as well
 * as a set of per-call credentials, which are applied to every method call made
 * over a channel initialized with an instance of this class.
 */
class ChannelCredentials {
    constructor(callCredentials) {
        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();
  ***REMOVED***
    /**
     * Gets the set of per-call credentials associated with this instance.
     */
    _getCallCredentials() {
        return this.callCredentials;
  ***REMOVED***
    /**
     * Return a new ChannelCredentials instance with a given set of credentials.
     * The resulting instance can be used to construct a Channel that communicates
     * over TLS.
     * @param rootCerts The root certificate data.
     * @param privateKey The client certificate private key, if available.
     * @param certChain The client certificate key chain, if available.
     */
    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {
        verifyIsBufferOrNull(rootCerts, 'Root certificate');
        verifyIsBufferOrNull(privateKey, 'Private key');
        verifyIsBufferOrNull(certChain, 'Certificate chain');
        if (privateKey && !certChain) {
            throw new Error('Private key must be given with accompanying certificate chain');
      ***REMOVED***
        if (!privateKey && certChain) {
            throw new Error('Certificate chain must be given with accompanying private key');
      ***REMOVED***
        return new SecureChannelCredentialsImpl(rootCerts || null, privateKey || null, certChain || null, verifyOptions || {***REMOVED***);
  ***REMOVED***
    /**
     * Return a new ChannelCredentials instance with no credentials.
     */
    static createInsecure() {
        return new InsecureChannelCredentialsImpl();
  ***REMOVED***
***REMOVED***
exports.ChannelCredentials = ChannelCredentials;
class InsecureChannelCredentialsImpl extends ChannelCredentials {
    constructor(callCredentials) {
        super(callCredentials);
  ***REMOVED***
    compose(callCredentials) {
        throw new Error('Cannot compose insecure credentials');
  ***REMOVED***
    _getConnectionOptions() {
        return null;
  ***REMOVED***
    _isSecure() {
        return false;
  ***REMOVED***
    _equals(other) {
        return other instanceof InsecureChannelCredentialsImpl;
  ***REMOVED***
***REMOVED***
class SecureChannelCredentialsImpl extends ChannelCredentials {
    constructor(rootCerts, privateKey, certChain, verifyOptions) {
        super();
        this.rootCerts = rootCerts;
        this.privateKey = privateKey;
        this.certChain = certChain;
        this.verifyOptions = verifyOptions;
        const secureContext = tls_1.createSecureContext({
            ca: rootCerts || undefined,
            key: privateKey || undefined,
            cert: certChain || undefined,
      ***REMOVED***);
        this.connectionOptions = { secureContext ***REMOVED***;
        if (verifyOptions && verifyOptions.checkServerIdentity) {
            this.connectionOptions.checkServerIdentity = (host, cert) => {
                return verifyOptions.checkServerIdentity(host, { raw: cert.raw ***REMOVED***);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);
  ***REMOVED***
    _getConnectionOptions() {
        return this.connectionOptions;
  ***REMOVED***
    _isSecure() {
        return true;
  ***REMOVED***
    _equals(other) {
        if (this === other) {
            return true;
      ***REMOVED***
        if (other instanceof SecureChannelCredentialsImpl) {
            if (!bufferOrNullEqual(this.rootCerts, other.rootCerts)) {
                return false;
          ***REMOVED***
            if (!bufferOrNullEqual(this.privateKey, other.privateKey)) {
                return false;
          ***REMOVED***
            if (!bufferOrNullEqual(this.certChain, other.certChain)) {
                return false;
          ***REMOVED***
            return (this.verifyOptions.checkServerIdentity ===
                other.verifyOptions.checkServerIdentity);
      ***REMOVED***
        else {
            return false;
      ***REMOVED***
  ***REMOVED***
***REMOVED***
class ComposedChannelCredentialsImpl extends ChannelCredentials {
    constructor(channelCredentials, callCreds) {
        super(callCreds);
        this.channelCredentials = channelCredentials;
  ***REMOVED***
    compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);
  ***REMOVED***
    _getConnectionOptions() {
        return this.channelCredentials._getConnectionOptions();
  ***REMOVED***
    _isSecure() {
        return true;
  ***REMOVED***
    _equals(other) {
        if (this === other) {
            return true;
      ***REMOVED***
        if (other instanceof ComposedChannelCredentialsImpl) {
            return (this.channelCredentials._equals(other.channelCredentials) &&
                this.callCredentials._equals(other.callCredentials));
      ***REMOVED***
        else {
            return false;
      ***REMOVED***
  ***REMOVED***
***REMOVED***
//# sourceMappingURL=channel-credentials.js.map