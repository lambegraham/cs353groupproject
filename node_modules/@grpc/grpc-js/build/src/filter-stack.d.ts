/// <reference types="node" />
import { Call, StatusObject, WriteObject ***REMOVED*** from './call-stream';
import { Filter, FilterFactory ***REMOVED*** from './filter';
import { Metadata ***REMOVED*** from './metadata';
export declare class FilterStack implements Filter {
    private readonly filters;
    constructor(filters: Filter[]);
    sendMetadata(metadata: Promise<Metadata>): Promise<Metadata>;
    receiveMetadata(metadata: Promise<Metadata>): Promise<Metadata>;
    sendMessage(message: Promise<WriteObject>): Promise<WriteObject>;
    receiveMessage(message: Promise<Buffer>): Promise<Buffer>;
    receiveTrailers(status: Promise<StatusObject>): Promise<StatusObject>;
***REMOVED***
export declare class FilterStackFactory implements FilterFactory<FilterStack> {
    private readonly factories;
    constructor(factories: Array<FilterFactory<Filter>>);
    createFilter(callStream: Call): FilterStack;
***REMOVED***
